ID,title,code,method name,function name
1,"What is the difference between a list and a tuple in Python?
","# Creating a List with
# the use of Numbers
# code to test that tuples are mutable
List
=
[
1
, 
2
, 
4
, 
4
, 
3
, 
3
, 
3
, 
6
, 
5
]
print
(
""Original list ""
, 
List
)
List
[
3
] 
=
77
print
(
""Example to show mutability ""
, 
List
)
# code to test that tuples are immutable
tuple1 
=
(
0
, 
1
, 
2
, 
3
)
tuple1[
0
] 
=
4
print
(tuple1)
import
sys
a_list 
=
[]
a_tuple 
=
()
a_list 
=
[
""Geeks""
, 
""For""
, 
""Geeks""
]
a_tuple 
=
(
""Geeks""
, 
""For""
, 
""Geeks""
)
print
(sys.getsizeof(a_list))
print
(sys.getsizeof(a_tuple))
import
sys, platform
import
time
l
=
list
(
range
(
100000001
))
t
=
tuple
(
range
(
100000001
))
start 
=
time.time_ns()
for
i 
in
range
(
len
(t)):
    
a 
=
t[i]
end 
=
time.time_ns()
print
(
""Total lookup time for Tuple: ""
, end 
-
start)
start 
=
time.time_ns()
for
i 
in
range
(
len
(l)):
    
a 
=
l[i]
end 
=
time.time_ns()
print
(
""Total lookup time for LIST: ""
, end 
-
start)
my_list 
=
[
1
, 
2
, 
3
]
my_tuple 
=
(
4
, 
5
, 
6
)
print
(my_list[
0
]) 
# Output: 1
print
(my_tuple[
1
]) 
# Output: 5
my_list 
=
[
1
, 
2
, 
3
, 
4
, 
5
]
my_tuple 
=
(
6
, 
7
, 
8
, 
9
, 
10
)
print
(my_list[
1
:
3
]) 
# Output: [2, 3]
print
(my_tuple[:
3
]) 
# Output: (6, 7, 8)
list1 
=
[
1
, 
2
, 
3
]
list2 
=
[
4
, 
5
, 
6
]
tuple1 
=
(
7
, 
8
, 
9
)
tuple2 
=
(
10
, 
11
, 
12
)
print
(list1 
+
list2) 
# Output: [1, 2, 3, 4, 5, 6]
print
(tuple1 
+
tuple2) 
# Output: (7, 8, 9, 10, 11, 12)
my_list 
=
[
1
, 
2
, 
3
]
my_list.append(
4
)
print
(my_list) 
# Output: [1, 2, 3, 4]
list1 
=
[
1
, 
2
, 
3
]
list2 
=
[
4
, 
5
, 
6
]
list1.extend(list2)
print
(list1) 
# Output: [1, 2, 3, 4, 5, 6]
my_list 
=
[
1
, 
2
, 
3
, 
4
]
my_list.remove(
2
)
print
(my_list) 
# Output: [1, 3, 4]
","['getsizeof', 'time_ns', 'append', 'extend', 'remove']","['sys', 'time']"
2,"How do you create a dictionary in Python?
","key-value
key-value
keys
values
{}
dict()
{}
#create an empty dictionary
my_dictionary = {}

print(my_dictionary)

#to check the data type use the type() function
print(type(my_dictionary))

#output

#{}
#<class 'dict'>

dict()
#create an empty dictionary
my_dictionary = dict()

print(my_dictionary)

#to check the data type use the type() function
print(type(my_dictionary))

#output

#{}
#<class 'dict'>

dictionary_name = {key: value}

dictionary_name
=
key:value
dictionary_name
{}
:
#create a dictionary
my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}

print(my_information)

#check data type
print(type(my_information))

#output

#{'name': 'Dionysia', 'age': 28, 'location': 'Athens'}
#<class 'dict'>

'name': 'Dionysia'
'age': 28
'location': 'Athens'
name
age
location
Dionysia
28
Athens
,
dict()
dict()
#create a dictionary with dict()
my_information = dict({'name': 'Dionysia' ,'age': 28,'location': 'Athens'})

print(my_information)

#check data type
print(type(my_information))

#output

#{'name': 'Dionysia', 'age': 28, 'location': 'Athens'}
#<class 'dict'>

fromkeys()
None
dictionary_name = dict.fromkeys(sequence,value)

fromkeys()
#create sequence of strings
cities = ('Paris','Athens', 'Madrid')

#create the dictionary, `my_dictionary`, using the fromkeys() method
my_dictionary = dict.fromkeys(cities)

print(my_dictionary)

#{'Paris': None, 'Athens': None, 'Madrid': None}

#create a sequence of strings
cities = ('Paris','Athens', 'Madrid')

#create a single value
continent = 'Europe'

my_dictionary = dict.fromkeys(cities,continent)

print(my_dictionary)

#output

#{'Paris': 'Europe', 'Athens': 'Europe', 'Madrid': 'Europe'}

integers
strings
tuples
floating point numbers
Booleans
sets
lists
dictionaries
my_dictionary = {True: ""True"",  1: 1,  1.1: 1.1, ""one"": 1, ""languages"": [""Python""]}

print(my_dictionary)

#output

#{True: 1, 1.1: 1.1, 'one': 1, 'languages': ['Python']}

Boolean
integer
floating point number
string
TypeError
my_dictionary = {[""Python""]: ""languages""}

print(my_dictionary)

#output

#line 1, in <module>
#    my_dictionary = {[""Python""]: ""languages""}
#TypeError: unhashable type: 'list'

list
TypeError: unhashable type: 'list'
key-value
len()
len()
my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}

print(len(my_information))

#output

#3

key-value
items()
year_of_creation = {'Python': 1993, 'JavaScript': 1995, 'HTML': 1993}

print(year_of_creation.items())

#output

#dict_items([('Python', 1993), ('JavaScript', 1995), ('HTML', 1993)])

items()
keys
keys()
year_of_creation = {'Python': 1993, 'JavaScript': 1995, 'HTML': 1993}

print(year_of_creation.keys())

#output

#dict_keys(['Python', 'JavaScript', 'HTML'])

keys()
values
values()
year_of_creation = {'Python': 1993, 'JavaScript': 1995, 'HTML': 1993}

print(year_of_creation.values())

#output

#dict_values([1993, 1995, 1993])

values()
dictionary_name[key]

my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}

#access the value associated with the 'age' key
print(my_information['age'])

#output

#28

my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}

#try to access the value associated with the 'job' key
print(my_information['job'])

#output

#line 4, in <module>
#    print(my_information['job'])
#KeyError: 'job'

KeyError
in
True
False
my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}

#search for the 'job' key
print('job' in my_information)

#output

#False

get()
get()
my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}

#try to access the 'job' key using the get() method
print(my_information.get('job'))

#output

#None

get()
None
KeyError
None
get()
get()
my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}

#try to access the 'job' key using the get() method
print(my_information.get('job', 'This value does not exist'))

#output

#This value does not exist

This value does not exist
dictionary_name[key] = value

my_dictionary = {}

print(my_dictionary)

#output

#{}

my_dictionary
my_dictionary = {}

#add a key-value pair to the empty dictionary
my_dictionary['name'] = ""John Doe""

#print dictionary
print(my_list)

#output

#{'name': 'John Doe'}

my_dictionary = {}

#add a key-value pair to the empty dictionary
my_dictionary['name'] = ""John Doe""

# add another  key-value pair
my_dictionary['age'] = 34

#print dictionary
print(my_dictionary)

#output

#{'name': 'John Doe', 'age': 34}

my_dictionary = {'name': ""John Doe"", 'age':34}

print(my_dictionary)

#try to create a an 'age' key and assign it a value
#the 'age' key already exists

my_dictionary['age'] = 46

#the value of 'age' will now be updated

print(my_dictionary)

#output

#{'name': 'John Doe', 'age': 34}
#{'name': 'John Doe', 'age': 46}

in
my_dictionary = {'name': ""John Doe"", 'age':34}

#I want to add an `age` key. Before I do so, I check to see if it already exists
print('age' in my_dictionary)

#output

#True

dictionary_name[existing_key] = new_value

my_dictionary = {'name': ""John Doe"", 'age':34}

my_dictionary['age'] = 46

print(my_dictionary)

#output

#{'name': 'John Doe', 'age': 46}

update()
name
age
my_dictionary
occupation
my_dictionary = {'name': ""John Doe"", 'age':34}

my_dictionary.update(name= 'Mike Green', age = 46, occupation = ""software developer"")

print(my_dictionary)

#output

#{'name': 'Mike Green', 'age': 46, 'occupation': 'software developer'}

update()
update()
numbers
more_numbers
more_numbers
numbers
update()
more_numbers
numbers
numbers = {'one': 1, 'two': 2, 'three': 3}
more_numbers = {'four': 4, 'five': 5, 'six': 6}

#update 'numbers' dictionary
#you update it by adding the contents of another dictionary, 'more_numbers',
#to the end of it
numbers.update(more_numbers)

print(numbers)

#output

#{'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6}

del
del dictionary_name[key]

location
my_information
my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}

del my_information['location']

print(my_information)

#output

#{'name': 'Dionysia', 'age': 28}

pop()
pop()
dictionary_name.pop(key)

location
pop()
my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}

city = my_information.pop('location')

print(my_information)
print(city)

#output

#{'name': 'Dionysia', 'age': 28}
#Athens

KeyError
my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}

my_information.pop('occupation')

print(my_information)

#output

#line 3, in <module>
#   my_information.pop('occupation')
#KeyError: 'occupation'

pop()
my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}

my_information.pop('occupation','Not found')

print(my_information)

#output

#{'name': 'Dionysia', 'age': 28, 'location': 'Athens'}

pop()
popitem()
popitem()
dictionary_name.popitem()

popitem()
my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}

popped_item = my_information.popitem()

print(my_information)
print(popped_item)

#output

#{'name': 'Dionysia', 'age': 28}
#('location', 'Athens')

clear()
my_information = {'name': 'Dionysia', 'age': 28, 'location': 'Athens'}

my_information.clear()

print(my_information)

#output

#{}

","['dict', 'type', 'fromkeys', 'len', 'items', 'dict_items', 'keys', 'dict_keys', 'values', 'dict_values', 'get', 'update', 'pop', 'popitem', 'clear']",[]
3,"How do you use a for loop to iterate over a list in Python?
","# Python3 code to iterate over a list
list
=
[
1
, 
3
, 
5
, 
7
, 
9
]
 
# Using for loop
for
i 
in
list
:
    
print
(i)
# Python3 code to iterate over a list
list
=
[
1
, 
3
, 
5
, 
7
, 
9
]
 
# getting length of list
length 
=
len
(
list
)
 
# Iterating the index
# same as 'for i in range(len(list))'
for
i 
in
range
(length):
    
print
(
list
[i])
# Python3 code to iterate over a list
list
=
[
1
, 
3
, 
5
, 
7
, 
9
]
 
# Getting length of list
length 
=
len
(
list
)
i 
=
0
 
# Iterating using while loop
while
i < length:
    
print
(
list
[i])
    
i 
+
=
1
# Python3 code to iterate over a list
list
=
[
1
, 
3
, 
5
, 
7
, 
9
]
 
# Using list comprehension
[
print
(i) 
for
i 
in
list
]
# Python3 code to iterate over a list
list
=
[
1
, 
3
, 
5
, 
7
, 
9
]
 
# Using enumerate()
for
i, val 
in
enumerate
(
list
):
    
print
(i, 
"",""
,val)
# Python program for
# iterating over array
import
numpy as geek
 
# creating an array using 
# arrange method
a 
=
geek.arange(
9
)
 
# shape array with 3 rows 
# and 4 columns
a 
=
a.reshape(
3
, 
3
)
 
# iterating an array
for
x 
in
geek.nditer(a):
    
print
(x)
# Python3 code to iterate over a list
list
=
[
1
, 
3
, 
5
, 
7
, 
9
]
# Create an iterator object using the iter function
iterator 
=
iter
(
list
)
# Use the next function to retrieve the elements of the iterator
try
:
    
while
True
:
        
element 
=
next
(iterator)
        
print
(element)
except
StopIteration:
    
pass
# Define a function to print each element
def
print_element(element):
    
print
(element)
# Create a list
my_list 
=
[
1
, 
3
, 
5
, 
7
, 
9
]
# Use map() to apply the print_element() function to each element of the list
result 
=
map
(print_element, my_list)
# Since map() returns an iterator, we need to consume
# the iterator in order to see the output
for
_ 
in
result:
    
pass
","['range', 'len', 'enumerate', 'arange', 'reshape', 'nditer', 'print_element', 'map']",['numpy']
4,"What is the difference between an if statement and a while loop in Python?
","var i = 0;
while(i < 4){
i++;
console.log(i)
}
set i to 0
check if i < 4
--> true so execute loop body
set i to i+1 (increase it by 1)
print i
check again if condtion is true i is 1 so still less than 4
--> true
set increase i by 1 to 2
print i
check condition again 
...
this goes on until i < 4 turns to be false, than you leave the loop and continue after the {}
for(var i = 0; i < 4;i++){
    console.log(i);
}
var password = prompt(""enter your password"");

while(password != 12345){
     password = prompt(""enter your password"");
}
do{
password = prompt(""enter your password"");
}while(password!= 12345)
password = prompt(""enter your password"");
","['while', 'log', 'for', 'prompt']",[]
5,"How do you use the range function in Python to create a sequence of numbers?
","range()
# create a sequence of numbers from 0 to 3
numbers = range(4)

# iterating through the sequence of numbers
for i in numbers:
    print(i)

# Output:

# 0
# 1
# 2
# 3

range()
range()
range(start, stop, step)
start
step
range()
range()
range()
stop
range()
# numbers from 0 to 3 (4 is not included)
numbers = range(4)
print(list(numbers))    # [0, 1, 2, 3]

# if 0 or negative number is passed, we get an empty sequence
numbers = range(-4)
print(list(numbers))    # []
range()
start
stop
range()
start
stop
# numbers from 2 to 4 (5 is not included)
numbers = range(2, 5)
print(list(numbers))    # [2, 3, 4]

# numbers from -2 to 3 (4 is not included)
numbers = range(-2, 4)    
print(list(numbers))    # [-2, -1, 0, 1, 2, 3]

# returns an empty sequence of numbers
numbers = range(4, 2) 
print(list(numbers))    # []

start
stop
step
step
# numbers from 2 to 10 with increment 3 between numbers
numbers = range(2, 10, 3)
print(list(numbers))    # [2, 5, 8]

# numbers from 4 to -1 with increment of -1
numbers = range(4, -1, -1)    
print(list(numbers))    # [4, 3, 2, 1, 0]

# numbers from 1 to 4 with increment of 1
# range(0, 5, 1) is equivalent to range(5)
numbers = range(0, 5, 1) 
print(list(numbers))    # [0, 1, 2, 3, 4]
start
step
range(0, 5, 1)
range(5)
range()
# iterate the loop 5 times
for i in range(5):
    print(i, 'Hello')

","['range', 'list']",[]
6,"How do you open and read a file in Python?
","open()
read()
readline()
readlines()
close()
with
open()
open(""name of file you want opened"", ""optional mode"")
open()
open(""demo.txt"")
random-text
main.py
main.py
open(""text-files/random-text.txt"")
open(""random-text.txt"")
open()
r
open(""demo.txt"", mode=""r"")
mode=
""r""
open(""demo.txt"", ""r"")
""w""
""a""
open()
open()
readable()
True
False
True
file = open(""demo.txt"")
print(file.readable())
""w""
readable()
False
file = open(""demo.txt"", ""w"")
print(file.readable())
read()
read()
demo.txt
file = open(""demo.txt"")
print(file.read())
read()
file = open(""demo.txt"")
print(file.read(4))
demo.txt
file = open(""demo.txt"")
print(file.read())
file.close()
with
with
with
with open(""demo.txt"") as file:
    print(file.read())
This is the first line
This is the second line
readline()
with open(""demo.txt"") as file:
    print(file.readline())
This is
with open(""demo.txt"") as file:
    print(file.readline(7))
readlines()
with open(""demo.txt"") as file:
    print(file.readlines())
for loop
demo.txt
with open(""demo.txt"") as file:
    for item in file:
        print(item)
open(""name of file you want opened"", ""optional mode"")

open()
open()
open(""demo.txt"", ""r"")
readable()
True
False
file.readable()
read()
file.read()
file.close()
with
with open(""demo.txt"") as file:
    print(file.read())
readline()
file.readline()
readlines()
file.readlines()
for loop
with open(""demo.txt"") as file:
    for item in file:
        print(item)
","['open', 'read', 'readline', 'readlines', 'close', 'readable']",[]
7,"What is the purpose of a try-except block in Python?
",">>> print( 0 / 0 ))
  File ""<stdin>"", line 1
    print( 0 / 0 ))
                  ^
SyntaxError: invalid syntax

>>> print( 0 / 0)
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ZeroDivisionError: integer division or modulo by zero

exception error
ZeroDivisionError
raise
raise
x = 10
if x > 5:
    raise Exception('x should not exceed 5. The value of x was: {}'.format(x))

Traceback (most recent call last):
  File ""<input>"", line 4, in <module>
Exception: x should not exceed 5. The value of x was: 10

AssertionError
assert
True
False
AssertionError
import sys
assert ('linux' in sys.platform), ""This code runs on Linux only.""

False
Traceback (most recent call last):
  File ""<input>"", line 2, in <module>
AssertionError: This code runs on Linux only.

AssertionError
try
except
try
except
try
except
try
except
try
except
def linux_interaction():
    assert ('linux' in sys.platform), ""Function can only run on Linux systems.""
    print('Doing something.')

linux_interaction()
assert
AssertionError
try
try:
    linux_interaction()
except:
    pass

pass


pass
try:
    linux_interaction()
except:
    print('Linux function was not executed')

Linux function was not executed

AssertionError
try:
    linux_interaction()
except AssertionError as error:
    print(error)
    print('The linux_interaction() function was not executed')

Function can only run on Linux systems.
The linux_interaction() function was not executed

AssertionError
AssertionError
try:
    with open('file.log') as file:
        read_data = file.read()
except:
    print('Could not open file.log')

Could not open file.log

FileNotFoundError
try:
    with open('file.log') as file:
        read_data = file.read()
except FileNotFoundError as fnf_error:
    print(fnf_error)

[Errno 2] No such file or directory: 'file.log'

try
try
Exception
except
linux_interaction()
try:
    linux_interaction()
    with open('file.log') as file:
        read_data = file.read()
except FileNotFoundError as fnf_error:
    print(fnf_error)
except AssertionError as error:
    print(error)
    print('Linux linux_interaction() function was not executed')

Function can only run on Linux systems.
Linux linux_interaction() function was not executed

try
[Errno 2] No such file or directory: 'file.log'

try
except
except
else
else
try:
    linux_interaction()
except AssertionError as error:
    print(error)
else:
    print('Executing the else clause.')

Doing something.
Executing the else clause.

else
try
else
try:
    linux_interaction()
except AssertionError as error:
    print(error)
else:
    try:
        with open('file.log') as file:
            read_data = file.read()
    except FileNotFoundError as fnf_error:
        print(fnf_error)

Doing something.
[Errno 2] No such file or directory: 'file.log'

linux_interaction()
FileNotFoundError
finally
finally
try:
    linux_interaction()
except AssertionError as error:
    print(error)
else:
    try:
        with open('file.log') as file:
            read_data = file.read()
    except FileNotFoundError as fnf_error:
        print(fnf_error)
finally:
    print('Cleaning up, irrespective of any exceptions.')

finally
try
else
Function can only run on Linux systems.
Cleaning up, irrespective of any exceptions.

raise
assert
try
except
else
finally
","['Exception', 'format', 'linux_interaction', 'open', 'read']",['sys']
8,"How do you define a function in Python?
","def
def functionName():
    # What to make the function do

def myfunction():
    print(""Hello World"")

myfunction()


python filename.py
def subtractNum():
    print(34 - 4)

subtractNum()
# Output: 30

def functionName(arg1, arg2):
    # What to do with function
    

functionName(valueForArg1, valueForArg2)

def addNum(num1, num2):
    print(num1 + num2)
addNum(2, 4)

# Output: 6

addNum
return
def multiplyNum(num1):
    return num1 * 8

result = multiplyNum(8)
print(result)

# Output: 64

multiplyNum
num1
num1
8
num1
result
","['functionName', 'myfunction', 'subtractNum', 'addNum', 'multiplyNum']",[]
9,"How do you use the random module in Python to generate a random number?
","randint()
# Program to generate a random number between 0 and 9

# importing the random module
import random

print(random.randint(0,9))

[a,b]
a <= N <= b
",['randint'],['random']
10,"What is object-oriented programming in Python and how does it differ from procedural programming?
",,[],[]
11,"What is the purpose of the init method in Python classes?
","# A Sample class with init method
class
Person:
    
# init method or constructor
    
def
__init__(
self
, name):
        
self
.name 
=
name
    
# Sample Method
    
def
say_hi(
self
):
        
print
(
'Hello, my name is'
, 
self
.name)
p 
=
Person(
'Nikhil'
)
p.say_hi()
# A Sample class with init method
class
Person:
    
# init method or constructor
    
def
__init__(
self
, name):
        
self
.name 
=
name
    
# Sample Method
    
def
say_hi(
self
):
        
print
(
'Hello, my name is'
, 
self
.name)
# Creating different objects
p1 
=
Person(
'Nikhil'
)
p2 
=
Person(
'Abhinav'
)
p3 
=
Person(
'Anshul'
)
p1.say_hi()
p2.say_hi()
p3.say_hi()
# Python program to
# demonstrate init with
# inheritance
class
A(
object
):
    
def
__init__(
self
, something):
        
print
(
""A init called""
)
        
self
.something 
=
something
class
B(A):
    
def
__init__(
self
, something):
        
# Calling init of parent class
        
A.__init__(
self
, something)
        
print
(
""B init called""
)
        
self
.something 
=
something
obj 
=
B(
""Something""
)
# Python program to
# demonstrate init with
# inheritance
class
A(
object
):
    
def
__init__(
self
, something):
        
print
(
""A init called""
)
        
self
.something 
=
something
class
B(A):
    
def
__init__(
self
, something):
        
print
(
""B init called""
)
        
self
.something 
=
something
        
# Calling init of parent class
        
A.__init__(
self
, something)
obj 
=
B(
""Something""
)
","['__init__', 'say_hi', 'Person', 'A', 'B']",[]
12,"How do you define and use a class in Python?
","class
class ClassName:
    # class definition 
ClassName
class Bike:
    name = """"
    gear = 0
Bike
name/gear
""""
Bike
bike1
bike2
objectName = ClassName()
# create class
class Bike:
    name = """"
    gear = 0

# create objects of class
bike1 = Bike()
bike1
.
# modify the name attribute
bike1.name = ""Mountain Bike""

# access the gear attribute
bike1.gear
bike1.name
bike1.gear
# define a class
class Bike:
    name = """"
    gear = 0

# create object of class
bike1 = Bike()

# access attributes and assign new values
bike1.gear = 11
bike1.name = ""Mountain Bike""

print(f""Name: {bike1.name}, Gears: {bike1.gear} "")
Bike
bike1
Bike
.
# define a class
class Employee:
    # define an attribute
    employee_id = 0

# create two objects of the Employee class
employee1 = Employee()
employee2 = Employee()

# access attributes using employee1
employee1.employeeID = 1001
print(f""Employee ID: {employee1.employeeID}"")

# access attributes using employee2
employee2.employeeID = 1002
print(f""Employee ID: {employee2.employeeID}"")
# create a class
class Room:
    length = 0.0
    breadth = 0.0
    
    # method to calculate area
    def calculate_area(self):
        print(""Area of Room ="", self.length * self.breadth)

# create object of Room class
study_room = Room()

# assign values to all the attributes 
study_room.length = 42.5
study_room.breadth = 30.8

# access method inside class
study_room.calculate_area()
calculate_area()
study_room
Room
study_room.calculate_area()
.
class Bike:
    name = """"
...
# create object
bike1 = Bike()
class Bike:

    # constructor function    
    def __init__(self, name = """"):
        self.name = name

bike1 = Bike()
__init__()
self.name
bike1
bike1 = Bike(""Mountain Bike"")
""Mountain Bike""
__init__()
","['ClassName', 'Bike', 'Employee', 'calculate_area', 'Room', '__init__']",[]
13," How do you use the input function in Python to get user input?
","input()
name = input(""Enter your name: "")
print(name)

# Output: 
# Enter your name: James
# James
input()
input()
input()
EOFError
# get input from user

inputString = input()

print('The inputted string is:', inputString)
# get input from user

inputString = input('Enter a string:')

print('The inputted string is:', inputString)
",['input'],[]
14,"How do you use the format method in Python to format a string?
","txt 
=
""I have {an:.2f} Rupees!""
print
(txt.
format
(an 
=
4
))
# using format option in a simple string
print
(
""{}, A computer science portal for geeks.""
      
.
format
(
""GeeksforGeeks""
))
# using format option for a
# value stored in a variable
str
=
""This article is written in {}""
print
(
str
.
format
(
""Python""
))
# formatting a string using a numeric constant
print
(
""Hello, I am {} years old !""
.
format
(
18
))
# Multiple placeholders in format() function
my_string 
=
""{}, is a {} science portal for {}""
print
(my_string.
format
(
""GeeksforGeeks""
, 
""computer""
, 
""geeks""
))
# different datatypes can be used in formatting
print
(
""Hi ! My name is {} and I am {} years old""
      
.
format
(
""User""
, 
19
))
# The values passed as parameters
# are replaced in order of their entry
print
(
""This is {} {} {} {}""
      
.
format
(
""one""
, 
""two""
, 
""three""
, 
""four""
))
# parameters in format function.
my_string 
=
""{}, is a {} {} science portal for {}""
print
(my_string.
format
(
""GeeksforGeeks""
, 
""computer""
, 
""geeks""
))
# Positional arguments
# are placed in order
print
(
""{0} love {1}!!""
.
format
(
""GeeksforGeeks""
,
                              
""Geeks""
))
# Reverse the index numbers with the
# parameters of the placeholders
print
(
""{1} love {0}!!""
.
format
(
""GeeksforGeeks""
,
                              
""Geeks""
))
print
(
""Every {} should know the use of {} {} programming and {}""
      
.
format
(
""programmer""
, 
""Open""
, 
""Source""
,
              
""Operating Systems""
))
# Use the index numbers of the
# values to change the order that
# they appear in the string
print
(
""Every {3} should know the use of {2} {1} programming and {0}""
      
.
format
(
""programmer""
, 
""Open""
, 
""Source""
, 
""Operating Systems""
))
# Keyword arguments are called
# by their keyword name
print
(
""{gfg} is a {0} science portal for {1}""
      
.
format
(
""computer""
, 
""geeks""
, gfg
=
""GeeksforGeeks""
))
print
(
""%20s""
%
(
'geeksforgeeks'
, ))
print
(
""%-20s""
%
(
'Interngeeks'
, ))
print
(
""%.5s""
%
(
'Interngeeks'
, ))
type
=
'bug'
result 
=
'troubling'
print
('I wondered why the program was 
%
s me. Then\
it dawned on me it was a 
%
s .' 
%
      
(result, 
type
))
match 
=
12000
site 
=
'amazon'
print
(""
%
s 
is
so useful. I tried to look\
up mobile 
and
they had a nice one that cost 
%
d rupees."" 
%
(site, match))
print
(
""This site is {0:f}% securely {1}!!""
.
      
format
(
100
, 
""encrypted""
))
# To limit the precision
print
(
""My average of this {0} was {1:.2f}%""
      
.
format
(
""semester""
, 
78.234876
))
# For no decimal places
print
(
""My average of this {0} was {1:.0f}%""
      
.
format
(
""semester""
, 
78.234876
))
# Convert an integer to its binary or
# with other different converted bases.
print
(
""The {0} of 100 is {1:b}""
      
.
format
(
""binary""
, 
100
))
print
(
""The {0} of 100 is {1:o}""
      
.
format
(
""octal""
, 
100
))
# When explicitly converted floating-point
# values to decimal with base-10 by 'd'
# type conversion we encounter Value-Error.
print
(
""The temperature today is {0:d} degrees outside !""
      
.
format
(
35.567
))
# Instead write this to avoid value-errors
''' print(""The temperature today is {0:.0f} degrees outside !""
                                            
.format(35.567))'''
# To demonstrate spacing when
# strings are passed as parameters
print
(
""{0:4}, is the computer science portal for {1:8}!""
      
.
format
(
""GeeksforGeeks""
, 
""geeks""
))
# To demonstrate spacing when numeric
# constants are passed as parameters.
print
(
""It is {0:5} degrees outside !""
      
.
format
(
40
))
# To demonstrate both string and numeric
# constants passed as parameters
print
(
""{0:4} was founded in {1:16}!""
      
.
format
(
""GeeksforGeeks""
, 
2009
))
# To demonstrate aligning of spaces
print
(
""{0:^16} was founded in {1:<4}!""
      
.
format
(
""GeeksforGeeks""
, 
2009
))
print
(
""{:*^20s}""
.
format
(
""Geeks""
))
# which prints out i, i ^ 2, i ^ 3,
#  i ^ 4 in the given range
# Function prints out values
# in an unorganized manner
def
unorganized(a, b):
    
for
i 
in
range
(a, b):
        
print
(i, i
*
*
2
, i
*
*
3
, i
*
*
4
)
# Function prints the organized set of values
def
organized(a, b):
    
for
i 
in
range
(a, b):
        
# Using formatters to give 6
        
# spaces to each set of values
        
print
(
""{:6d} {:6d} {:6d} {:6d}""
              
.
format
(i, i 
*
*
2
, i 
*
*
3
, i 
*
*
4
))
# Driver Code
n1 
=
int
(
input
(
""Enter lower range :-\n""
))
n2 
=
int
(
input
(
""Enter upper range :-\n""
))
print
(
""------Before Using Formatters-------""
)
# Calling function without formatters
unorganized(n1, n2)
print
()
print
(
""-------After Using Formatters---------""
)
print
()
# Calling function that contains
# formatters to organize the data
organized(n1, n2)
introduction 
=
'My name is {first_name} {middle_name} {last_name} AKA the {aka}.'
full_name 
=
{
    
'first_name'
: 
'Tony'
,
    
'middle_name'
: 
'Howard'
,
    
'last_name'
: 
'Stark'
,
    
'aka'
: 
'Iron Man'
,
}
# Notice the use of ""**"" operator to unpack the values.
print
(introduction.
format
(
*
*
full_name))
# Python code to truncate float
# values to 2 decimal digits.
  
# List initialization
Input
=
[
100.7689454
, 
17.232999
, 
60.98867
, 
300.83748789
]
  
# Using format
Output 
=
[
'{:.2f}'
.
format
(elem) 
for
elem 
in
Input
]
  
# Print output
print
(Output)
","['format', 'unorganized', 'organized']",[]
15,"What is the purpose of a lambda function in Python?
","lambda argument(s) : expression

lambda
argument(s)
expression
def f(x):
  return x * 2

f(3)
>> 6

lambda x: x * 3

(lambda x : x * 2)(3)

>> 6

filter()
map()
Filter()
filter(function, iterable)

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
filter()
lambda x: x % 2 == 0

list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
filter(lambda x: x % 2 == 0, list1)

>> <filter at 0x1e3f212ad60> # The result is always filter object so I will need to convert it to list using list()

list(filter(lambda x: x % 2 == 0, list1))
>> [2, 4, 6, 8, 10]


Map()
map()
map(function, iterable)

list1 = [2, 3, 4, 5]

list(map(lambda x: pow(x, 2), list1))
>> [4, 9, 16, 25]

import pandas as pd

df = pd.DataFrame(
    {""name"": [""IBRAHIM"", ""SEGUN"", ""YUSUF"", ""DARE"", ""BOLA"", ""SOKUNBI""],
     ""score"": [50, 32, 45, 45, 23, 45]
    }
)

df[""lower_name""] = df[""name""].apply(lambda x: x.lower())

","['argument', 'f', 'filter', 'map', 'Filter', 'list', 'Map', 'pow', 'DataFrame', 'apply', 'lower']",['pandas']
16,"How do you use the map function in Python to apply a function to each element of a list?
","map()
map()
map(function, iterable, [iterable1, iterable2, ...])
org_list = [1, 2, 3, 4, 5]
fin_list = []

for num in org_list:
    fin_list.append(num**3)

print(fin_list) # [1, 8, 27, 64, 125]
map()
org_list = [1, 2, 3, 4, 5]

# define a function that returns the cube of `num`
def cube(num):
    return num**3
   
fin_list = list(map(cube, org_list))
print(fin_list) # [1, 8, 27, 64, 125]
map()
org_list
fin_list
fin_list = list(map(lambda x:x**3, org_list))
print(fin_list) # [1, 8, 27, 64, 125]
org_list = [""Hello"", ""world"", ""freecodecamp""]
fin_list = list(map(len, org_list))
print(fin_list) # [5, 5, 12]
map()
cube(num)
pow(x, y)
base = [1, 2, 3, 4]
power = [1, 2, 3, 4]

result = list(map(pow, base, power))
print(result) # [1, 4, 27, 256]
map()
map()
","['map', 'append', 'cube', 'list', 'pow']",[]
17,"How do you use the filter function in Python to filter elements from a list?
","filter()
True
filter()

# returns True if the argument passed is even

def check_even(number):
    if number % 2 == 0:
          return True  

    return False


numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# if an element passed to check_even() returns True, select it
even_numbers_iterator = filter(check_even, numbers)

# converting to list
even_numbers = list(even_numbers_iterator)

print(even_numbers)

# Output: [2, 4, 6, 8, 10]
filter()
filter()
filter()
letters = ['a', 'b', 'd', 'e', 'i', 'j', 'o']

# a function that returns True if letter is vowel
def filter_vowels(letter):
    vowels = ['a', 'e', 'i', 'o', 'u']
    return True if letter in vowels else False

filtered_vowels = filter(filter_vowels, letters)

# converting to tuple
vowels = tuple(filtered_vowels)
print(vowels)
filter()
letters
letters
filter_vowels()
filter_vowels()
True
filter()
numbers = [1, 2, 3, 4, 5, 6, 7]

# the lambda function returns True for even numbers 
even_numbers_iterator = filter(lambda x: (x%2 == 0), numbers)

# converting to list
even_numbers = list(even_numbers_iterator)

print(even_numbers)

filter()
True
filter()
# random list
random_list = [1, 'a', 0, False, True, '0']

filtered_iterator = filter(None, random_list)

#converting to list
filtered_list = list(filtered_iterator)

print(filtered_list)

None
filter()
True
","['filter', 'check_even', 'list', 'filter_vowels', 'tuple']",[]
18,"What is the purpose of a set in Python and how does it differ from a list or tuple?
","# Python3 program to demonstrate 
# List 
  
# Creating a List
List
=
[]
print
(
""Blank List: ""
)
print
(
List
)
  
# Creating a List of numbers
List
=
[
10
, 
20
, 
14
]
print
(
""\nList of numbers: ""
)
print
(
List
)
  
# Creating a List of strings and accessing
# using index
List
=
[
""Geeks""
, 
""For""
, 
""Geeks""
]
print
(
""\nList Items: ""
)
print
(
List
[
0
]) 
print
(
List
[
2
])
# Creating an empty Tuple
Tuple1 
=
()
print
(
""Initial empty Tuple: ""
)
print
(Tuple1)
  
# Creating a Tuple with
# the use of list
list1 
=
[
1
, 
2
, 
4
, 
5
, 
6
]
print
(
""\nTuple using List: ""
)
print
(
tuple
(list1))
  
#Creating a Tuple 
#with the use of built-in function
Tuple1 
=
tuple
(
'Geeks'
)
print
(
""\nTuple with the use of function: ""
)
print
(Tuple1)
# Python3 program to demonstrate 
# Set in Python
  
# Creating a Set
set1 
=
set
()
print
(
""Initial blank Set: ""
)
print
(set1)
  
# Creating a Set with
# the use of Constructor
# (Using object to Store String)
String 
=
'GeeksForGeeks'
set1 
=
set
(String)
print
(
""\nSet with the use of an Object: ""
)
print
(set1)
  
# Creating a Set with
# the use of a List
set1 
=
set
([
""Geeks""
, 
""For""
, 
""Geeks""
])
print
(
""\nSet with the use of List: ""
)
print
(set1)
",[],[]
19,"How do you use regular expressions in Python to search for and manipulate text?
","^a...s$
^a...s$
abs
alias
abyss
Alias
An abacus
re
import re

pattern = '^a...s$'
test_string = 'abyss'
result = re.match(pattern, test_string)

if result:
  print(""Search successful."")
else:
  print(""Search unsuccessful."")	

re.match()
None
^
$
[]
[abc]
a
ac
Hey Jude
abc de ca
[abc]
a
b
c
-
[a-e]
[abcde]
[1-4]
[1234]
[0-39]
[01239]
^
[^abc]
[^0-9]
.
'\n'
..
a
ac
acd
acde
^
^
^a
a
abc
bac
^ab
abc
acb
a
b
$
$
a$
a
formula
cab
*
*
ma*n
mn
man
maaan
main
a
n
woman
+
+
ma+n
mn
a
man
maaan
main
woman
?
?
ma?n
mn
man
maaan
a
main
woman
{}
{n,m}
a{2,3}
abc dat
abc daat
daat
aabc daaat
aabc
daaat
aabc daaaat
aabc
daaaat
[0-9]{2, 4}
[0-9]{2,4}
ab123csde
ab123csde
12 and 345673
12
3456
73
1 and 2
|
|
or
a|b
cde
ade
ade
acdbea
acdbea
a|b
()
()
(a|b|c)xz
(a|b|c)xz
ab xz
abxz
abxz
axz cabxz
axzbc cabxz
\
\
\$a
$
a
$
\
\A
\Athe
the sun
In the sun
\b
\bfoo
football
a football
afootball
foo\b
the foo
the afoo test
the afootest
\B
\b
\Bfoo
football
a football
afootball
foo\B
the foo
the afoo test
the afootest
\d
[0-9]
\d
12abc3
12abc3
Python
\D
[^0-9]
\D
1ab34""50
1ab34""50
1345
\s
[ \t\n\r\f\v]
\s
Python RegEx
PythonRegEx
\S
[^ \t\n\r\f\v]
\S
a b
 a b
   
\w
[a-zA-Z0-9_]
_
\w
12&"": ;c 
12&"": ;c
%""> !
\W
[^a-zA-Z0-9_]
\W
1a2%c
1a2%c
Python
\Z
Python\Z
I like Python
I like Python Programming
Python is fun.
re
import re
re.findall()

# Program to extract numbers from a string

import re

string = 'hello 12 hi 89. Howdy 34'
pattern = '\d+'

result = re.findall(pattern, string) 
print(result)

# Output: ['12', '89', '34']

re.findall()
re.split

import re

string = 'Twelve:12 Eighty nine:89.'
pattern = '\d+'

result = re.split(pattern, string) 
print(result)

# Output: ['Twelve:', ' Eighty nine:', '.']

re.split()
maxsplit
re.split()

import re

string = 'Twelve:12 Eighty nine:89 Nine:9.'
pattern = '\d+'

# maxsplit = 1
# split only at the first occurrence
result = re.split(pattern, string, 1) 
print(result)

# Output: ['Twelve:', ' Eighty nine:89 Nine:9.']

maxsplit
re.sub()
re.sub(pattern, replace, string)

# Program to remove all whitespaces
import re

# multiline string
string = 'abc 12\
de 23 \n f45 6'

# matches all whitespace characters
pattern = '\s+'

# empty string
replace = ''

new_string = re.sub(pattern, replace, string) 
print(new_string)

# Output: abc12de23f456

re.sub()
re.sub()

import re

# multiline string
string = 'abc 12\
de 23 \n f45 6'

# matches all whitespace characters
pattern = '\s+'
replace = ''

new_string = re.sub(r'\s+', replace, string, 1) 
print(new_string)

# Output:
# abc12de 23
# f45 6

re.subn()
re.sub()

# Program to remove all whitespaces
import re

# multiline string
string = 'abc 12\
de 23 \n f45 6'

# matches all whitespace characters
pattern = '\s+'

# empty string
replace = ''

new_string = re.subn(pattern, replace, string) 
print(new_string)

# Output: ('abc12de23f456', 4)

re.search()
re.search()
None
match = re.search(pattern, str)

import re

string = ""Python is fun""

# check if 'Python' is at the beginning
match = re.search('\APython', string)

if match:
  print(""pattern found inside the string"")
else:
  print(""pattern not found"")  

# Output: pattern found inside the string

group()

import re

string = '39801 356, 2102 1111'

# Three digit number followed by space followed by two digit number
pattern = '(\d{3}) (\d{2})'

# match variable contains a Match object.
match = re.search(pattern, string) 

if match:
  print(match.group())
else:
  print(""pattern not found"")

# Output: 801 35

(\d{3}) (\d{2})
(\d{3})
(\d{2})
>>> match.group(1)
'801'

>>> match.group(2)
'35'
>>> match.group(1, 2)
('801', '35')

>>> match.groups()
('801', '35')

start()
end()
>>> match.start()
2
>>> match.end()
8
span()
>>> match.span()
(2, 8)
re
string
>>> match.re
re.compile('(\\d{3}) (\\d{2})')

>>> match.string
'39801 356, 2102 1111'

re
'\n'
r'\n'
\
n
\
\

import re

string = '\n and \r are escape sequences.'

result = re.findall(r'[\n\r]', string) 
print(result)

# Output: ['\n', '\r']

","['match', 'findall', 'split', 'sub', 'subn', 'search', 'group', 'groups', 'start', 'end', 'span', 'compile']",['re']
20,"How do you use the datetime module in Python to work with dates and times?
","import datetime

# get the current date and time
now = datetime.datetime.now()

print(now)
datetime
import datetime
datetime
datetime
now()
datetime
import datetime

# get current date
current_date = datetime.date.today()

print(current_date)
today()
date
date
import datetime

print(dir(datetime))
datetime.datetime
datetime.date
datetime.time
datetime.timedelta
date
date
import datetime

d = datetime.date(2022, 12, 25)
print(d)
date()
date
year
month
day
date
datetime
from datetime import date

d = date(2022, 12, 25)
print(d)
from datetime import date
date
datetime
date
today()
from datetime import date

# today() to get current date
todays_date = date.today()

print(""Today's date ="", todays_date)
date
fromtimestamp()
from datetime import date

timestamp = date.fromtimestamp(1326244364)
print(""Date ="", timestamp)
date
from datetime import date

# date object of today's date
today = date.today() 

print(""Current year:"", today.year)
print(""Current month:"", today.month)
print(""Current day:"", today.day)
time
from datetime import time

# time(hour = 0, minute = 0, second = 0)
a = time()
print(a)

# time(hour, minute and second)
b = time(11, 34, 56)
print(b)

# time(hour, minute and second)
c = time(hour = 11, minute = 34, second = 56)
print(c)

# time(hour, minute, second, microsecond)
d = time(11, 34, 56, 234566)
print(d)
time
hour
minute
from datetime import time

a = time(11, 34, 56)

print(""Hour ="", a.hour)
print(""Minute ="", a.minute)
print(""Second ="", a.second)
print(""Microsecond ="", a.microsecond)
0
datetime
datetime
from datetime import datetime

# datetime(year, month, day)
a = datetime(2022, 12, 28)
print(a)

# datetime(year, month, day, hour, minute, second, microsecond)
b = datetime(2022, 12, 28, 23, 55, 59, 342380)
print(b)
datetime()
from datetime import datetime

a = datetime(2022, 12, 28, 23, 55, 59, 342380)

print(""Year ="", a.year)
print(""Month ="", a.month)
print(""Hour ="", a.hour)
print(""Minute ="", a.minute)
print(""Timestamp ="", a.timestamp())
timedelta
from datetime import datetime, date

# using date()
t1 = date(year = 2018, month = 7, day = 12)
t2 = date(year = 2017, month = 12, day = 23)

t3 = t1 - t2

print(""t3 ="", t3)

# using datetime()
t4 = datetime(year = 2018, month = 7, day = 12, hour = 7, minute = 9, second = 33)
t5 = datetime(year = 2019, month = 6, day = 10, hour = 5, minute = 55, second = 13)
t6 = t4 - t5
print(""t6 ="", t6)

print(""Type of t3 ="", type(t3)) 
print(""Type of t6 ="", type(t6))  
<class 'datetime.timedelta'>
from datetime import timedelta

t1 = timedelta(weeks = 2, days = 5, hours = 1, seconds = 33)
t2 = timedelta(days = 4, hours = 11, minutes = 4, seconds = 54)

t3 = t1 - t2

print(""t3 ="", t3)
timedelta
total_seconds()
from datetime import timedelta

t = timedelta(days = 5, hours = 1, seconds = 33, microseconds = 233423)
print(""Total seconds ="", t.total_seconds())
mm/dd/yyyy
dd/mm/yyyy
strftime()
strptime()
strftime()
date
datetime
time
date
datetime
time
from datetime import datetime

# current date and time
now = datetime.now()

t = now.strftime(""%H:%M:%S"")
print(""Time:"", t)

s1 = now.strftime(""%m/%d/%Y, %H:%M:%S"")
# mm/dd/YY H:M:S format
print(""s1:"", s1)

s2 = now.strftime(""%d/%m/%Y, %H:%M:%S"")
# dd/mm/YY H:M:S format
print(""s2:"", s2)
%Y
%m
%d
%H
strftime()
%Y
%m
%d
%H
%M
%S
strftime()
strptime()
datetime
from datetime import datetime

date_string = ""25 December, 2022""
print(""date_string ="", date_string)

# use strptime() to create date object
date_object = datetime.strptime(date_string, ""%d %B, %Y"")

print(""date_object ="", date_object)
strptime()
%d
%B
%Y
from datetime import datetime
import pytz

local = datetime.now()
print(""Local:"", local.strftime(""%m/%d/%Y, %H:%M:%S""))


tz_NY = pytz.timezone('America/New_York') 
datetime_NY = datetime.now(tz_NY)
print(""NY:"", datetime_NY.strftime(""%m/%d/%Y, %H:%M:%S""))

tz_London = pytz.timezone('Europe/London')
datetime_London = datetime.now(tz_London)
print(""London:"", datetime_London.strftime(""%m/%d/%Y, %H:%M:%S""))
","['now', 'today', 'dir', 'date', 'fromtimestamp', 'time', 'datetime', 'timestamp', 'type', 'timedelta', 'total_seconds', 'strftime', 'strptime', 'timezone']","['datetime', 'date', 'time', 'timedelta', 'pytz']"
21,"How do you use the argparse module in Python to parse command-line arguments?
","argparse
argparse
argparse
argparse
sample
$ ls sample/
hello.txt     lorem.md      realpython.md

ls
sample
ls
ls
PS> ls .\sample\

    Directory: C:\sample

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---          11/10/2022 10:06 AM             88 hello.txt
-a---          11/10/2022 10:06 AM           2629 lorem.md
-a---          11/10/2022 10:06 AM            429 realpython.md

ls
ls
ls
-l
$ ls -l sample/
total 24
-rw-r--r--@ 1 user  staff    83 Aug 17 22:15 hello.txt
-rw-r--r--@ 1 user  staff  2609 Aug 17 22:15 lorem.md
-rw-r--r--@ 1 user  staff   428 Aug 17 22:15 realpython.md

ls
sample
ls
man ls
-l
ls
-l
$ ls -l sample/

ls
-l
sample
pip
$ pip install -r requirements.txt

pip
requirements.txt
pip
install
pip
-r
install
requirements.txt
-r
sys.argv
argparse
argv
sys
sys.argv
argv
ls
# ls_argv.py

import sys
from pathlib import Path

if (args_count := len(sys.argv)) > 2:
    print(f""One argument expected, got {args_count - 1}"")
    raise SystemExit(2)
elif args_count < 2:
    print(""You must specify the target directory"")
    raise SystemExit(2)

target_dir = Path(sys.argv[1])

if not target_dir.is_dir():
    print(""The target directory doesn't exist"")
    raise SystemExit(1)

for entry in target_dir.iterdir():
    print(entry.name)

sys.argv
sys.argv
args_count
2
sys.argv
pathlib.Path
for
$ python ls_argv.py sample/
hello.txt
lorem.md
realpython.md

$ python ls_argv.py
You must specify the target directory

$ python ls_argv.py sample/ other_dir/
One argument expected, got 2

$ python ls_argv.py non_existing/
The target directory doesn't exist

sys.argv
sys.argv
argparse
argparse
argparse
getopt
optparse
argparse
argparse
argparse
argparse
ArgumentParser
.add_argument()
.parse_args()
Namespace
argparse
ls_argv.py
ls.py
# ls.py v1

import argparse
from pathlib import Path

parser = argparse.ArgumentParser()

parser.add_argument(""path"")

args = parser.parse_args()

target_dir = Path(args.path)

if not target_dir.exists():
    print(""The target directory doesn't exist"")
    raise SystemExit(1)

for entry in target_dir.iterdir():
    print(entry.name)

argparse
argparse
argparse
ArgumentParser
path
.parse_args()
Namespace
args
Namespace
path
Namespace
path
args
$ python ls.py sample/
lorem.md
realpython.md
hello.txt

$ python ls.py
usage: ls.py [-h] path
ls.py: error: the following arguments are required: path

$ python ls.py sample/ other_dir/
usage: ls.py [-h] path
ls.py: error: unrecognized arguments: other_dir/

$ python ls.py non_existing/
The target directory doesn't exist

ls_argv.py
ls_argv.py
path
-h
$ python ls.py -h
usage: ls.py [-h] path

positional arguments:
  path

options:
  -h, --help  show this help message and exit

-h
--help
argparse
argparse
argparse
argparse
argparse
sys.argv
argparse
argparse
ls.py
path
ls
-l
argparse
argparse
argparse
ArgumentParser
>>> from argparse import ArgumentParser

>>> parser = ArgumentParser()
>>> parser
ArgumentParser(
    prog='',
    usage=None,
    description=None,
    formatter_class=<class 'argparse.HelpFormatter'>,
    conflict_handler='error',
    add_help=True
)

ArgumentParser
ArgumentParser
ArgumentParser
argparse
argparse
.add_argument()
ArgumentParser
argparse
.add_argument()
name
flag
name
flag
argparse
ls
-l
 1# ls.py v2
 2
 3import argparse
 4import datetime
 5from pathlib import Path
 6
 7parser = argparse.ArgumentParser()
 8
 9parser.add_argument(""path"")
10
11parser.add_argument(""-l"", ""--long"", action=""store_true"")
12
13args = parser.parse_args()
14
15target_dir = Path(args.path)
16
17if not target_dir.exists():
18    print(""The target directory doesn't exist"")
19    raise SystemExit(1)
20
21def build_output(entry, long=False):
22    if long:
23        size = entry.stat().st_size
24        date = datetime.datetime.fromtimestamp(
25            entry.stat().st_mtime).strftime(
26            ""%b %d %H:%M:%S""
27        )
28        return f""{size:>6d} {date} {entry.name}""
29    return entry.name
30
31for entry in target_dir.iterdir():
32    print(build_output(entry, long=args.long))

-l
--long
-
--
action
""store_true""
-l
--long
True
False
action
.add_argument()
build_output()
long
True
Path.stat()
datetime.datetime
sample
-l
$ python ls.py -l sample/
  2609 Oct 28 14:07:04 lorem.md
   428 Oct 28 14:07:04 realpython.md
    83 Oct 28 14:07:04 hello.txt

-l
argparse
ls
args = parser.parse_args()
.parse_args()
args
.parse_args()
Namespace
>>> from argparse import ArgumentParser

>>> parser = ArgumentParser()

>>> parser.add_argument(""site"")
_StoreAction(...)

>>> parser.add_argument(""-c"", ""--connect"", action=""store_true"")
_StoreTrueAction(...)

>>> args = parser.parse_args([""Real Python"", ""-c""])
>>> args
Namespace(site='Real Python', connect=True)

>>> args.site
'Real Python'
>>> args.connect
True

Namespace
.parse_args()
Namespace
for
ls
argparse
argparse
__main__.py
hello_cli/
│
├── hello_cli/
│   ├── __init__.py
│   ├── __main__.py
│   ├── cli.py
│   └── model.py
│
├── tests/
│   ├── __init__.py
│   ├── test_cli.py
│   └── test_model.py
│
├── pyproject.toml
├── README.md
└── requirements.txt

hello_cli/
pyproject.toml
README.md
README.md
requirements.txt
pip
-r
hello_cli/
__init__.py
hello_cli/
__main__.py
cli.py
model.py
tests/
test_cli.py
test_model.py
pyproject.toml
hello_cli
# pyproject.toml

[build-system]
requires = [""setuptools>=64.0.0"", ""wheel""]
build-backend = ""setuptools.build_meta""

[project]
name = ""hello_cli""
version = ""0.0.1""
description = ""My awesome Hello CLI application""
readme = ""README.md""
authors = [{ name = ""Real Python"", email = ""info@realpython.com"" }]

[project.scripts]
hello_cli = ""hello_cli.__main__:main""

[build-system]
setuptools
[project]
[project.scripts]
argparse
argparse
argparse
ArgumentParser
ArgumentParser
argparse
sys.argv
ls
-h
$ python ls.py -h
usage: ls.py [-h] [-l] path

positional arguments:
  path

options:
  -h, --help  show this help message and exit
  -l, --long

argparse
ls.py
prog
# ls.py v3

import argparse
import datetime
from pathlib import Path

parser = argparse.ArgumentParser(prog=""ls"")

# ...

for entry in target_dir.iterdir():
    print(build_output(entry, long=args.long))

prog
""ls""
$ python ls.py -h
usage: ls [-h] [-l] path

positional arguments:
  path

options:
  -h, --help  show this help message and exit
  -l, --long

ls
ls.py
argparse
description
epilog
ls.py
ArgumentParser
# ls.py v4

import argparse
import datetime
from pathlib import Path

parser = argparse.ArgumentParser(
    prog=""ls"",
    description=""List the content of a directory"",
    epilog=""Thanks for using %(prog)s! :)"",
)

# ...

for entry in target_dir.iterdir():
    print(build_output(entry, long=args.long))

description
epilog
prog
%
%(specifier)s
%
prog
epilog
ArgumentParser
NameError
$ python ls.py -h
usage: ls [-h] [-l] path

List the content of a directory

positional arguments:
  path

options:
  -h, --help  show this help message and exit
  -l, --long

Thanks for using ls! :)

argparse
.add_argument_group()
ArgumentParser
ls
# ls.py v5
# ...

parser = argparse.ArgumentParser(
    prog=""ls"",
    description=""List the content of a directory"",
    epilog=""Thanks for using %(prog)s! :)"",
)

general = parser.add_argument_group(""general output"")
general.add_argument(""path"")

detailed = parser.add_argument_group(""detailed output"")
detailed.add_argument(""-l"", ""--long"", action=""store_true"")

args = parser.parse_args()

# ...

for entry in target_dir.iterdir():
    print(build_output(entry, long=args.long))

-h
python ls.py -h
usage: ls [-h] [-l] path

List the content of a directory

options:
  -h, --help  show this help message and exit

general output:
  path

detailed output:
  -l, --long

Thanks for using ls! :)

ArgumentParser
argument_default
ArgumentParser
argument_default
Namespace
SUPPRESS
Namespace
ls
# ls.py v6

import argparse
import datetime
from pathlib import Path

parser = argparse.ArgumentParser(
    prog=""ls"",
    description=""List the content of a directory"",
    epilog=""Thanks for using %(prog)s! :)"",
    argument_default=argparse.SUPPRESS,
)

# ...

for entry in target_dir.iterdir():
    try:
        long = args.long
    except AttributeError:
        long = False
    print(build_output(entry, long=long))

SUPPRESS
ArgumentParser
Namespace
-l
--long
build_output()
AttributeError
long
args
ArgumentParser
# fromfile.py

import argparse

parser = argparse.ArgumentParser(fromfile_prefix_chars=""@"")

parser.add_argument(""one"")
parser.add_argument(""two"")
parser.add_argument(""three"")

args = parser.parse_args()

print(args)

@
fromfile_prefix_chars
ArgumentParser
args.txt
first
second
third

args.txt
$ python fromfile.py @args.txt
Namespace(one='first', two='second', three='third')

argparse
args.txt
fromfile.py
Namespace
argparse
--argument-with-a-long-name
# abbreviate.py

import argparse

parser = argparse.ArgumentParser()

parser.add_argument(""--argument-with-a-long-name"")

args = parser.parse_args()

print(args.argument_with_a_long_name)

--argument-with-a-long-name
argparse
$ python abbreviate.py --argument-with-a-long-name 42
42

$ python abbreviate.py --argument 42
42

$ python abbreviate.py --a 42
42

--argument-with-a-long-name
allow_abbrev
ArgumentParser
# abbreviate.py

import argparse

parser = argparse.ArgumentParser(allow_abbrev=False)

parser.add_argument(""--argument-with-a-long-name"")

args = parser.parse_args()

print(args.argument_with_a_long_name)

allow_abbrev
False
$ python abbreviate.py --argument-with-a-long-name 42
42

$ python abbreviate.py --argument 42
usage: abbreviate.py [-h] [--argument-with-a-long-name ...]
abbreviate.py: error: unrecognized arguments: --argument 42

--argument
ArgumentParser
.add_argument()
action
type
nargs
default
help
Namespace
.parse_args()
action
.add_argument()
action
""store""
Namespace
action
store
Namespace
store_const
store_true
True
False
store_false
False
True
append
append_const
count
version
_const
const
.add_argument()
version
version
.add_argument()
store
append
# actions.py

import argparse

parser = argparse.ArgumentParser()

parser.add_argument(
    ""--name"", action=""store""
)  # Equivalent to parser.add_argument(""--name"")
parser.add_argument(""--pi"", action=""store_const"", const=3.14)
parser.add_argument(""--is-valid"", action=""store_true"")
parser.add_argument(""--is-invalid"", action=""store_false"")
parser.add_argument(""--item"", action=""append"")
parser.add_argument(""--repeated"", action=""append_const"", const=42)
parser.add_argument(""--add-one"", action=""count"")
parser.add_argument(
    ""--version"", action=""version"", version=""%(prog)s 0.1.0""
)

args = parser.parse_args()

print(args)

action
Namespace
--name
--pi
--is-valid
True
False
store_false
--is-invalid
--item
argparse
--repeated
--item
const
--add-one
-v
-vv
--version
version
.add_argument()
PS> python actions.py `
>   --name Python `
>   --pi `
>   --is-valid `
>   --is-invalid `
>   --item 1 --item 2 --item 3 `
>   --repeat --repeat --repeat `
>   --add-one --add-one --add-one
Namespace(
    name='Python',
    pi=3.14,
    is_valid=True,
    is_invalid=False,
    item=['1', '2', '3'],
    repeated=[42, 42, 42],
    add_one=3
)

PS> python actions.py --version
actions.py 0.1.0

$ python actions.py \
    --name Python \
    --pi \
    --is-valid \
    --is-invalid \
    --item 1 --item 2 --item 3 \
    --repeat --repeat --repeat \
    --add-one --add-one --add-one
Namespace(
    name='Python',
    pi=3.14,
    is_valid=True,
    is_invalid=False,
    item=['1', '2', '3'],
    repeated=[42, 42, 42],
    add_one=3
)

$ python actions.py --version
actions.py 0.1.0

Namespace
version
Namespace
argparse.Action
.__call__()
.__init__()
.format_usage()
.__call__()
parser
namespace
values
option_string
store
# custom_action.py

import argparse

class VerboseStore(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        print(f""Storing {values} in the {option_string} option..."")
        setattr(namespace, self.dest, values)

parser = argparse.ArgumentParser()

parser.add_argument(""-n"", ""--name"", action=VerboseStore)

args = parser.parse_args()

print(args)

VerboseStore
argparse.Action
.__call__()
$ python custom_action.py --name Python
Storing Python in the --name option...
Namespace(name='Python')

--name
argparse
argparse
argparse
argparse
Namespace
type
.add_argument()
--dividend
--divisor
# divide.py

import argparse

parser = argparse.ArgumentParser()

parser.add_argument(""--dividend"", type=int)
parser.add_argument(""--divisor"", type=int)

args = parser.parse_args()

print(args.dividend / args.divisor)

--dividend
--divisor
int
int
$ python divide.py --dividend 42 --divisor 2
21.0

$ python divide.py --dividend ""42"" --divisor ""2""
21.0

$ python divide.py --dividend 42 --divisor 2.0
usage: divide.py [-h] [--dividend DIVIDEND] [--divisor DIVISOR]
divide.py: error: argument --divisor: invalid int value: '2.0'

$ python divide.py --dividend 42 --divisor two
usage: divide.py [-h] [--dividend DIVIDEND] [--divisor DIVISOR]
divide.py: error: argument --divisor: invalid int value: 'two'

two
argparse
nargs
.add_argument()
nargs
argparse
nargs
nargs
nargs
?
*
+
argparse.REMAINDER
nargs
nargs
point.py
# point.py

import argparse

parser = argparse.ArgumentParser()

parser.add_argument(""--coordinates"", nargs=2)

args = parser.parse_args()

print(args)

--coordinates
x
y
$ python point.py --coordinates 2 3
Namespace(coordinates=['2', '3'])

$ python point.py --coordinates 2
usage: point.py [-h] [--coordinates COORDINATES COORDINATES]
point.py: error: argument --coordinates: expected 2 arguments

$ python point.py --coordinates 2 3 4
usage: point.py [-h] [--coordinates COORDINATES COORDINATES]
point.py: error: unrecognized arguments: 4

$ python point.py --coordinates
usage: point.py [-h] [--coordinates COORDINATES COORDINATES]
point.py: error: argument --coordinates: expected 2 arguments

--coordinates
coordinates
Namespace
--coordinates
*
nargs
# sum.py

import argparse

parser = argparse.ArgumentParser()

parser.add_argument(""numbers"", nargs=""*"", type=float)

args = parser.parse_args()

print(sum(args.numbers))

numbers
nargs
*
$ python sum.py 1 2 3
6.0

$ python sum.py 1 2 3 4 5 6
21.0

$ python sum.py
0

numbers
Namespace
sum.py
0
+
nargs
# files.py

import argparse

parser = argparse.ArgumentParser()

parser.add_argument(""files"", nargs=""+"")

args = parser.parse_args()

print(args)

files
$ python files.py hello.txt
Namespace(files=['hello.txt'])

$ python files.py hello.txt realpython.md README.md
Namespace(files=['hello.txt', 'realpython.md', 'README.md'])

$ python files.py
usage: files.py [-h] files [files ...]
files.py: error: the following arguments are required: files

files
files
files
nargs
REMAINDER
nargs
REMAINDER
nargs
nargs
*
+
REMAINDER
# cooking.py

import argparse

parser = argparse.ArgumentParser()

parser.add_argument(""veggies"", nargs=""+"")
parser.add_argument(""fruits"", nargs=""*"")

args = parser.parse_args()

print(args)

veggies
fruits
$ python cooking.py pepper tomato apple banana
Namespace(veggies=['pepper', 'tomato', 'apple', 'banana'], fruits=[])

veggies
fruits
argparse
# cooking.py

import argparse

parser = argparse.ArgumentParser()

parser.add_argument(""--veggies"", nargs=""+"")
parser.add_argument(""--fruits"", nargs=""*"")

args = parser.parse_args()

print(args)

$ python cooking.py --veggies pepper tomato --fruits apple banana
Namespace(veggies=['pepper', 'tomato'], fruits=['apple', 'banana'])

Namespace
argparse
nargs
*
+
REMAINDER
.add_argument()
default
ls
default
"".""
# ls.py v7

import argparse
import datetime
from pathlib import Path

# ...

general = parser.add_argument_group(""general output"")
general.add_argument(""path"", nargs=""?"", default=""."")

# ...

.add_argument()
nargs
?
argparse
nargs
?
*
+
?
default
"".""
ls.py
$ cd sample/

$ python ../ls.py
lorem.md
realpython.md
hello.txt

ls
argparse
choices
.add_argument()
--size
# size.py

import argparse

parser = argparse.ArgumentParser()

parser.add_argument(""--size"", choices=[""S"", ""M"", ""L"", ""XL""], default=""M"")

args = parser.parse_args()

print(args)

choices
--size
$ python size.py --size S
Namespace(size='S')

$ python choices.py --size A
usage: choices.py [-h] [--size {S,M,L,XL}]
choices.py: error: argument --size: invalid choice: 'A'
    (choose from 'S', 'M', 'L', 'XL')

choices
range()
# weekdays.py

import argparse

my_parser = argparse.ArgumentParser()

my_parser.add_argument(""--weekday"", type=int, choices=range(1, 8))

args = my_parser.parse_args()

print(args)

range
choices
$ python days.py --weekday 2
Namespace(weekday=2)

$ python days.py --weekday 6
Namespace(weekday=6)

$ python days.py --weekday 9
usage: days.py [-h] [--weekday {1,2,3,4,5,6,7}]
days.py: error: argument --weekday: invalid choice: 9
    (choose from 1, 2, 3, 4, 5, 6, 7)

argparse
-h
--help
argparse
help
metavar
.add_argument()
ls
-h
$ python ls.py -h
usage: ls [-h] [-l] [path]

List the content of a directory

options:
  -h, --help  show this help message and exit

general output:
  path

detailed output:
  -l, --long

Thanks for using ls! :)

argparse
-h
--help
path
-l
--long
help
ls.py
# ls.py v8

import argparse
import datetime
from pathlib import Path

# ...

general = parser.add_argument_group(""general output"")
general.add_argument(
    ""path"",
    nargs=""?"",
    default=""."",
    help=""take the path to the target directory (default: %(default)s)"",
)

detailed = parser.add_argument_group(""detailed output"")
detailed.add_argument(
    ""-l"",
    ""--long"",
    action=""store_true"",
    help=""display detailed directory content"",
)

# ...

ls.py
help
.add_argument()
%(prog)s
add_argument()
%(default)s
%(type)s
-h
$ python ls.py -h
usage: ls [-h] [-l] [path]

List the content of a directory

options:
  -h, --help  show this help message and exit

general output:
  path        take the path to the target directory (default: .)

detailed output:
  -l, --long  display detailed directory content

Thanks for using ls! :)

path
-l
-h
path
argparse
metavar
.add_argument()
metavar
metavar
point.py
# point.py

import argparse

parser = argparse.ArgumentParser()

parser.add_argument(""--coordinates"", nargs=2)

args = parser.parse_args()

print(args)

-h
$ python point.py -h
usage: point.py [-h] [--coordinates COORDINATES COORDINATES]

options:
  -h, --help            show this help message and exit
  --coordinates COORDINATES COORDINATES

argparse
COORDINATES
metavar
# point.py

import argparse

parser = argparse.ArgumentParser()

parser.add_argument(
    ""--coordinates"",
    nargs=2,
    metavar=(""X"", ""Y""),
    help=""take the Cartesian coordinates %(metavar)s"",
)

args = parser.parse_args()

print(args)

metavar
--coordinates,
metavar
-h
$ python coordinates.py -h
usage: coordinates.py [-h] [--coordinates X Y]

options:
  -h, --help         show this help message and exit
  --coordinates X Y  take the Cartesian coordinates ('X', 'Y')

X
Y
--coordinates
argparse
--verbose
--silent
# groups.py

import argparse

parser = argparse.ArgumentParser()
group = parser.add_mutually_exclusive_group(required=True)

group.add_argument(""-v"", ""--verbose"", action=""store_true"")
group.add_argument(""-s"", ""--silent"", action=""store_true"")

args = parser.parse_args()

print(args)

--verbose
--silent
$ python groups.py -v -s
usage: groups.py [-h] (-v | -s)
groups.py: error: argument -s/--silent: not allowed with argument -v/--verbose

-v
-s
-v
-s
|
-v
-s
pip
git
pip
--help
$ pip --help

Usage:
  pip <command> [options]

Commands:
  install                     Install packages.
  download                    Download packages.
  uninstall                   Uninstall packages.
  ...

$ pip list
Package    Version
---------- -------
pip        x.y.z
setuptools x.y.z
   ...

argparse
.add_subparsers()
ArgumentParser
.add_subparsers()
 1# calc.py
 2
 3import argparse
 4
 5def add(a, b):
 6    return a + b
 7
 8def sub(a, b):
 9    return a - b
10
11def mul(a, b):
12    return a * b
13
14def div(a, b):
15    return a / b
16
17global_parser = argparse.ArgumentParser(prog=""calc"")
18subparsers = global_parser.add_subparsers(
19    title=""subcommands"", help=""arithmetic operations""
20)
21
22arg_template = {
23    ""dest"": ""operands"",
24    ""type"": float,
25    ""nargs"": 2,
26    ""metavar"": ""OPERAND"",
27    ""help"": ""a numeric value"",
28}
29
30add_parser = subparsers.add_parser(""add"", help=""add two numbers a and b"")
31add_parser.add_argument(**arg_template)
32add_parser.set_defaults(func=add)
33
34sub_parser = subparsers.add_parser(""sub"", help=""subtract two numbers a and b"")
35sub_parser.add_argument(**arg_template)
36sub_parser.set_defaults(func=sub)
37
38mul_parser = subparsers.add_parser(""mul"", help=""multiply two numbers a and b"")
39mul_parser.add_argument(**arg_template)
40mul_parser.set_defaults(func=mul)
41
42div_parser = subparsers.add_parser(""div"", help=""divide two numbers a and b"")
43div_parser.add_argument(**arg_template)
44div_parser.set_defaults(func=div)
45
46args = global_parser.parse_args()
47
48print(args.func(*args.operands))

.add_subparsers()
.add_argument()
operands
add
help
operands
add
.add_argument()
**
arg_template
.set_defaults()
add()
add
sub
mul
div
func
args
$ python calc.py add 3 8
11.0

$ python calc.py sub 15 5
10.0

$ python calc.py mul 21 2
42.0

$ python calc.py div 12 2
6.0

$ python calc.py -h
usage: calc [-h] {add,sub,mul,div} ...

options:
  -h, --help         show this help message and exit

subcommands:
  {add,sub,mul,div}  arithmetic operations
    add              add two numbers a and b
    sub              subtract two numbers a and b
    mul              multiply two numbers a and b
    div              divide two numbers a and b

$ python calc.py div -h
usage: calc div [-h] OPERAND OPERAND

positional arguments:
  OPERAND     a numeric value

options:
  -h, --help  show this help message and exit

2
1
None
0
127
argparse
argparse
argparse
ArgumentParser
.exit(status=0, message=None)
status
message
.error(message)
message
2
.exit()
.error()
argparse
ls
# ls.py v9

import argparse
import datetime
from pathlib import Path

# ...

target_dir = Path(args.path)

if not target_dir.exists():
    parser.exit(1, message=""The target directory doesn't exist"")

# ...

raise SystemExit(1)
ArgumentParser.exit()
argparse
PS> python ls.py .\non_existing\
The target directory doesn't exist

PS> echo $LASTEXITCODE
1

$ python ls.py non_existing/
The target directory doesn't exist

$ echo $?
1

$?
1
$LASTEXITCODE
argparse
argparse
argparse
argparse
","['len', 'SystemExit', 'Path', 'is_dir', 'iterdir', 'add_argument', 'parse_args', 'ArgumentParser', 'exists', 'build_output', 'stat', 'fromtimestamp', 'strftime', '_StoreAction', '_StoreTrueAction', 'Namespace', 'add_argument_group', '__call__', '__init__', 'format_usage', 'VerboseStore', 'setattr', 'sum', 'range', 'add_mutually_exclusive_group', 'add_subparsers', 'add', 'sub', 'mul', 'div', 'add_parser', 'set_defaults', '48print', 'func', 'exit', 'error']","['sys', 'Path', 'argparse', 'ArgumentParser', 'datetime']"
22,"What is a decorator in Python and how do you use it?
","def outer(x):
    def inner(y):
        return x + y
    return inner

add_five = outer(5)
result = add_five(6)
print(result)  # prints 11

# Output: 11
inner()
outer()
def add(x, y):
    return x + y

def calculate(func, x, y):
    return func(x, y)

result = calculate(add, 4, 6)
print(result)  # prints 10
calculate()
calculate()
add()
calculate()
func
x
y
add
4
6
func(x, y)
add(4, 6)
def greeting(name):
    def hello():
        return ""Hello, "" + name + ""!""
    return hello

greet = greeting(""Atlantis"")
print(greet())  # prints ""Hello, Atlantis!""

# Output: Hello, Atlantis!
return hello
hello()
greet()
__call__()
def make_pretty(func):
    def inner():
        print(""I got decorated"")
        func()
    return inner


def ordinary():
    print(""I am ordinary"")

# Output: I am ordinary
ordinary()
""I am ordinary""
make_pretty()
inner()
ordinary()
""I am ordinary""
def make_pretty(func):
    # define the inner function 
    def inner():
        # add some additional behavior to decorated function
        print(""I got decorated"")

        # call original function
        func()
    # return the inner function
    return inner

# define ordinary function
def ordinary():
    print(""I am ordinary"")
    
# decorate the ordinary function
decorated_func = make_pretty(ordinary)

# call the decorated function
decorated_func()
make_pretty()
decorated_func = make_pretty(ordinary)
ordinary()
make_pretty()
make_pretty()
decorated_func()
inner()
@
def make_pretty(func):

    def inner():
        print(""I got decorated"")
        func()
    return inner

@make_pretty
def ordinary():
    print(""I am ordinary"")

ordinary()  
ordinary()
make_pretty()
@make_pretty
ordinary = make_pretty(ordinary)
def divide(a, b):
    return a/b
a
b
def smart_divide(func):
    def inner(a, b):
        print(""I am going to divide"", a, ""and"", b)
        if b == 0:
            print(""Whoops! cannot divide"")
            return

        return func(a, b)
    return inner

@smart_divide
def divide(a, b):
    print(a/b)

divide(2,5)

divide(2,0)
divide()
inner()
smart_divide()
inner()
divide()
divide()
inner()
b
None
def star(func):
    def inner(*args, **kwargs):
        print(""*"" * 15)
        func(*args, **kwargs)
        print(""*"" * 15)
    return inner


def percent(func):
    def inner(*args, **kwargs):
        print(""%"" * 15)
        func(*args, **kwargs)
        print(""%"" * 15)
    return inner


@star
@percent
def printer(msg):
    print(msg)

printer(""Hello"")
@star
@percent
def printer(msg):
    print(msg)
def printer(msg):
    print(msg)
printer = star(percent(printer))
@percent
@star
def printer(msg):
    print(msg)
","['outer', 'inner', 'add_five', 'add', 'calculate', 'func', 'greeting', 'hello', 'greet', '__call__', 'make_pretty', 'ordinary', 'decorated_func', 'divide', 'smart_divide', 'star', 'percent', 'printer']",[]
23,"How do you write unit tests for a Python function using the unittest module?
","unittest
is_prime()
import math

def is_prime(num):
    '''Check if num is prime or not.'''
    for i in range(2,int(math.sqrt(num))+1):
        if num%i==0:
            return False
    return True

is_prime()
>>> from prime_number import is_prime
>>> is_prime(3)
True
>>> is_prime(5)
True
>>> is_prime(12)
False
>>> is_prime(8)
False
>>> assert is_prime(7) == True
assert
is_prime()
AssertionError
unittest
unittest
# <module-name>.py

import unittest
from <module> import <function_to_test>
# all entries within <> are placeholders

class TestClass(unittest.TestCase):
	def test_<name_1>(self):
		# check function_to_test

	def test_<name_2>(self):
		# check function_to_test
	:
	:
	:

	def test_<name_n>(self):
		# check function_to_test

<module-name>.py
unittest
<function_to_test>
<module>
TestClass
unittest.TestCase
unittest
test_
TestCase
unittest
assertEqual(expected_value,actual_value)
expected_value == actual_value
assertTrue(result)
bool(result)
True
assertFalse(result)
bool(result)
False
assertRaises(exception, function, *args, **kwargs)
function(*args, **kwargs)
exception
$ python -m unittest <module-name>.py
if __name__=='__main__'
unittest
if __name__=='__main__':
	unittest.main()
$ python <module-name>.py
is_prime()
is_prime()
assertTrue()
assertFalse()
TestPrime
unittest.TestCase
import unittest
# import the is_prime function
from prime_number import is_prime
class TestPrime(unittest.TestCase):
    def test_two(self):
        self.assertTrue(is_prime(2))
    def test_five(self):
    	self.assertTrue(is_prime(5))
    def test_nine(self):
    	self.assertFalse(is_prime(9))
    def test_eleven(self):
    	self.assertTrue(is_prime(11))
if __name__=='__main__':
	unittest.main()
$ python test_prime.py
Output
....
----------------------------------------------------------------------
Ran 4 tests in 0.001s
OK
import unittest
from prime_number import is_prime
class TestPrime(unittest.TestCase):
	def test_prime_not_prime(self):
        self.assertTrue(is_prime(2))
        self.assertTrue(is_prime(5))
        self.assertFalse(is_prime(9))
        self.assertTrue(is_prime(11))
test_prime
AssertionError
$ python test_prime.py
Output
.
----------------------------------------------------------------------
Ran 1 test in 0.001s
OK
is_prime()
is_prime()
is_prime()
is_prime()
True
False
math.sqrt()
>>> from prime_number import is_prime

>>> is_prime('five')
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
File ""/home/bala/unit-test-1/prime_number.py"", line 5, in is_prime
for i in range(2,int(math.sqrt(num))+1):
TypeError: must be real number, not str

>>> is_prime(-10)
Traceback (most recent call last):
File ""<stdin>"", line 1, in <module>
File ""/home/bala/unit-test-1/prime_number.py"", line 5, in is_prime
for i in range(2,int(math.sqrt(num))+1):
ValueError: math domain error

>>> is_prime(2.5)
True
num
num
TypeError
num
ValueError
import math
def is_prime(num):
    '''Check if num is prime or not.'''
    # raise TypeError for invalid input type
    if type(num) != int:
        raise TypeError('num is of invalid type')
    # raise ValueError for invalid input value
    if num < 0:
        raise ValueError('Check the value of num; is num a non-negative integer?')
    # for valid input, proceed to check if num is prime
    for i in range(2,int(math.sqrt(num))+1):
        if num%i==0:
        return False
    return True
assertRaises()
TestPrime
test_typeerror_1()
test_typeerror_2()
TypeError
test_valueerror()
ValueError
assertRaises()
def test_exception(self):
    self.assertRaises(exception-name,function-name,args)
def test_exception(self):
    with self.assertRaises(exception-name):
        function-name(args)
import unittest
from prime_number import is_prime
class TestPrime(unittest.TestCase):
    def test_prime_not_prime(self):
        self.assertTrue(is_prime(2))
        self.assertTrue(is_prime(5))
        self.assertFalse(is_prime(9))
        self.assertTrue(is_prime(11))
    def test_typeerror_1(self):
        with self.assertRaises(TypeError):
        	is_prime(6.5)
    def test_typeerror_2(self):
        with self.assertRaises(TypeError):
        	is_prime('five')
    def test_valueerror(self):
        with self.assertRaises(ValueError):
        	is_prime(-4)
            
if __name__=='__main__':
	unittest.main()
test_prime
$ python test_prime.py
Output
....
----------------------------------------------------------------------
Ran 4 tests in 0.002s
OK
test_typeerror_2()
def test_typeerror_2(self):
    with self.assertRaises(TypeError):
    	is_prime(5)
is_prime()
True
TypeError
$ python test_prime.py
Output

..F.
======================================================================
FAIL: test_typeerror_2 (__main__.TestPrime)
----------------------------------------------------------------------
Traceback (most recent call last):
File ""test_prime.py"", line 17, in test_typeerror_2
is_prime(5)
AssertionError: TypeError not raised
----------------------------------------------------------------------
Ran 4 tests in 0.003s
FAILED (failures=1)
unittest
","['is_prime', 'range', 'int', 'sqrt', 'TestClass', 'assertEqual', 'assertTrue', 'bool', 'assertFalse', 'assertRaises', 'function', 'main', 'TestPrime', 'test_two', 'test_five', 'test_nine', 'test_eleven', 'test_prime_not_prime', 'type', 'TypeError', 'ValueError', 'test_typeerror_1', 'test_typeerror_2', 'test_valueerror', 'test_exception', 'name']","['math', 'is_prime', 'unittest', 'the']"
24,"What is the purpose of the sys module in Python and how do you use it?
","import
sys
 
 
print
(sys.version)
import
sys 
 
 
for
line 
in
sys.stdin: 
    
if
'q'
=
=
line.rstrip(): 
        
break
    
print
(f
'Input : {line}'
) 
 
print
(
""Exit""
) 
import
sys
 
 
sys.stdout.write(
'Geeks'
)
import
sys 
 
 
def
print_to_stderr(
*
a): 
 
    
# Here a is the array holding the objects 
    
# passed as the argument of the function 
    
print
(
*
a, 
file
=
sys.stderr) 
 
print_to_stderr(
""Hello World""
) 
# Python program to demonstrate
# command line arguments
 
import
sys
 
# total arguments
n 
=
len
(sys.argv)
print
(
""Total arguments passed:""
, n)
 
# Arguments passed
print
(
""\nName of Python script:""
, sys.argv[
0
])
 
print
(
""\nArguments passed:""
, end 
=
"" ""
)
for
i 
in
range
(
1
, n):
    
print
(sys.argv[i], end 
=
"" ""
)
     
# Addition of numbers
Sum
=
0
 
for
i 
in
range
(
1
, n):
    
Sum
+
=
int
(sys.argv[i])
     
print
(
""\n\nResult:""
, 
Sum
)
# Python program to demonstrate 
# sys.exit() 
 
 
import
sys 
 
 
age 
=
17
 
 
if
age < 
18
: 
     
    
# exits the program 
    
sys.exit(
""Age less than 18""
)     
else
: 
    
print
(
""Age is not less than 18""
) 
import
sys
 
 
print
(sys.path)
import
sys
 
# Removing the values
sys.path 
=
[]
 
# importing pandas after removing
# values
import
pandas
import
sys
 
 
print
(sys.modules)
import
sys
 
a 
=
'Geeks'
 
print
(sys.getrefcount(a))
","['rstrip', 'write', 'print_to_stderr', 'exit', 'getrefcount']","['sys', 'pandas']"
25,"How do you implement a binary search algorithm in Python?
","# Python 3 program for recursive binary search.
# Modifications needed for the older Python 2 are found in comments.
# Returns index of x in arr if present, else -1
def
binary_search(arr, low, high, x):
    
# Check base case
    
if
high >
=
low:
        
mid 
=
(high 
+
low) 
/
/
2
        
# If element is present at the middle itself
        
if
arr[mid] 
=
=
x:
            
return
mid
        
# If element is smaller than mid, then it can only
        
# be present in left subarray
        
elif
arr[mid] > x:
            
return
binary_search(arr, low, mid 
-
1
, x)
        
# Else the element can only be present in right subarray
        
else
:
            
return
binary_search(arr, mid 
+
1
, high, x)
    
else
:
        
# Element is not present in the array
        
return
-
1
# Test array
arr 
=
[ 
2
, 
3
, 
4
, 
10
, 
40
]
x 
=
10
# Function call
result 
=
binary_search(arr, 
0
, 
len
(arr)
-
1
, x)
if
result !
=
-
1
:
    
print
(
""Element is present at index""
, 
str
(result))
else
:
    
print
(
""Element is not present in array""
)
# Iterative Binary Search Function
# It returns index of x in given array arr if present,
# else returns -1
def
binary_search(arr, x):
    
low 
=
0
    
high 
=
len
(arr) 
-
1
    
mid 
=
0
    
while
low <
=
high:
        
mid 
=
(high 
+
low) 
/
/
2
        
# If x is greater, ignore left half
        
if
arr[mid] < x:
            
low 
=
mid 
+
1
        
# If x is smaller, ignore right half
        
elif
arr[mid] > x:
            
high 
=
mid 
-
1
        
# means x is present at mid
        
else
:
            
return
mid
    
# If we reach here, then the element was not present
    
return
-
1
# Test array
arr 
=
[ 
2
, 
3
, 
4
, 
10
, 
40
]
x 
=
10
# Function call
result 
=
binary_search(arr, x)
if
result !
=
-
1
:
    
print
(
""Element is present at index""
, 
str
(result))
else
:
    
print
(
""Element is not present in array""
)
",['binary_search'],[]
26,"How do you use the logging module in Python to log messages?
","import logging

import logging

logging.debug('This is a debug message')
logging.info('This is an info message')
logging.warning('This is a warning message')
logging.error('This is an error message')
logging.critical('This is a critical message')

WARNING:root:This is a warning message
ERROR:root:This is an error message
CRITICAL:root:This is a critical message

root
:
debug()
info()
WARNING
basicConfig(**
kwargs
)
camelCase
basicConfig()
level
filename
filemode
filename
a
format
level
import logging

logging.basicConfig(level=logging.DEBUG)
logging.debug('This will get logged')

DEBUG:root:This will get logged

DEBUG
filename
filemode
format
import logging

logging.basicConfig(filename='app.log', filemode='w', format='%(name)s - %(levelname)s - %(message)s')
logging.warning('This will get logged to a file')

root - ERROR - This will get logged to a file

app.log
w
basicConfig()
a
basicConfig()
basicConfig()
debug()
info()
warning()
error()
critical()
basicConfig()
basicConfig()
basicConfig()
ERROR:root:This is an error message

LogRecord
import logging

logging.basicConfig(format='%(process)d-%(levelname)s-%(message)s')
logging.warning('This is a Warning')

18472-WARNING-This is a Warning

format
LogRecord
import logging

logging.basicConfig(format='%(asctime)s - %(message)s', level=logging.INFO)
logging.info('Admin logged in')

2018-07-11 20:12:06,288 - Admin logged in

%(asctime)s
LogRecord
datefmt
time.strftime()
import logging

logging.basicConfig(format='%(asctime)s - %(message)s', datefmt='%d-%b-%y %H:%M:%S')
logging.warning('Admin logged out')

12-Jul-18 20:53:19 - Admin logged out

import logging

name = 'John'

logging.error('%s raised an error', name)

ERROR:root:John raised an error

import logging

name = 'John'

logging.error(f'{name} raised an error')

ERROR:root:John raised an error

exc_info
True
import logging

a = 5
b = 0

try:
  c = a / b
except Exception as e:
  logging.error(""Exception occurred"", exc_info=True)

ERROR:root:Exception occurred
Traceback (most recent call last):
  File ""exceptions.py"", line 6, in <module>
    c = a / b
ZeroDivisionError: division by zero
[Finished in 0.2s]

exc_info
True
ZeroDivisionError
ERROR:root:Exception occurred

logging.exception()
ERROR
logging.exception()
logging.error(exc_info=True)
import logging

a = 5
b = 0
try:
  c = a / b
except Exception as e:
  logging.exception(""Exception occurred"")

ERROR:root:Exception occurred
Traceback (most recent call last):
  File ""exceptions.py"", line 6, in <module>
    c = a / b
ZeroDivisionError: division by zero
[Finished in 0.2s]

logging.exception()
ERROR
debug()
critical()
exc_info
True
root
logging.debug()
Logger
Logger
LogRecord
LogRecord
Handler
LogRecord
Handler
StreamHandler
FileHandler
SMTPHandler
HTTPHandler
sys.stdout
Formatter
Logger
logging.getLogger(name)
getLogger()
name
Logger
import logging

logger = logging.getLogger('example_logger')
logger.warning('This is a warning')

This is a warning

example_logger
WARNING:example_logger:This is a warning

basicConfig()
__name__
getLogger()
__name__
WARNING
ERROR
# logging_example.py

import logging

# Create a custom logger
logger = logging.getLogger(__name__)

# Create handlers
c_handler = logging.StreamHandler()
f_handler = logging.FileHandler('file.log')
c_handler.setLevel(logging.WARNING)
f_handler.setLevel(logging.ERROR)

# Create formatters and add it to handlers
c_format = logging.Formatter('%(name)s - %(levelname)s - %(message)s')
f_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
c_handler.setFormatter(c_format)
f_handler.setFormatter(f_format)

# Add handlers to the logger
logger.addHandler(c_handler)
logger.addHandler(f_handler)

logger.warning('This is a warning')
logger.error('This is an error')

__main__ - WARNING - This is a warning
__main__ - ERROR - This is an error

logger.warning()
LogRecord
c_handler
f_handler
c_handler
StreamHandler
WARNING
LogRecord
f_handler
FileHandler
ERROR
LogRecord
WARNING
logger.error()
c_handler
f_handler
LogRecord
ERROR
c_handler
2018-08-03 16:12:21,723 - __main__ - ERROR - This is an error

__name__
__main__
__name__
# run.py

import logging_example

logging_example - WARNING - This is a warning
logging_example - ERROR - This is an error

fileConfig()
dictConfig()
[loggers]
keys=root,sampleLogger

[handlers]
keys=consoleHandler

[formatters]
keys=sampleFormatter

[logger_root]
level=DEBUG
handlers=consoleHandler

[logger_sampleLogger]
level=DEBUG
handlers=consoleHandler
qualname=sampleLogger
propagate=0

[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=sampleFormatter
args=(sys.stdout,)

[formatter_sampleFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s

fileConfig()
import logging
import logging.config

logging.config.fileConfig(fname='file.conf', disable_existing_loggers=False)

# Get the logger specified in the file
logger = logging.getLogger(__name__)

logger.debug('This is a debug message')

2018-07-13 13:57:45,467 - __main__ - DEBUG - This is a debug message

fileConfig()
disable_existing_loggers
True
version: 1
formatters:
  simple:
    format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
handlers:
  console:
    class: logging.StreamHandler
    level: DEBUG
    formatter: simple
    stream: ext://sys.stdout
loggers:
  sampleLogger:
    level: DEBUG
    handlers: [console]
    propagate: no
root:
  level: DEBUG
  handlers: [console]

yaml
import logging
import logging.config
import yaml

with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f.read())
    logging.config.dictConfig(config)

logger = logging.getLogger(__name__)

logger.debug('This is a debug message')

2018-07-13 14:05:03,766 - __main__ - DEBUG - This is a debug message

","['debug', 'info', 'warning', 'error', 'critical', 'basicConfig', 'strftime', 'exception', 'getLogger', 'StreamHandler', 'FileHandler', 'setLevel', 'Formatter', 'setFormatter', 'addHandler', 'fileConfig', 'dictConfig', 'open', 'safe_load', 'read']","['logging', 'logging_example', 'yaml']"
27,"How do you use the requests module in Python to make HTTP requests?
","import
requests
  
# Making a GET request
r 
=
requests.get(
'https://api.github.com/users/naveenkrnl'
)
 
# check status code for response received
# success code - 200
print
(r)
 
# print content of request
print
(r.content)
# import requests module
import
requests
 
# Making a get request
response 
=
requests.get(
'https://api.github.com/'
)
 
# print request object
print
(response.url)
 
# print status code
print
(response.status_code)
# import requests module
import
requests
from
requests.auth 
import
HTTPBasicAuth
 
# Making a get request
response 
=
requests.get(
'https://api.github.com / user, '
,
            
auth 
=
HTTPBasicAuth(
'user'
, 
'pass'
))
 
# print request object
print
(response)
# import requests module
import
requests
 
# Making a get request
response 
=
requests.get(
'https://expired.badssl.com/'
)
 
# print request object
print
(response)
# import requests module
import
requests
 
# Making a get request
response 
=
requests.get(
'https://github.com'
, verify 
=
'/path/to/certfile'
)
 
# print request object
print
(response)
# import requests module
import
requests
 
# create a session object
s 
=
requests.Session()
 
# make a get request
s.get(
'https://httpbin.org/cookies/set/sessioncookie/123456789'
)
 
# again make a get request
r 
=
s.get(
'https://httpbin.org/cookies'
)
 
# check if cookie is still set
print
(r.text)
","['get', 'HTTPBasicAuth', 'Session']","['requests', 'HTTPBasicAuth']"
28,"How do you use the Flask web framework to build a REST API in Python?
","flask_restful 
 sudo pip3 install flask-restful 
# Using flask to make an api
# import necessary libraries and functions
from
flask 
import
Flask, jsonify, request
 
# creating a Flask app
app 
=
Flask(__name__)
 
# on the terminal type: curl http://127.0.0.1:5000/
# returns hello world when we use GET.
# returns the data that we send when we use POST.
@app
.route(
'/'
, methods 
=
[
'GET'
, 
'POST'
])
def
home():
    
if
(request.method 
=
=
'GET'
):
 
        
data 
=
""hello world""
        
return
jsonify({
'data'
: data})
 
 
# A simple function to calculate the square of a number
# the number to be squared is sent in the URL when we use GET
# on the terminal type: curl http://127.0.0.1:5000 / home / 10
# this returns 100 (square of 10)
@app
.route(
'/home/<int:num>'
, methods 
=
[
'GET'
])
def
disp(num):
 
    
return
jsonify({
'data'
: num
*
*
2
})
 
 
# driver function
if
__name__ 
=
=
'__main__'
:
 
    
app.run(debug 
=
True
)
flask_restful
# using flask_restful
from
flask 
import
Flask, jsonify, request
from
flask_restful 
import
Resource, Api
 
# creating the flask app
app 
=
Flask(__name__)
# creating an API object
api 
=
Api(app)
 
# making a class for a particular resource
# the get, post methods correspond to get and post requests
# they are automatically mapped by flask_restful.
# other methods include put, delete, etc.
class
Hello(Resource):
 
    
# corresponds to the GET request.
    
# this function is called whenever there
    
# is a GET request for this resource
    
def
get(
self
):
 
        
return
jsonify({
'message'
: 
'hello world'
})
 
    
# Corresponds to POST request
    
def
post(
self
):
         
        
data 
=
request.get_json()     
# status code
        
return
jsonify({
'data'
: data}), 
201
 
 
# another resource to calculate the square of a number
class
Square(Resource):
 
    
def
get(
self
, num):
 
        
return
jsonify({
'square'
: num
*
*
2
})
 
 
# adding the defined resources along with their corresponding urls
api.add_resource(Hello, 
'/'
)
api.add_resource(Square, 
'/square/<int:num>'
)
 
 
# driver function
if
__name__ 
=
=
'__main__'
:
 
    
app.run(debug 
=
True
)
","['Flask', 'route', 'home', 'jsonify', 'disp', 'run', 'Api', 'Hello', 'get', 'post', 'get_json', 'Square', 'add_resource']","['necessary', 'Flask', 'Resource']"
29,"How do you use the SQLAlchemy ORM in Python to interact with a relational database?
","author_book_publisher.csv
first_name,last_name,title,publisher
Isaac,Asimov,Foundation,Random House
Pearl,Buck,The Good Earth,Random House
Pearl,Buck,The Good Earth,Simon & Schuster
Tom,Clancy,The Hunt For Red October,Berkley
Tom,Clancy,Patriot Games,Simon & Schuster
Stephen,King,It,Random House
Stephen,King,It,Penguin Random House
Stephen,King,Dead Zone,Random House
Stephen,King,The Shining,Penguin Random House
John,Le Carre,""Tinker, Tailor, Soldier, Spy: A George Smiley Novel"",Berkley
Alex,Michaelides,The Silent Patient,Simon & Schuster
Carol,Shaben,Into The Abyss,Simon & Schuster

csv
examples/example_1/main.py
author_book_publisher.csv
project/data
project/build_data
author_book_publisher.csv
examples/example_1/main.py
author_book_publisher.csv
treelib
main()
 1def main():
 2    """"""The main entry point of the program""""""
 3    # Get the resources for the program
 4    with resources.path(
 5        ""project.data"", ""author_book_publisher.csv""
 6    ) as filepath:
 7        data = get_data(filepath)
 8
 9    # Get the number of books printed by each publisher
10    books_by_publisher = get_books_by_publisher(data, ascending=False)
11    for publisher, total_books in books_by_publisher.items():
12        print(f""Publisher: {publisher}, total books: {total_books}"")
13    print()
14
15    # Get the number of authors each publisher publishes
16    authors_by_publisher = get_authors_by_publisher(data, ascending=False)
17    for publisher, total_authors in authors_by_publisher.items():
18        print(f""Publisher: {publisher}, total authors: {total_authors}"")
19    print()
20
21    # Output hierarchical authors data
22    output_author_hierarchy(data)
23
24    # Add a new book to the data structure
25    data = add_new_book(
26        data,
27        author_name=""Stephen King"",
28        book_title=""The Stand"",
29        publisher_name=""Random House"",
30    )
31
32    # Output the updated hierarchical authors data
33    output_author_hierarchy(data)

author_book_publisher.csv
$ python main.py
Publisher: Simon & Schuster, total books: 4
Publisher: Random House, total books: 4
Publisher: Penguin Random House, total books: 2
Publisher: Berkley, total books: 2

Publisher: Simon & Schuster, total authors: 4
Publisher: Random House, total authors: 3
Publisher: Berkley, total authors: 2
Publisher: Penguin Random House, total authors: 1

Authors
├── Alex Michaelides
│   └── The Silent Patient
│       └── Simon & Schuster
├── Carol Shaben
│   └── Into The Abyss
│       └── Simon & Schuster
├── Isaac Asimov
│   └── Foundation
│       └── Random House
├── John Le Carre
│   └── Tinker, Tailor, Soldier, Spy: A George Smiley Novel
│       └── Berkley
├── Pearl Buck
│   └── The Good Earth
│       ├── Random House
│       └── Simon & Schuster
├── Stephen King
│   ├── Dead Zone
│   │   └── Random House
│   ├── It
│   │   ├── Penguin Random House
│   │   └── Random House
│   └── The Shining
│       └── Penguin Random House
└── Tom Clancy
    ├── Patriot Games
    │   └── Simon & Schuster
    └── The Hunt For Red October
        └── Berkley

main()
get_data()
def get_data(filepath):
    """"""Get book data from the csv file""""""
    return pd.read_csv(filepath)

get_books_by_publisher()
ascending
def get_books_by_publisher(data, ascending=True):
    """"""Return the number of books by each publisher as a pandas series""""""
    return data.groupby(""publisher"").size().sort_values(ascending=ascending)

get_authors_by_publisher()
def get_authors_by_publisher(data, ascending=True):
    """"""Returns the number of authors by each publisher as a pandas series""""""
    return (
        data.assign(name=data.first_name.str.cat(data.last_name, sep="" ""))
        .groupby(""publisher"")
        .nunique()
        .loc[:, ""name""]
        .sort_values(ascending=ascending)
    )

add_new_book()
def add_new_book(data, author_name, book_title, publisher_name):
    """"""Adds a new book to the system""""""
    # Does the book exist?
    first_name, _, last_name = author_name.partition("" "")
    if any(
        (data.first_name == first_name)
        & (data.last_name == last_name)
        & (data.title == book_title)
        & (data.publisher == publisher_name)
    ):
        return data
    # Add the new book
    return data.append(
        {
            ""first_name"": first_name,
            ""last_name"": last_name,
            ""title"": book_title,
            ""publisher"": publisher_name,
        },
        ignore_index=True,
    )

output_author_hierarchy()
for
treelib
def output_author_hierarchy(data):
    """"""Output the data as a hierarchy list of authors""""""
    authors = data.assign(
        name=data.first_name.str.cat(data.last_name, sep="" "")
    )
    authors_tree = Tree()
    authors_tree.create_node(""Authors"", ""authors"")
    for author, books in authors.groupby(""name""):
        authors_tree.create_node(author, author, parent=""authors"")
        for book, publishers in books.groupby(""title"")[""publisher""]:
            book_id = f""{author}:{book}""
            authors_tree.create_node(book, book_id, parent=author)
            for publisher in publishers:
                authors_tree.create_node(publisher, parent=book_id)

    # Output the hierarchical authors data
    authors_tree.show()

author_book_publisher.csv
author_book_publisher.csv
author_book_publisher.csv
CREATE TABLE author (
    author_id INTEGER NOT NULL PRIMARY KEY,
    first_name VARCHAR,
    last_name VARCHAR
);

CREATE TABLE book (
    book_id INTEGER NOT NULL PRIMARY KEY,
    author_id INTEGER REFERENCES author,
    title VARCHAR
);

CREATE TABLE publisher (
    publisher_id INTEGER NOT NULL PRIMARY KEY,
    name VARCHAR
);

author_book_publisher.csv
*
author
SELECT * FROM author;

sqlite3
author_book_publisher.db
project/data
$ sqlite3 author_book_publisher.db

.q
sqlite> SELECT * FROM author;
1|Isaac|Asimov
2|Pearl|Buck
3|Tom|Clancy
4|Stephen|King
5|John|Le Carre
6|Alex|Michaelides
7|Carol|Shaben

sqlite> .q

author
INSERT INTO author
    (first_name, last_name)
VALUES ('Paul', 'Mendez');

Paul
Mendez
first_name
last_name
author
author_id
UPDATE author
SET first_name = 'Richard', last_name = 'Bachman'
WHERE first_name = 'Stephen' AND last_name = 'King';

'Stephen King'
WHERE first_name = 'Stephen' AND last_name = 'King'
first_name
last_name
=
author
DELETE FROM author
WHERE first_name = 'Paul'
AND last_name = 'Mendez';

author
first_name
'Paul'
last_name
'Mendez'
first_name = 'Paul'
active
some_table
SELECT
  *
FROM some_table
WHERE active = 1;

active
0
1
author_book_publisher.csv
author
book
publisher
author_book_publisher.db
<table name>_id
book
author_id
author
author_id
author
book
book
author
author_id
book
book
author_id
author
JOIN
author
book
sqlite> SELECT
   ...> a.first_name || ' ' || a.last_name AS author_name,
   ...> b.title AS book_title
   ...> FROM author a
   ...> JOIN book b ON b.author_id = a.author_id
   ...> ORDER BY a.last_name ASC;
Isaac Asimov|Foundation
Pearl Buck|The Good Earth
Tom Clancy|The Hunt For Red October
Tom Clancy|Patriot Games
Stephen King|It
Stephen King|Dead Zone
Stephen King|The Shining
John Le Carre|Tinker, Tailor, Soldier, Spy: A George Smiley Novel
Alex Michaelides|The Silent Patient
Carol Shaben|Into The Abyss

author_name
last_name
author_book_publisher.db
author
publisher
CREATE TABLE author_publisher (
    author_id INTEGER REFERENCES author,
    publisher_id INTEGER REFERENCES publisher
);

author_publisher
author
publisher
author_publisher
JOIN
author
publisher
JOIN
author
author_publisher
JOIN
author_publisher
publisher
author_publisher
JOIN
 1sqlite> SELECT
 2   ...> a.first_name || ' ' || a.last_name AS author_name,
 3   ...> p.name AS publisher_name
 4   ...> FROM author a
 5   ...> JOIN author_publisher ap ON ap.author_id = a.author_id
 6   ...> JOIN publisher p ON p.publisher_id = ap.publisher_id
 7   ...> ORDER BY a.last_name ASC;
 8Isaac Asimov|Random House
 9Pearl Buck|Random House
10Pearl Buck|Simon & Schuster
11Tom Clancy|Berkley
12Tom Clancy|Simon & Schuster
13Stephen King|Random House
14Stephen King|Penguin Random House
15John Le Carre|Berkley
16Alex Michaelides|Simon & Schuster
17Carol Shaben|Simon & Schuster

SELECT
author
a
author
publisher_name
author
a
author
publisher
ap
author_publisher
JOIN
ap.author_id
a.author_id
author
p
publisher
JOIN
ap.publisher_id
p.publisher_id
publisher
author
publisher
JOIN
author_book_publisher.csv
 1sqlite> SELECT
 2   ...> a.first_name || ' ' || a.last_name AS author_name,
 3   ...> COUNT(b.title) AS total_books
 4   ...> FROM author a
 5   ...> JOIN book b ON b.author_id = a.author_id
 6   ...> GROUP BY author_name
 7   ...> ORDER BY total_books DESC, a.last_name ASC;
 8Stephen King|3
 9Tom Clancy|2
10Isaac Asimov|1
11Pearl Buck|1
12John Le Carre|1
13Alex Michaelides|1
14Carol Shaben|1

SELECT
author_name
ORDER BY
author
a
book
JOIN
author_id
b
book
GROUP BY
GROUP BY
author_name
COUNT()
author_book_publisher.db
book_publisher
book
publisher
book
publisher
author_publisher
author
publisher
Base
Base
models.py
author_book_publisher.db
 1from sqlalchemy import Column, Integer, String, ForeignKey, Table
 2from sqlalchemy.orm import relationship, backref
 3from sqlalchemy.ext.declarative import declarative_base
 4
 5Base = declarative_base()
 6
 7author_publisher = Table(
 8    ""author_publisher"",
 9    Base.metadata,
10    Column(""author_id"", Integer, ForeignKey(""author.author_id"")),
11    Column(""publisher_id"", Integer, ForeignKey(""publisher.publisher_id"")),
12)
13
14book_publisher = Table(
15    ""book_publisher"",
16    Base.metadata,
17    Column(""book_id"", Integer, ForeignKey(""book.book_id"")),
18    Column(""publisher_id"", Integer, ForeignKey(""publisher.publisher_id"")),
19)
20
21class Author(Base):
22    __tablename__ = ""author""
23    author_id = Column(Integer, primary_key=True)
24    first_name = Column(String)
25    last_name = Column(String)
26    books = relationship(""Book"", backref=backref(""author""))
27    publishers = relationship(
28        ""Publisher"", secondary=author_publisher, back_populates=""authors""
29    )
30
31class Book(Base):
32    __tablename__ = ""book""
33    book_id = Column(Integer, primary_key=True)
34    author_id = Column(Integer, ForeignKey(""author.author_id""))
35    title = Column(String)
36    publishers = relationship(
37        ""Publisher"", secondary=book_publisher, back_populates=""books""
38    )
39
40class Publisher(Base):
41    __tablename__ = ""publisher""
42    publisher_id = Column(Integer, primary_key=True)
43    name = Column(String)
44    authors = relationship(
45        ""Author"", secondary=author_publisher, back_populates=""publishers""
46    )
47    books = relationship(
48        ""Book"", secondary=book_publisher, back_populates=""publishers""
49    )

Column
Integer
String
ForeignKey
Table
relationship()
backref
declarative_base
Base
author_publisher
book_publisher
Author
author
Book
book
Publisher
publisher
author_book_publisher.db
Table
ForeignKey
relationship()
backref
Table
author_publisher
book_publisher
Table
author
publisher
book
publisher
Table
Base.metadata
Column
ForeignKey
ForeignKey
ForeignKey
Column
ForeignKey
author_publisher
Column(""author_id"", Integer, ForeignKey(""author.author_id""))

author_publisher
author_id
Integer
author_id
author
author_id
publisher_id
author_publisher
Table
author
publisher
relationship()
ForeignKey
Author
books = relationship(""Book"", backref=backref(""author""))

books
relationship()
Book
book
books
relationship
Author
Book
Book
author_id = Column(Integer, ForeignKey(""author.author_id""))

ForeignKey
backref
relationship()
Author
Publisher
Author
publishers = relationship(
    ""Publisher"", secondary=author_publisher, back_populates=""authors""
)

books
publishers
""Publisher""
secondary=author_publisher
back_populates=""authors""
secondary
Publisher
author_publisher
models.py
secondary
publisher_id
ForeignKey
author_publisher
back_populates
Publisher
authors
backref
backref
books
relationship()
author
Book
Author
Book
Book
Book
book = session.query(Book).filter_by(Book.title == ""The Stand"").one_or_none()
print(f""Authors name: {book.author.first_name} {book.author.last_name}"")

author
Book
backref
backref
SELECT * FROM author;
results = session.query(Author).all()

session
Author
results
Author
books
publishers
author_book_totals = (
    session.query(
        Author.first_name,
        Author.last_name,
        func.count(Book.title).label(""book_total"")
    )
    .join(Book)
    .group_by(Author.last_name)
    .order_by(desc(""book_total""))
    .all()
)

count
group_by
book_total
examples/example_2/main.py
examples/example_1/main.py
author_book_publisher.db
main()
 1def main():
 2    """"""Main entry point of program""""""
 3    # Connect to the database using SQLAlchemy
 4    with resources.path(
 5        ""project.data"", ""author_book_publisher.db""
 6    ) as sqlite_filepath:
 7        engine = create_engine(f""sqlite:///{sqlite_filepath}"")
 8    Session = sessionmaker()
 9    Session.configure(bind=engine)
10    session = Session()
11
12    # Get the number of books printed by each publisher
13    books_by_publisher = get_books_by_publishers(session, ascending=False)
14    for row in books_by_publisher:
15        print(f""Publisher: {row.name}, total books: {row.total_books}"")
16    print()
17
18    # Get the number of authors each publisher publishes
19    authors_by_publisher = get_authors_by_publishers(session)
20    for row in authors_by_publisher:
21        print(f""Publisher: {row.name}, total authors: {row.total_authors}"")
22    print()
23
24    # Output hierarchical author data
25    authors = get_authors(session)
26    output_author_hierarchy(authors)
27
28    # Add a new book
29    add_new_book(
30        session,
31        author_name=""Stephen King"",
32        book_title=""The Stand"",
33        publisher_name=""Random House"",
34    )
35    # Output the updated hierarchical author data
36    authors = get_authors(session)
37    output_author_hierarchy(authors)

examples/example_1/main.py
sqlite_filepath
engine
author_book_publisher.db
Session
sessionmaker()
Session
session
data
session
main()
get_books_by_publisher()
 1def get_books_by_publishers(session, ascending=True):
 2    """"""Get a list of publishers and the number of books they've published""""""
 3    if not isinstance(ascending, bool):
 4        raise ValueError(f""Sorting value invalid: {ascending}"")
 5
 6    direction = asc if ascending else desc
 7
 8    return (
 9        session.query(
10            Publisher.name, func.count(Book.title).label(""total_books"")
11        )
12        .join(Publisher.books)
13        .group_by(Publisher.name)
14        .order_by(direction(""total_books""))
15    )

get_books_by_publishers()
direction
desc
asc
ascending
Publisher
Publisher.name
Book
total_books
Publisher.books
Publisher.name
direction
get_authors_by_publisher()
def get_authors_by_publishers(session, ascending=True):
    """"""Get a list of publishers and the number of authors they've published""""""
    if not isinstance(ascending, bool):
        raise ValueError(f""Sorting value invalid: {ascending}"")

    direction = asc if ascending else desc

    return (
        session.query(
            Publisher.name,
            func.count(Author.first_name).label(""total_authors""),
        )
        .join(Publisher.authors)
        .group_by(Publisher.name)
        .order_by(direction(""total_authors""))
    )

get_authors()
Author
Author
def get_authors(session):
    """"""Get a list of author objects sorted by last name""""""
    return session.query(Author).order_by(Author.last_name).all()

add_new_book()
Book
Author
Publisher
 1def add_new_book(session, author_name, book_title, publisher_name):
 2    """"""Adds a new book to the system""""""
 3    # Get the author's first and last names
 4    first_name, _, last_name = author_name.partition("" "")
 5
 6    # Check if book exists
 7    book = (
 8        session.query(Book)
 9        .join(Author)
10        .filter(Book.title == book_title)
11        .filter(
12            and_(
13                Author.first_name == first_name, Author.last_name == last_name
14            )
15        )
16        .filter(Book.publishers.any(Publisher.name == publisher_name))
17        .one_or_none()
18    )
19    # Does the book by the author and publisher already exist?
20    if book is not None:
21        return
22
23    # Get the book by the author
24    book = (
25        session.query(Book)
26        .join(Author)
27        .filter(Book.title == book_title)
28        .filter(
29            and_(
30                Author.first_name == first_name, Author.last_name == last_name
31            )
32        )
33        .one_or_none()
34    )
35    # Create the new book if needed
36    if book is None:
37        book = Book(title=book_title)
38
39    # Get the author
40    author = (
41        session.query(Author)
42        .filter(
43            and_(
44                Author.first_name == first_name, Author.last_name == last_name
45            )
46        )
47        .one_or_none()
48    )
49    # Do we need to create the author?
50    if author is None:
51        author = Author(first_name=first_name, last_name=last_name)
52        session.add(author)
53
54    # Get the publisher
55    publisher = (
56        session.query(Publisher)
57        .filter(Publisher.name == publisher_name)
58        .one_or_none()
59    )
60    # Do we need to create the publisher?
61    if publisher is None:
62        publisher = Publisher(name=publisher_name)
63        session.add(publisher)
64
65    # Initialize the book relationships
66    book.author = author
67    book.publishers.append(publisher)
68    session.add(book)
69
70    # Commit to the database
71    session.commit()

book
Book
book
None
book
Book
Book
author
Author
publisher
Publisher
book.author
author
publisher
book.publishers
book
publisher
book_publisher
Book
author_publisher
book_publisher
models.py
session
session.commit()
Book
book_id
author_id
book_id
book
author_id
session.commit()
book
book_id
book.book_id
session.commit()
Book
author.books
author
author_id
Book
author.books
author_id
project/data
examples/example_3/chinook_server.py
.env
.env
.env
SECRET_KEY = ""you-will-never-guess""
SQLALCHEMY_TRACK_MODIFICATIONS = False
SQLAlCHEMY_ECHO = False
DEBUG = True

 1{% extends ""base.html"" %}
 2
 3{% block content %}
 4<div class=""container-fluid"">
 5  <div class=""m-4"">
 6    <div class=""card"" style=""width: 18rem;"">
 7      <div class=""card-header"">Create New Artist</div>
 8      <div class=""card-body"">
 9        <form method=""POST"" action=""{{url_for('artists_bp.artists')}}"">
10          {{ form.csrf_token }}
11          {{ render_field(form.name, placeholder=form.name.label.text) }}
12          <button type=""submit"" class=""btn btn-primary"">Create</button>
13        </form>
14      </div>
15    </div>
16    <table class=""table table-striped table-bordered table-hover table-sm"">
17      <caption>List of Artists</caption>
18      <thead>
19        <tr>
20          <th>Artist Name</th>
21        </tr>
22      </thead>
23      <tbody>
24        {% for artist in artists %}
25        <tr>
26          <td>
27            <a href=""{{url_for('albums_bp.albums', artist_id=artist.artist_id)}}"">
28              {{ artist.name }}
29            </a>
30          </td>
31        </tr>
32        {% endfor %}
33      </tbody>
34    </table>
35  </div>
36</div>
37{% endblock %}

base.html
base.html
base.html
for
 1from flask import Blueprint, render_template, redirect, url_for
 2from flask_wtf import FlaskForm
 3from wtforms import StringField
 4from wtforms.validators import InputRequired, ValidationError
 5from app import db
 6from app.models import Artist
 7
 8# Set up the blueprint
 9artists_bp = Blueprint(
10    ""artists_bp"", __name__, template_folder=""templates"", static_folder=""static""
11)
12
13def does_artist_exist(form, field):
14    artist = (
15        db.session.query(Artist)
16        .filter(Artist.name == field.data)
17        .one_or_none()
18    )
19    if artist is not None:
20        raise ValidationError(""Artist already exists"", field.data)
21
22class CreateArtistForm(FlaskForm):
23    name = StringField(
24        label=""Artist's Name"", validators=[InputRequired(), does_artist_exist]
25    )
26
27@artists_bp.route(""/"")
28@artists_bp.route(""/artists"", methods=[""GET"", ""POST""])
29def artists():
30    form = CreateArtistForm()
31
32    # Is the form valid?
33    if form.validate_on_submit():
34        # Create new artist
35        artist = Artist(name=form.name.data)
36        db.session.add(artist)
37        db.session.commit()
38        return redirect(url_for(""artists_bp.artists""))
39
40    artists = db.session.query(Artist).order_by(Artist.name).all()
41    return render_template(""artists.html"", artists=artists, form=form,)

artists()
CreateArtistForm()
Artist.name
","['main', 'path', 'get_data', 'get_books_by_publisher', 'items', 'get_authors_by_publisher', 'output_author_hierarchy', 'add_new_book', 'read_csv', 'groupby', 'size', 'sort_values', 'assign', 'cat', 'nunique', 'partition', 'any', 'append', 'Tree', 'create_node', 'show', 'COUNT', 'declarative_base', 'Table', 'Column', 'ForeignKey', 'Author', 'relationship', 'backref', 'Book', 'Publisher', 'query', 'filter_by', 'one_or_none', 'all', 'count', 'label', 'join', 'group_by', 'order_by', 'desc', 'create_engine', 'sessionmaker', 'configure', 'Session', 'get_books_by_publishers', 'get_authors_by_publishers', 'get_authors', 'isinstance', 'ValueError', 'direction', 'filter', 'and_', 'add', 'commit', 'url_for', 'render_field', 'Blueprint', 'does_artist_exist', 'ValidationError', 'CreateArtistForm', 'StringField', 'InputRequired', 'route', 'artists', 'validate_on_submit', 'Artist', 'redirect', 'render_template']","['Column', 'relationship', 'declarative_base', 'Blueprint', 'FlaskForm', 'StringField', 'InputRequired', 'db', 'Artist']"
30,"How do you use the asyncio module in Python to write asynchronous code?
","async
await
asyncio
asyncio
asyncio
aiohttp
aiofiles
$ python3.7 -m venv ./py37async
$ source ./py37async/bin/activate  # Windows: .\py37async\Scripts\activate.bat
$ pip install --upgrade pip aiohttp aiofiles  # Optional: aiodns

for
multiprocessing
threading
concurrent.futures
asyncio
async
await
asyncio
asyncio
asyncio
async
await
asyncio
async
await
async
await
return
Hello World
#!/usr/bin/env python3
# countasync.py

import asyncio

async def count():
    print(""One"")
    await asyncio.sleep(1)
    print(""Two"")

async def main():
    await asyncio.gather(count(), count(), count())

if __name__ == ""__main__"":
    import time
    s = time.perf_counter()
    asyncio.run(main())
    elapsed = time.perf_counter() - s
    print(f""{__file__} executed in {elapsed:0.2f} seconds."")

def
time.sleep()
$ python3 countasync.py
One
One
One
Two
Two
Two
countasync.py executed in 1.01 seconds.

count()
await asyncio.sleep(1)
#!/usr/bin/env python3
# countsync.py

import time

def count():
    print(""One"")
    time.sleep(1)
    print(""Two"")

def main():
    for _ in range(3):
        count()

if __name__ == ""__main__"":
    s = time.perf_counter()
    main()
    elapsed = time.perf_counter() - s
    print(f""{__file__} executed in {elapsed:0.2f} seconds."")

$ python3 countsync.py
One
Two
One
Two
One
Two
countsync.py executed in 3.01 seconds.

time.sleep()
asyncio.sleep()
sleep()
time.sleep()
asyncio.sleep()
asyncio.sleep()
time.sleep()
async
await
async
await
async def
async with
async for
await
await f()
g()
await
g()
f()
async def g():
    # Pause here and come back to g() when f() is ready
    r = await f()
    return r

async
await
async
await
async def
await
return
yield
async def noop(): pass
await
return
await
yield
async def
async for
await
return
async def
yield from
SyntaxError
SyntaxError
yield
def
SyntaxError
await
async def
await
async def f(x):
    y = await z(x)  # OK - `await` and `return` allowed in coroutines
    return y

async def g(x):
    yield x  # OK - this is an async generator

async def m(x):
    yield from gen(x)  # No - SyntaxError

def m(x):
    y = await z(x)  # Still no - SyntaxError (no `async def` here)
    return y

await f()
f()
.__await__()
def
@asyncio.coroutine
async
await
import asyncio

@asyncio.coroutine
def py34_coro():
    """"""Generator-based coroutine, older syntax""""""
    yield from stuff()

async def py35_coro():
    """"""Native coroutine, modern syntax""""""
    await stuff()

async
await
async
await
await
async
await
makerandom()
#!/usr/bin/env python3
# rand.py

import asyncio
import random

# ANSI colors
c = (
    ""\033[0m"",   # End of color
    ""\033[36m"",  # Cyan
    ""\033[91m"",  # Red
    ""\033[35m"",  # Magenta
)

async def makerandom(idx: int, threshold: int = 6) -> int:
    print(c[idx + 1] + f""Initiated makerandom({idx})."")
    i = random.randint(0, 10)
    while i <= threshold:
        print(c[idx + 1] + f""makerandom({idx}) == {i} too low; retrying."")
        await asyncio.sleep(idx + 1)
        i = random.randint(0, 10)
    print(c[idx + 1] + f""---> Finished: makerandom({idx}) == {i}"" + c[0])
    return i

async def main():
    res = await asyncio.gather(*(makerandom(i, 10 - i - 1) for i in range(3)))
    return res

if __name__ == ""__main__"":
    random.seed(444)
    r1, r2, r3 = asyncio.run(main())
    print()
    print(f""r1: {r1}, r2: {r2}, r3: {r3}"")

makerandom()
main()
range(3)
main()
asyncio
asyncio.sleep()
asyncio.sleep()
await
#!/usr/bin/env python3
# chained.py

import asyncio
import random
import time

async def part1(n: int) -> str:
    i = random.randint(0, 10)
    print(f""part1({n}) sleeping for {i} seconds."")
    await asyncio.sleep(i)
    result = f""result{n}-1""
    print(f""Returning part1({n}) == {result}."")
    return result

async def part2(n: int, arg: str) -> str:
    i = random.randint(0, 10)
    print(f""part2{n, arg} sleeping for {i} seconds."")
    await asyncio.sleep(i)
    result = f""result{n}-2 derived from {arg}""
    print(f""Returning part2{n, arg} == {result}."")
    return result

async def chain(n: int) -> None:
    start = time.perf_counter()
    p1 = await part1(n)
    p2 = await part2(n, p1)
    end = time.perf_counter() - start
    print(f""-->Chained result{n} => {p2} (took {end:0.2f} seconds)."")

async def main(*args):
    await asyncio.gather(*(chain(n) for n in args))

if __name__ == ""__main__"":
    import sys
    random.seed(444)
    args = [1, 2, 3] if len(sys.argv) == 1 else map(int, sys.argv[1:])
    start = time.perf_counter()
    asyncio.run(main(*args))
    end = time.perf_counter() - start
    print(f""Program finished in {end:0.2f} seconds."")

part1()
part2()
$ python3 chained.py 9 6 3
part1(9) sleeping for 4 seconds.
part1(6) sleeping for 4 seconds.
part1(3) sleeping for 0 seconds.
Returning part1(3) == result3-1.
part2(3, 'result3-1') sleeping for 4 seconds.
Returning part1(9) == result9-1.
part2(9, 'result9-1') sleeping for 7 seconds.
Returning part1(6) == result6-1.
part2(6, 'result6-1') sleeping for 4 seconds.
Returning part2(3, 'result3-1') == result3-2 derived from result3-1.
-->Chained result3 => result3-2 derived from result3-1 (took 4.00 seconds).
Returning part2(6, 'result6-1') == result6-2 derived from result6-1.
-->Chained result6 => result6-2 derived from result6-1 (took 8.01 seconds).
Returning part2(9, 'result9-1') == result9-2 derived from result9-1.
-->Chained result9 => result9-2 derived from result9-1 (took 11.01 seconds).
Program finished in 11.01 seconds.

main()
asyncio
queue
chained.py
queue.Queue()
asyncq.py
await q.get()
main()
await q.join()
#!/usr/bin/env python3
# asyncq.py

import asyncio
import itertools as it
import os
import random
import time

async def makeitem(size: int = 5) -> str:
    return os.urandom(size).hex()

async def randsleep(caller=None) -> None:
    i = random.randint(0, 10)
    if caller:
        print(f""{caller} sleeping for {i} seconds."")
    await asyncio.sleep(i)

async def produce(name: int, q: asyncio.Queue) -> None:
    n = random.randint(0, 10)
    for _ in it.repeat(None, n):  # Synchronous loop for each single producer
        await randsleep(caller=f""Producer {name}"")
        i = await makeitem()
        t = time.perf_counter()
        await q.put((i, t))
        print(f""Producer {name} added <{i}> to queue."")

async def consume(name: int, q: asyncio.Queue) -> None:
    while True:
        await randsleep(caller=f""Consumer {name}"")
        i, t = await q.get()
        now = time.perf_counter()
        print(f""Consumer {name} got element <{i}>""
              f"" in {now-t:0.5f} seconds."")
        q.task_done()

async def main(nprod: int, ncon: int):
    q = asyncio.Queue()
    producers = [asyncio.create_task(produce(n, q)) for n in range(nprod)]
    consumers = [asyncio.create_task(consume(n, q)) for n in range(ncon)]
    await asyncio.gather(*producers)
    await q.join()  # Implicitly awaits consumers, too
    for c in consumers:
        c.cancel()

if __name__ == ""__main__"":
    import argparse
    random.seed(444)
    parser = argparse.ArgumentParser()
    parser.add_argument(""-p"", ""--nprod"", type=int, default=5)
    parser.add_argument(""-c"", ""--ncon"", type=int, default=10)
    ns = parser.parse_args()
    start = time.perf_counter()
    asyncio.run(main(**ns.__dict__))
    elapsed = time.perf_counter() - start
    print(f""Program completed in {elapsed:0.5f} seconds."")

(i, t)
i
t
asyncio.sleep()
$ python3 asyncq.py -p 2 -c 5
Producer 0 sleeping for 3 seconds.
Producer 1 sleeping for 3 seconds.
Consumer 0 sleeping for 4 seconds.
Consumer 1 sleeping for 3 seconds.
Consumer 2 sleeping for 3 seconds.
Consumer 3 sleeping for 5 seconds.
Consumer 4 sleeping for 4 seconds.
Producer 0 added <377b1e8f82> to queue.
Producer 0 sleeping for 5 seconds.
Producer 1 added <413b8802f8> to queue.
Consumer 1 got element <377b1e8f82> in 0.00013 seconds.
Consumer 1 sleeping for 3 seconds.
Consumer 2 got element <413b8802f8> in 0.00009 seconds.
Consumer 2 sleeping for 4 seconds.
Producer 0 added <06c055b3ab> to queue.
Producer 0 sleeping for 1 seconds.
Consumer 0 got element <06c055b3ab> in 0.00021 seconds.
Consumer 0 sleeping for 4 seconds.
Producer 0 added <17a8613276> to queue.
Consumer 4 got element <17a8613276> in 0.00022 seconds.
Consumer 4 sleeping for 5 seconds.
Program completed in 9.00954 seconds.

python3 asyncq.py -p 5 -c 100
asyncio
async
await
import asyncio

@asyncio.coroutine
def py34_coro():
    """"""Generator-based coroutine""""""
    # No need to build these yourself, but be aware of what they are
    s = yield from stuff()
    return s

async def py35_coro():
    """"""Native coroutine, modern syntax""""""
    s = await stuff()
    return s

async def stuff():
    return 0x10, 0x20, 0x30

py34_coro()
py35_coro()
await
asyncio.run()
asyncio
>>> py35_coro()
<coroutine object py35_coro at 0x10126dcc8>

>>> def gen():
...     yield 0x10, 0x20, 0x30
...
>>> g = gen()
>>> g  # Nothing much happens - need to iterate with `.__next__()`
<generator object gen at 0x1012705e8>
>>> next(g)
(16, 32, 48)

async def
@asyncio.coroutine
await
yield from
yield
yield from x()
for i in x(): yield i
break
yield
>>> from itertools import cycle
>>> def endless():
...     """"""Yields 9, 8, 7, 6, 9, 8, 7, 6, ... forever""""""
...     yield from cycle((9, 8, 7, 6))

>>> e = endless()
>>> total = 0
>>> for i in e:
...     if total < 30:
...         print(i, end="" "")
...         total += i
...     else:
...         print()
...         # Pause execution. We can resume later.
...         break
9 8 7 6 9 8 7 6 9 8 7 6 9 8

>>> # Resume
>>> next(e), next(e), next(e)
(6, 9, 8)

await
yield
yield from
await
return
yield
next()
.send()
await
asyncio
.send()
yield from
yield from
await
await
yield from
await
async for
async
await
async for
await
return
yield
yield
await
yield
>>> async def mygen(u: int = 10):
...     """"""Yield powers of 2.""""""
...     i = 0
...     while i < u:
...         yield 2 ** i
...         i += 1
...         await asyncio.sleep(0.1)

async for
>>> async def main():
...     # This does *not* introduce concurrent execution
...     # It is meant to show syntax only
...     g = [i async for i in mygen()]
...     f = [j async for j in mygen() if not (j // 3 % 5)]
...     return g, f
...
>>> g, f = asyncio.run(main())
>>> g
[1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
>>> f
[1, 2, 16, 32, 256, 512]

async for
async with
for
with
await
asyncio.run()
while True
asyncio.run(main())  # Python 3.7+

asyncio.run()
asyncio
get_event_loop()
loop = asyncio.get_event_loop()
try:
    loop.run_until_complete(main())
finally:
    loop.close()

loop.get_event_loop()
asyncio.run()
loop
loop.is_running()
loop.is_closed()
>>> import asyncio

>>> async def main():
...     print(""Hello ..."")
...     await asyncio.sleep(1)
...     print(""World!"")

>>> routine = main()
>>> routine
<coroutine object main at 0x1027a6150>

asyncio.run()
main()
>>> asyncio.run(routine)
Hello ...
World!

await
main()
asyncio.run()
await
uvloop
asyncio
selectors
areq.py
aiohttp
requests
requests
urllib3
http
socket
await requests.get(url)
.get()
aiohttp
session.request()
response.text()
requests
urls.txt
href
foundurls.txt
aiohttp
aiofiles
urls.txt
$ cat urls.txt
https://regex101.com/
https://docs.python.org/3/this-url-will-404.html
https://www.nytimes.com/guides/
https://www.mediamatters.org/
https://1.1.1.1/
https://www.politico.com/tipsheets/morning-money
https://www.bloomberg.com/markets/economics
https://www.ietf.org/rfc/rfc2616.txt

#!/usr/bin/env python3
# areq.py

""""""Asynchronously get links embedded in multiple pages' HMTL.""""""

import asyncio
import logging
import re
import sys
from typing import IO
import urllib.error
import urllib.parse

import aiofiles
import aiohttp
from aiohttp import ClientSession

logging.basicConfig(
    format=""%(asctime)s %(levelname)s:%(name)s: %(message)s"",
    level=logging.DEBUG,
    datefmt=""%H:%M:%S"",
    stream=sys.stderr,
)
logger = logging.getLogger(""areq"")
logging.getLogger(""chardet.charsetprober"").disabled = True

HREF_RE = re.compile(r'href=""(.*?)""')

async def fetch_html(url: str, session: ClientSession, **kwargs) -> str:
    """"""GET request wrapper to fetch page HTML.

    kwargs are passed to `session.request()`.
    """"""

    resp = await session.request(method=""GET"", url=url, **kwargs)
    resp.raise_for_status()
    logger.info(""Got response [%s] for URL: %s"", resp.status, url)
    html = await resp.text()
    return html

async def parse(url: str, session: ClientSession, **kwargs) -> set:
    """"""Find HREFs in the HTML of `url`.""""""
    found = set()
    try:
        html = await fetch_html(url=url, session=session, **kwargs)
    except (
        aiohttp.ClientError,
        aiohttp.http_exceptions.HttpProcessingError,
    ) as e:
        logger.error(
            ""aiohttp exception for %s [%s]: %s"",
            url,
            getattr(e, ""status"", None),
            getattr(e, ""message"", None),
        )
        return found
    except Exception as e:
        logger.exception(
            ""Non-aiohttp exception occured:  %s"", getattr(e, ""__dict__"", {})
        )
        return found
    else:
        for link in HREF_RE.findall(html):
            try:
                abslink = urllib.parse.urljoin(url, link)
            except (urllib.error.URLError, ValueError):
                logger.exception(""Error parsing URL: %s"", link)
                pass
            else:
                found.add(abslink)
        logger.info(""Found %d links for %s"", len(found), url)
        return found

async def write_one(file: IO, url: str, **kwargs) -> None:
    """"""Write the found HREFs from `url` to `file`.""""""
    res = await parse(url=url, **kwargs)
    if not res:
        return None
    async with aiofiles.open(file, ""a"") as f:
        for p in res:
            await f.write(f""{url}\t{p}\n"")
        logger.info(""Wrote results for source URL: %s"", url)

async def bulk_crawl_and_write(file: IO, urls: set, **kwargs) -> None:
    """"""Crawl & write concurrently to `file` for multiple `urls`.""""""
    async with ClientSession() as session:
        tasks = []
        for url in urls:
            tasks.append(
                write_one(file=file, url=url, session=session, **kwargs)
            )
        await asyncio.gather(*tasks)

if __name__ == ""__main__"":
    import pathlib
    import sys

    assert sys.version_info >= (3, 7), ""Script requires Python 3.7+.""
    here = pathlib.Path(__file__).parent

    with open(here.joinpath(""urls.txt"")) as infile:
        urls = set(map(str.strip, infile))

    outpath = here.joinpath(""foundurls.txt"")
    with open(outpath, ""w"") as outfile:
        outfile.write(""source_url\tparsed_url\n"")

    asyncio.run(bulk_crawl_and_write(file=outpath, urls=urls))

HREF_RE
href
>>> HREF_RE.search('Go to <a href=""https://realpython.com/"">Real Python</a>')
<re.Match object; span=(15, 45), match='href=""https://realpython.com/""'>

fetch_html()
resp = await session.request(method=""GET"", url=url, **kwargs)
resp.raise_for_status()

fetch_html()
str
html = await resp.text()

await
session.request()
resp.text()
fetch_html()
parse()
fetch_html()
href
parse()
yield
await
return
loop.run_in_executor()
write()
parse()
set
aiofiles
bulk_crawl_and_write()
urls.txt
ClientSession
asyncio.connector.TCPConnector
ClientSession
async with
.__aenter__()
.__aexit__()
.__exit__()
.__enter__()
async with
async def
areq.py
$ python3 areq.py
21:33:22 DEBUG:asyncio: Using selector: KqueueSelector
21:33:22 INFO:areq: Got response [200] for URL: https://www.mediamatters.org/
21:33:22 INFO:areq: Found 115 links for https://www.mediamatters.org/
21:33:22 INFO:areq: Got response [200] for URL: https://www.nytimes.com/guides/
21:33:22 INFO:areq: Got response [200] for URL: https://www.politico.com/tipsheets/morning-money
21:33:22 INFO:areq: Got response [200] for URL: https://www.ietf.org/rfc/rfc2616.txt
21:33:22 ERROR:areq: aiohttp exception for https://docs.python.org/3/this-url-will-404.html [404]: Not Found
21:33:22 INFO:areq: Found 120 links for https://www.nytimes.com/guides/
21:33:22 INFO:areq: Found 143 links for https://www.politico.com/tipsheets/morning-money
21:33:22 INFO:areq: Wrote results for source URL: https://www.mediamatters.org/
21:33:22 INFO:areq: Found 0 links for https://www.ietf.org/rfc/rfc2616.txt
21:33:22 INFO:areq: Got response [200] for URL: https://1.1.1.1/
21:33:22 INFO:areq: Wrote results for source URL: https://www.nytimes.com/guides/
21:33:22 INFO:areq: Wrote results for source URL: https://www.politico.com/tipsheets/morning-money
21:33:22 INFO:areq: Got response [200] for URL: https://www.bloomberg.com/markets/economics
21:33:22 INFO:areq: Found 3 links for https://www.bloomberg.com/markets/economics
21:33:22 INFO:areq: Wrote results for source URL: https://www.bloomberg.com/markets/economics
21:33:23 INFO:areq: Found 36 links for https://1.1.1.1/
21:33:23 INFO:areq: Got response [200] for URL: https://regex101.com/
21:33:23 INFO:areq: Found 23 links for https://regex101.com/
21:33:23 INFO:areq: Wrote results for source URL: https://regex101.com/
21:33:23 INFO:areq: Wrote results for source URL: https://1.1.1.1/

$ wc -l foundurls.txt
     626 foundurls.txt

$ head -n 3 foundurls.txt
source_url  parsed_url
https://www.bloomberg.com/markets/economics https://www.bloomberg.com/feedback
https://www.bloomberg.com/markets/economics https://www.bloomberg.com/notices/tos

aio-redis
networkx
asyncio
TimeoutError
scikit-learn
keras
async
await
async
await
async
await
async
await
asyncio
asyncio
asyncio
urllib2
asyncio
asyncio
async
await
asyncio
asyncio
curio
trio
asyncio
curio
trio
asyncio
async
await
asyncio
asyncio.run()
asyncio.create_task()
asyncio.gather()
create_task()
asyncio.run()
>>> import asyncio

>>> async def coro(seq) -> list:
...     """"""'IO' wait time is proportional to the max element.""""""
...     await asyncio.sleep(max(seq))
...     return list(reversed(seq))
...
>>> async def main():
...     # This is a bit redundant in the case of one task
...     # We could use `await coro([3, 2, 1])` on its own
...     t = asyncio.create_task(coro([3, 2, 1]))  # Python 3.7+
...     await t
...     print(f't: type {type(t)}')
...     print(f't done: {t.done()}')
...
>>> t = asyncio.run(main())
t: type <class '_asyncio.Task'>
t done: True

await t
main()
main()
asyncio.run(main())
loop.run_until_complete(main())
await t
main()
main()
await t
asyncio.Task.all_tasks()
asyncio.create_task()
asyncio.ensure_future()
create_task()
asyncio.gather()
gather()
await asyncio.gather()
queue.join()
gather()
>>> import time
>>> async def main():
...     t = asyncio.create_task(coro([3, 2, 1]))
...     t2 = asyncio.create_task(coro([10, 5, 0]))  # Python 3.7+
...     print('Start:', time.strftime('%X'))
...     a = await asyncio.gather(t, t2)
...     print('End:', time.strftime('%X'))  # Should be 10 seconds
...     print(f'Both tasks done: {all((t.done(), t2.done()))}')
...     return a
...
>>> a = asyncio.run(main())
Start: 16:20:11
End: 16:20:21
Both tasks done: True
>>> a
[[1, 2, 3], [0, 5, 10]]

gather()
asyncio.as_completed()
coro([3, 2, 1])
coro([10, 5, 0])
gather()
>>> async def main():
...     t = asyncio.create_task(coro([3, 2, 1]))
...     t2 = asyncio.create_task(coro([10, 5, 0]))
...     print('Start:', time.strftime('%X'))
...     for res in asyncio.as_completed((t, t2)):
...         compl = await res
...         print(f'res: {compl} completed at {time.strftime(""%X"")}')
...     print('End:', time.strftime('%X'))
...     print(f'Both tasks done: {all((t.done(), t2.done()))}')
...
>>> a = asyncio.run(main())
Start: 09:49:07
res: [1, 2, 3] completed at 09:49:10
res: [0, 5, 10] completed at 09:49:17
End: 09:49:17
Both tasks done: True

asyncio.ensure_future()
create_task()
await
await
yield
yield from
await
await
async
await
async
await
asyncio
asyncio
yield from
asyncio
async
await
async
await
asyncio
async
await
asyncio.coroutine()
asyncio.run()
asyncio
asyncio.run()
asyncio
asyncio
yield from
async
await
asyncio
asyncio.semaphore
async
await
await
yield from
async
await
aiohttp
aioredis
aiopg
aiomcache
aiokafka
aiozmq
aiojobs
async_lru
uvloop
asyncpg
trio
asyncio
aiofiles
asks
asyncio-redis
aioprocessing
multiprocessing
asyncio
umongo
unsync
asyncio
aiostream
itertools
","['count', 'sleep', 'main', 'gather', 'perf_counter', 'run', 'range', 'f', 'g', 'noop', 'z', 'm', 'gen', '__await__', 'py34_coro', 'stuff', 'py35_coro', 'makerandom', 'randint', 'seed', 'part1', 'part2', 'chain', 'len', 'map', 'Queue', 'get', 'join', 'makeitem', 'urandom', 'hex', 'randsleep', 'produce', 'repeat', 'put', 'consume', 'task_done', 'create_task', 'cancel', 'ArgumentParser', 'add_argument', 'parse_args', '__next__', 'next', 'x', 'endless', 'cycle', 'send', 'mygen', 'get_event_loop', 'run_until_complete', 'close', 'is_running', 'is_closed', 'request', 'text', 'basicConfig', 'getLogger', 'compile', 'fetch_html', 'raise_for_status', 'info', 'parse', 'set', 'error', 'getattr', 'exception', 'findall', 'urljoin', 'add', 'write_one', 'open', 'write', 'bulk_crawl_and_write', 'ClientSession', 'append', 'Path', 'joinpath', 'search', 'run_in_executor', '__aenter__', '__aexit__', '__exit__', '__enter__', 'coro', 'max', 'list', 'reversed', 'type', 'done', 'all_tasks', 'ensure_future', 'strftime', 'all', 'as_completed', 'coroutine']","['asyncio', 'time', 'random', 'sys', 'itertools', 'os', 'argparse', 'cycle', 'logging', 're', 'IO', 'urllib', 'aiofiles', 'aiohttp', 'ClientSession', 'pathlib']"
31,"How do you use the multiprocessing module in Python to write concurrent programs?
","asyncio
threading
asyncio
multiprocessing
multiprocessing
Threading
asyncio
threading
asyncio
threading
x = x + 1
Asyncio
multiprocessing
multiprocessing
threading
asyncio
multiprocessing
requests
pip install requests
import requests
import time


def download_site(url, session):
    with session.get(url) as response:
        print(f""Read {len(response.content)} from {url}"")


def download_all_sites(sites):
    with requests.Session() as session:
        for url in sites:
            download_site(url, session)


if __name__ == ""__main__"":
    sites = [
        ""https://www.jython.org"",
        ""http://olympus.realpython.org/dice"",
    ] * 80
    start_time = time.time()
    download_all_sites(sites)
    duration = time.time() - start_time
    print(f""Downloaded {len(sites)} in {duration} seconds"")

download_site()
Session
requests
get()
requests
Session
requests
download_all_sites()
Session
$ ./io_non_concurrent.py
   [most output skipped]
Downloaded 160 in 14.289619207382202 seconds

threading
threading
threading
import concurrent.futures
import requests
import threading
import time


thread_local = threading.local()


def get_session():
    if not hasattr(thread_local, ""session""):
        thread_local.session = requests.Session()
    return thread_local.session


def download_site(url):
    session = get_session()
    with session.get(url) as response:
        print(f""Read {len(response.content)} from {url}"")


def download_all_sites(sites):
    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
        executor.map(download_site, sites)


if __name__ == ""__main__"":
    sites = [
        ""https://www.jython.org"",
        ""http://olympus.realpython.org/dice"",
    ] * 80
    start_time = time.time()
    download_all_sites(sites)
    duration = time.time() - start_time
    print(f""Downloaded {len(sites)} in {duration} seconds"")

threading
download_all_sites()
ThreadPoolExecutor
ThreadPoolExecutor
Thread
Pool
Executor
Thread
Pool
Executor
ThreadPoolExecutor
with
Threads
ThreadPoolExecutor
.map()
threading
Thread.start()
Thread.join()
Queue
Executors
requests.Session()
requests
threading
requests.Session()
Queue
queue
threading.Lock
ThreadPoolExecutor
threading.local()
thread_local
get_session()
thread_local = threading.local()


def get_session():
    if not hasattr(thread_local, ""session""):
        thread_local.session = requests.Session()
    return thread_local.session

local()
threading
get_session()
session
get_session()
threading
$ ./io_threading.py
   [most output skipped]
Downloaded 160 in 3.7238826751708984 seconds

threading
import concurrent.futures


counter = 0


def increment_counter(fake_value):
    global counter
    for _ in range(100):
        counter += 1


if __name__ == ""__main__"":
    fake_data = [x for x in range(5000)]
    counter = 0
    with concurrent.futures.ThreadPoolExecutor(max_workers=5000) as executor:
        executor.map(increment_counter, fake_data)

threading
counter
Counter
counter
counter += 1
counter
requests.Session()
Session
requests
asyncio
asyncio
asyncio
asyncio
asyncio
asyncio
asyncio
asyncio
threading
asyncio
async
await
async
await
await
async
await
async with
asyncio
await
async
asyncio
asyncio
aiohttp
pip install aiohttp
import asyncio
import time
import aiohttp


async def download_site(session, url):
    async with session.get(url) as response:
        print(""Read {0} from {1}"".format(response.content_length, url))


async def download_all_sites(sites):
    async with aiohttp.ClientSession() as session:
        tasks = []
        for url in sites:
            task = asyncio.ensure_future(download_site(session, url))
            tasks.append(task)
        await asyncio.gather(*tasks, return_exceptions=True)


if __name__ == ""__main__"":
    sites = [
        ""https://www.jython.org"",
        ""http://olympus.realpython.org/dice"",
    ] * 80
    start_time = time.time()
    asyncio.get_event_loop().run_until_complete(download_all_sites(sites))
    duration = time.time() - start_time
    print(f""Downloaded {len(sites)} sites in {duration} seconds"")

ThreadPoolExecutor
download_site()
download_site()
threading
async
async with
session.get()
Session
download_all_sites()
download_all_sites()
threading
asyncio.ensure_future()
asyncio.gather()
threading
ThreadPoolExecutor
AsyncioPoolExecutor
threading
asyncio
threading
__main__
asyncio
__main__
get_event_loop()
run_until_complete()
asyncio.get_event_loop().run_until_complete()
asyncio.run()
asyncio
$ ./io_asyncio.py
   [most output skipped]
Downloaded 160 in 2.5727896690368652 seconds

threading
ThreadPoolExecutor
threading
async
await
threading
asyncio
asyncio
asyncio
asyncio
requests
requests
asyncio
multiprocessing
multiprocessing
multiprocessing
import requests
import multiprocessing
import time

session = None


def set_global_session():
    global session
    if not session:
        session = requests.Session()


def download_site(url):
    with session.get(url) as response:
        name = multiprocessing.current_process().name
        print(f""{name}:Read {len(response.content)} from {url}"")


def download_all_sites(sites):
    with multiprocessing.Pool(initializer=set_global_session) as pool:
        pool.map(download_site, sites)


if __name__ == ""__main__"":
    sites = [
        ""https://www.jython.org"",
        ""http://olympus.realpython.org/dice"",
    ] * 80
    start_time = time.time()
    download_all_sites(sites)
    duration = time.time() - start_time
    print(f""Downloaded {len(sites)} in {duration} seconds"")

asyncio
threading
multiprocessing
multiprocessing
threading
asyncio
multiprocessing
multiprocessing
download_all_sites()
download_site()
multiprocessing.Pool
download_site
sites
threading
Pool
multiprocessing
Pool
Pool
multiprocessing.Pool()
initializer=set_global_session
Pool
Session
Session
initializer
initializer
download_site()
session
multiprocessing
multiprocessing
multiprocessing
session
asyncio
threading
$ ./io_mp.py
    [most output skipped]
Downloaded 160 in 5.718175172805786 seconds

multiprocessing
def cpu_bound(number):
    return sum(i * i for i in range(number))

import time


def cpu_bound(number):
    return sum(i * i for i in range(number))


def find_sums(numbers):
    for number in numbers:
        cpu_bound(number)


if __name__ == ""__main__"":
    numbers = [5_000_000 + x for x in range(20)]

    start_time = time.time()
    find_sums(numbers)
    duration = time.time() - start_time
    print(f""Duration {duration} seconds"")

cpu_bound()
$ ./cpu_non_concurrent.py
Duration 7.834432125091553 seconds

threading
asyncio
threading
asyncio
threading
asyncio
$ ./cpu_threading.py
Duration 10.407078266143799 seconds

threading
multiprocessing
multiprocessing
multiprocessing
import multiprocessing
import time


def cpu_bound(number):
    return sum(i * i for i in range(number))


def find_sums(numbers):
    with multiprocessing.Pool() as pool:
        pool.map(cpu_bound, numbers)


if __name__ == ""__main__"":
    numbers = [5_000_000 + x for x in range(20)]

    start_time = time.time()
    find_sums(numbers)
    duration = time.time() - start_time
    print(f""Duration {duration} seconds"")

import multiprocessing
multiprocessing.Pool
.map()
multiprocessing
Session
processes
multiprocessing.Pool()
Process
Pool
threading
multiprocessing.Pool
Queue
Semaphore
multiprocessing
multiprocessing
multiprocessing
$ ./cpu_mp.py
Duration 2.5175397396087646 seconds

multiprocessing
multiprocessing
multiprocessing
threading
asyncio
asyncio
threading
asyncio
asyncio
threading
asyncio
multiprocessing
","['download_site', 'get', 'len', 'download_all_sites', 'Session', 'time', 'local', 'get_session', 'hasattr', 'ThreadPoolExecutor', 'map', 'start', 'join', 'increment_counter', 'range', 'format', 'ClientSession', 'ensure_future', 'append', 'gather', 'get_event_loop', 'run_until_complete', 'run', 'set_global_session', 'current_process', 'Pool', 'cpu_bound', 'sum', 'find_sums']","['requests', 'time', 'concurrent', 'threading', 'asyncio', 'aiohttp', 'multiprocessing']"
32,"How do you use the PyYAML library in Python to read and write YAML files?
","<?xml version=""1.0"" encoding=""UTF-8"" ?>
<person firstName=""John"" lastName=""Doe"">
    <dateOfBirth>1969-12-31</dateOfBirth>
    <married>true</married>
    <spouse>
        <person firstName=""Jane"" lastName=""Doe"">
            <dateOfBirth/> <!- This is a comment -->
        </person>
    </spouse>
</person>

{
    ""person"": {
        ""dateOfBirth"": ""1969-12-31"",
        ""firstName"": ""John"",
        ""lastName"": ""Doe"",
        ""married"": true,
        ""spouse"": {
            ""dateOfBirth"": null,
            ""firstName"": ""Jane"",
            ""lastName"": ""Doe""
        }
    }
}

%YAML 1.2
---
person:
  dateOfBirth: 1969-12-31
  firstName: John
  lastName: Doe
  married: true
  spouse:
    dateOfBirth: null  # This is a comment
    firstName: Jane
    lastName: Doe

grandparent:
  parent:
    child:
      name: Bobby
    sibling:
      name: Molly

grandparent
parent
name
:
grandparent:
  parent:
    child: {name: Bobby}
    sibling: {'name': ""Molly""}

'
""
\
Don''t\n
Don''t\\n
\n
\\n
'Don''t\n'
Don't\\n
''
\n
""Don''t\n""
Don''t\n
""
\n
\r
\t
''
True
null
~
true
false
yes
no
on
off
10
0b10
0x10
0o10
010
3.14
12.5e-9
.inf
.nan
Lorem ipsum
2022-01-16
23:59
2022-01-16 23:59:59
null
NULL
Null
null
~
yes
no
[]
-
fruits: [apple, banana, orange]
veggies:
  - tomato
  - cucumber
  - onion
mushrooms:
- champignon
- truffle

:
person:
  firstName: John
  lastName: Doe
  dateOfBirth: 1969-12-31
  married: true
  spouse:
    firstName: Jane
    lastName: Smith
  children:
    - firstName: Bobby
      dateOfBirth: 1995-01-17
    - firstName: Molly
      dateOfBirth: 2001-05-14

""spouse""
-
2022-01-16 23:59:59
datetime.datetime(2022, 1, 16, 23, 59, 59)
2022-01-16
datetime.date(2022, 1, 16)
23:59:59
86399
59:59
3599
:
59:59
05:59
datetime
!!
text: !!str 2022-01-16

numbers: !!set
  ? 5
  ? 8
  ? 13

image: !!binary
  R0lGODdhCAAIAPAAAAIGAfr4+SwAA
  AAACAAIAAACDIyPeWCsClxDMsZ3CgA7

pair: !!python/tuple
  - black
  - white

center_at: !!python/complex 3.14+2.72j

person: !!python/object:package_name.module_name.ClassName
  age: 42
  first_name: John
  last_name: Doe

!!str
?
!!binary
bytes
!!python/
{
    ""text"": ""2022-01-16"",
    ""numbers"": {8, 13, 5},
    ""image"": b""GIF87a\x08\x00\x08\x00\xf0\x00…"",
    ""pair"": (""black"", ""white""),
    ""center_at"": (3.14+2.72j),
    ""person"": <package_name.module_name.ClassName object at 0x7f08bf528fd0>
}

&
*
recursive: &cycle [*cycle]

exercises:
  - muscles: &push-up
      - pectoral
      - triceps
      - biceps
  - muscles: &squat
      - glutes
      - quadriceps
      - hamstrings
  - muscles: &plank
      - abs
      - core
      - shoulders

schedule:
  monday:
    - *push-up
    - *squat
  tuesday:
    - *plank
  wednesday:
    - *push-up
    - *plank

recursive
recursive[0]
recursive
<<
shape: &shape
  color: blue

square: &square
  a: 5

rectangle:
  << : *shape
  << : *square
  b: 3
  color: green

rectangle
shape
square
b
color
text: Lorem ipsum
   dolor sit amet

   Lorem ipsum
   dolor sit amet

Lorem ipsum dolor sit amet
Lorem ipsum dolor sit amet

|
script: |
   #!/usr/bin/env python

   def main():
       print(""Hello world"")

   if __name__ == ""__main__"":
       main()

script
>
text: >
   Lorem
     ipsum
   dolor
   sit
   amet

   Lorem ipsum
   dolor sit amet

Lorem
  ipsum
dolor sit amet
Lorem ipsum dolor sit amet

---
...
json
# print_json.py

import datetime
import json

person = {
    ""firstName"": ""John"",
    ""dateOfBirth"": datetime.date(1969, 12, 31),
    ""married"": False,
    ""spouse"": None,
    ""children"": [""Bobby"", ""Molly""],
}

print(json.dumps(person, indent=4, default=str))

json.dumps()
default
str()
datetime.date
yq
shyaml
|
$ python print_json.py | yq -y .
firstName: John
dateOfBirth: '1969-12-31'
married: false
spouse: null
children:
  - Bobby
  - Molly

$ python print_json.py | shyaml get-value
firstName: John
dateOfBirth: '1969-12-31'
married: false
spouse: null
children:
- Bobby
- Molly

yq
jq
-y
yq
shyaml
yq
jq
json
(venv) $ python -m pip install pyyaml

>>> import yaml
>>> yaml.__with_libyaml__
True

yaml
>>> email_message = """"""\
... message:
...   date: 2022-01-16 12:46:17Z
...   from: john.doe@domain.com
...   to:
...     - bobby@domain.com
...     - molly@domain.com
...   cc:
...     - jane.doe@domain.com
...   subject: Friendly reminder
...   content: |
...     Dear XYZ,
...
...     Lorem ipsum dolor sit amet...
...   attachments:
...     image1.gif: !!binary
...         R0lGODdhCAAIAPAAAAIGAfr4+SwAA
...         AAACAAIAAACDIyPeWCsClxDMsZ3CgA7
... """"""

yaml.safe_load()
>>> import yaml
>>> yaml.safe_load(email_message)
{
    'message': {
        'date': datetime.datetime(2022, 1, 16, 12, 46, 17, tzinfo=(...)),
        'from': 'john.doe@domain.com',
        'to': ['bobby@domain.com', 'molly@domain.com'],
        'cc': ['jane.doe@domain.com'],
        'subject': 'Friendly reminder',
        'content': 'Dear XYZ,\n\nLorem ipsum dolor sit amet...\n',
        'attachments': {
            'image1.gif': b'GIF87a\x08\x00\x08\x00\xf0\x00\x00\x02...'
        }
    }
}

safe_load()
yaml.load()
safe_load()
>>> from yaml import load, SafeLoader
>>> load(email_message, SafeLoader)
{
    'message': {
        'date': datetime.datetime(2022, 1, 16, 12, 46, 17, tzinfo=(...)),
        'from': 'john.doe@domain.com',
        'to': ['bobby@domain.com', 'molly@domain.com'],
        'cc': ['jane.doe@domain.com'],
        'subject': 'Friendly reminder',
        'content': 'Dear XYZ,\n\nLorem ipsum dolor sit amet...\n',
        'attachments': {
            'image1.gif': b'GIF87a\x08\x00\x08\x00\xf0\x00\x00\x02...'
        }
    }
}

>>> try:
...     from yaml import CSafeLoader as SafeLoader
... except ImportError:
...     from yaml import SafeLoader

>>> SafeLoader
<class 'yaml.cyaml.CSafeLoader'>

load()
json
yaml.safe_dump()
yaml.safe_load()
>>> yaml.safe_dump(yaml.safe_load(email_message))
""message:\n  attachments:\n    image1.gif: !!binary |\n  (...)

>>> print(yaml.safe_dump(yaml.safe_load(email_message)))
message:
  attachments:
    image1.gif: !!binary |
      R0lGODdhCAAIAPAAAAIGAfr4+SwAAAAACAAIAAACDIyPeWCsClxDMsZ3CgA7
  cc:
  - jane.doe@domain.com
  content: 'Dear XYZ,


    Lorem ipsum dolor sit amet...

    '
  date: 2022-01-16 12:46:17+00:00
  from: john.doe@domain.com
  subject: Friendly reminder
  to:
  - bobby@domain.com
  - molly@domain.com

safe_dump()
yaml.load()
BaseLoader
str
list
dict
Loader
UnsafeLoader
UnsafeLoader
unsafe_load()
SafeLoader
safe_load()
!!str
FullLoader
full_load()
yaml.load()
CSafeLoader
yaml.load()
UnsafeLoader
Loader
FullLoader
SafeLoader
BaseLoader
UnsafeLoader
FullLoader
SafeLoader
!!python/tuple
BaseLoader
yaml
>>> import yaml

>>> yaml.safe_load(""""""
... Shipping Address: &shipping |
...     1111 College Ave
...     Palo Alto
...     CA 94306
...     USA
... Invoice Address: *shipping
... """""")
{
    'Shipping Address': '1111 College Ave\nPalo Alto\nCA 94306\nUSA\n',
    'Invoice Address': '1111 College Ave\nPalo Alto\nCA 94306\nUSA\n'
}

&shipping
*shipping
>>> yaml.safe_load(""""""
... number: 3.14
... string: !!str 3.14
... """""")
{'number': 3.14, 'string': '3.14'}

>>> from yaml import BaseLoader
>>> yaml.load(""""""
... number: 3.14
... string: !!str 3.14
... """""", BaseLoader)
{'number': '3.14', 'string': '3.14'}

3.14
!!str
BaseLoader
FullLoader
UnsafeLoader
>>> yaml.full_load(""""""
... list: [1, 2]
... tuple: !!python/tuple [1, 2]
... """""")
{'list': [1, 2], 'tuple': (1, 2)}

!!python/tuple
>>> yaml.safe_load(""""""
... married: false
... spouse: null
... date_of_birth: 1980-01-01
... age: 42
... kilograms: 80.7
... """""")
{
    'married': False,
    'spouse': None,
    'date_of_birth': datetime.date(1980, 1, 1),
    'age': 42,
    'kilograms': 80.7
}

bool
None
datetime.date
int
float
BaseLoader
UnsafeLoader
UnsafeLoader
!!python/object
!!python/object/new
!!python/object/apply
# Flow style:
!!python/object:models.Person {first_name: John, last_name: Doe}

# Block style:
!!python/object:models.Person
  first_name: John
  last_name: Doe

!!python/object/new
!!python/object/apply
!!python/object/new
.__new__()
.__init__()
!!python/object/apply
# Flow style:
!!python/object/apply:models.Person [John, Doe]

# Block style:
!!python/object/apply:models.Person
  - John
  - Doe

.__init__()
Person
!!python/object/apply:models.Person
args: [John]
kwds: {last_name: Doe}

.__init__()
Person
# models.py

from dataclasses import dataclass

@dataclass
class Person:
   first_name: str
   last_name: str

!!python/object/apply
os
subprocess
>>> import yaml
>>> yaml.unsafe_load(""""""
... !!python/object/apply:subprocess.getoutput
...     - cat ~/.ssh/id_rsa
... """""")
'-----BEGIN RSA PRIVATE KEY-----\njC7PbMIIEow...

# models.py

class User:
    def __init__(self, name):
        self.name = name

User
models.py
!!python/object
.__new__()
.__init__()
.__dict__
>>> import yaml

>>> user = yaml.unsafe_load(""""""
... !!python/object:models.User
... no_such_attribute: 42
... """""")

>>> user
<models.User object at 0x7fe8adb12050>

>>> user.no_such_attribute
42

>>> user.name
Traceback (most recent call last):
  ...
AttributeError: 'User' object has no attribute 'name'

User
.name
.no_such_attribute
__slots__
# models.py

class User:
    __slots__ = [""name""]

    def __init__(self, name):
        self.name = name

.__dict__
.__dict__
setattr()
__slots__
User
.__setstate__()
# models.py

import codecs

class User:
    __slots__ = [""name""]

    def __init__(self, name):
        self.name = name

    def __setstate__(self, state):
        self.name = codecs.decode(state[""name""], ""rot13"")

hashlib
>>> user = yaml.unsafe_load(""""""
... !!python/object:models.User
... name: Wbua Qbr
... """""")

>>> user.name
'John Doe'

.__setstate__()
'John Doe'
!!python/name
!!python/module
safe_load()
bytes
>>> import yaml

>>> yaml.safe_load(""name: Иван"")
{'name': 'Иван'}

>>> yaml.safe_load(b""name: \xd0\x98\xd0\xb2\xd0\xb0\xd0\xbd"")
{'name': 'Иван'}

>>> yaml.safe_load(""name: Иван"".encode(""utf-8""))
{'name': 'Иван'}

>>> yaml.safe_load(""name: Иван"".encode(""utf-16""))
{'name': 'Иван'}

>>> yaml.safe_load(""name: Иван"".encode(""utf-32""))
Traceback (most recent call last):
  ...
yaml.reader.ReaderError: unacceptable character #x0000:
special characters are not allowed
  in ""<byte string>"", position 1

str.encode()
str.decode()
>>> with open(""sample.yaml"", mode=""wb"") as file:
...     file.write(b""name: \xd0\x98\xd0\xb2\xd0\xb0\xd0\xbd"")
...
14

>>> with open(""sample.yaml"", mode=""rt"", encoding=""utf-8"") as file:
...     print(yaml.safe_load(file))
...
{'name': 'Иван'}

>>> with open(""sample.yaml"", mode=""rb"") as file:
...     print(yaml.safe_load(file))
...
{'name': 'Иван'}

sample.yaml
safe_load()
>>> import io

>>> yaml.safe_load(io.StringIO(""name: Иван""))
{'name': 'Иван'}

>>> yaml.safe_load(io.BytesIO(b""name: \xd0\x98\xd0\xb2\xd0\xb0\xd0\xbd""))
{'name': 'Иван'}

json
>>> import yaml

>>> stream = """"""\
... ---
... 3.14
... ---
... name: John Doe
... age: 53
... ---
... - apple
... - banana
... - orange
... """"""

>>> for document in yaml.safe_load_all(stream):
...     print(document)
...
3.14
{'name': 'John Doe', 'age': 53}
['apple', 'banana', 'orange']

---
...
json
yaml.dump()
yaml.Dumper
BaseDumper
dump(Dumper=BaseDumper)
SafeDumper
safe_dump()
!!str
Dumper
dump()
Dumper
SafeDumper
BaseDumper
yaml.Dumper
>>> import yaml
>>> print(yaml.dump(3.14, Dumper=yaml.Dumper))
3.14
...

>>> print(yaml.dump(3.14, Dumper=yaml.CDumper))
3.14

json.dump()
json.dumps()
>>> data = {""name"": ""John""}

>>> import yaml
>>> yaml.dump(data)
'name: John\n'

>>> import io
>>> stream = io.StringIO()
>>> print(yaml.dump(data, stream))
None

>>> stream.getvalue()
'name: John\n'

None
yaml.dump()
>>> with open(""/path/to/file.yaml"", mode=""wt"", encoding=""utf-8"") as file:
...     yaml.dump(data, file)

>>> with open(""/path/to/file.yaml"", mode=""wb"") as file:
...     yaml.dump(data, file, encoding=""utf-8"")

yaml.dump()
dump()
safe_dump()
>>> import yaml
>>> print(yaml.dump([
...     {""title"": ""Document #1""},
...     {""title"": ""Document #2""},
...     {""title"": ""Document #3""},
... ]))
- title: 'Document #1'
- title: 'Document #2'
- title: 'Document #3'

dump_all()
safe_dump_all()
>>> print(yaml.dump_all([
...     {""title"": ""Document #1""},
...     {""title"": ""Document #2""},
...     {""title"": ""Document #3""},
... ]))
title: 'Document #1'
---
title: 'Document #2'
---
title: 'Document #3'

---
dump_all()
dump()
safe_dump()
yaml.dump_all()
def dump(data, stream=None, Dumper=Dumper, **kwargs): ...
def safe_dump(data, stream=None, **kwargs): ...
def safe_dump_all(documents, stream=None, **kwargs): ...

SafeDumper
yaml.dump_all()
None
False
sort_keys
True
allow_unicode
canonical
default_flow_style
explicit_end
...
explicit_start
---
sort_keys
indent
int
width
int
default_style
str
None
""'""
'""'
encoding
str
bytes
str
line_break
str
'\r'
'\n'
'\r\n'
tags
dict
version
tuple
(1, 2)
tags
{""!model!"": ""tag:yaml.org,2002:python/object:models.""}

%TAG !model! tag:yaml.org,2002:python/object:models.
---
- !model!Person
    first_name: John
    last_name: Doe

- !!python/object:models.Person
    first_name: John
    last_name: Doe

- !<tag:yaml.org,2002:python/object:models.Person>
    first_name: John
    last_name: Doe

%TAG
!model!
!!
tag:yaml.org,2002:
tags
yaml.dump()
{
    ""person"": {
        ""name_latin"": ""Ivan"",
        ""name"": ""Иван"",
        ""age"": 42,
    }
}

(venv) $ python -m pip install fastapi uvicorn
(venv) $ uvicorn server:app

>>> import yaml
>>> yaml.safe_dump(complex(3, 2))
Traceback (most recent call last):
  ...
yaml.representer.RepresenterError: ('cannot represent an object', (3+2j))

>>> yaml.dump(complex(3, 2))
""!!python/complex '3.0+2.0j'\n""

yaml.dump()
Dump
!!python/complex
>>> class Person:
...     def __init__(self, first_name, last_name):
...         self.first_name = first_name
...         self.last_name = last_name
...
>>> yaml.safe_dump(Person(""John"", ""Doe""))
Traceback (most recent call last):
  ...
yaml.representer.RepresenterError: ('cannot represent an object',
  <__main__.Person object at 0x7f55a671e8f0>)

>>> yaml.dump(Person(""John"", ""Doe""))
!!python/object:__main__.Person
first_name: John
last_name: Doe

yaml.dump()
>>> class Person(yaml.YAMLObject):
...     yaml_tag = ""!Person""
...     yaml_loader = yaml.SafeLoader
...     def __init__(self, first_name, last_name):
...         self.first_name = first_name
...         self.last_name = last_name

yaml.YAMLObject
Person
yaml.safe_load()
>>> print(jdoe := yaml.dump(Person(""John"", ""Doe"")))
!Person
first_name: John
last_name: Doe

>>> yaml.safe_load(jdoe)
<__main__.Person object at 0x7f6fb7ba9ab0>

:=
print()
yaml.scan()
yaml.parse()
yaml.compose()
yaml.compose_all()
yaml.Loader
yaml.emit()
yaml.emit(yaml.parse(data))
yaml.serialize()
yaml.serialize(yaml.compose(data))
yaml.serialize_all()
yaml.serialize_all(yaml.compose_all(data))
>>> import yaml
>>> for token in yaml.scan(""Lorem ipsum"", yaml.SafeLoader):
...     print(token)
...     print(token.start_mark)
...     print(token.end_mark)
...
StreamStartToken(encoding=None)
  in ""<unicode string>"", line 1, column 1:
    Lorem ipsum
    ^
  in ""<unicode string>"", line 1, column 1:
    Lorem ipsum
    ^
ScalarToken(plain=True, style=None, value='Lorem ipsum')
  in ""<unicode string>"", line 1, column 1:
    Lorem ipsum
    ^
  in ""<unicode string>"", line 1, column 12:
    Lorem ipsum
               ^
StreamEndToken()
  in ""<unicode string>"", line 1, column 12:
    Lorem ipsum
               ^
  in ""<unicode string>"", line 1, column 12:
    Lorem ipsum
               ^

.start_mark
.end_mark
colorize.py
 1# colorize.py
 2
 3import yaml
 4
 5def tokenize(text, loader=yaml.SafeLoader):
 6    last_token = yaml.ValueToken(None, None)
 7    for token in yaml.scan(text, loader):
 8        start = token.start_mark.index
 9        end = token.end_mark.index
10        if isinstance(token, yaml.TagToken):
11            yield start, end, token
12        elif isinstance(token, yaml.ScalarToken):
13            yield start, end, last_token
14        elif isinstance(token, (yaml.KeyToken, yaml.ValueToken)):
15            last_token = token

yaml.scan()
start
end
last_token
>>> from colorize import tokenize
>>> for token in tokenize(""key: !!str value""):
...     print(token)
...
(0, 3, KeyToken())
(5, 10, TagToken(value=('!!', 'str')))
(11, 16, ValueToken())

ESC[34;1m
ESC[36m
ESC[31m
# colorize.py

import yaml

def colorize(text):
    colors = {
        yaml.KeyToken: lambda x: f""\033[34;1m{x}\033[0m"",
        yaml.ValueToken: lambda x: f""\033[36m{x}\033[0m"",
        yaml.TagToken: lambda x: f""\033[31m{x}\033[0m"",
    }

    for start, end, token in reversed(list(tokenize(text))):
        color = colors.get(type(token), lambda text: text)
        text = text[:start] + color(text[start:end]) + text[end:]

    return text

# ...

start
end
# colorize.py

import sys
import yaml

# ...

if __name__ == ""__main__"":
    print(colorize("""".join(sys.stdin.readlines())))

sys
sys.stdin
colorize()
cat
type
cmd.exe
# colorize.py

import sys
import yaml

def colorize(text):
    colors = {
        yaml.KeyToken: lambda x: f""\033[34;1m{x}\033[0m"",
        yaml.ValueToken: lambda x: f""\033[36m{x}\033[0m"",
        yaml.TagToken: lambda x: f""\033[31m{x}\033[0m"",
    }

    for start, end, token in reversed(list(tokenize(text))):
        color = colors.get(type(token), lambda text: text)
        text = text[:start] + color(text[start:end]) + text[end:]

    return text

def tokenize(text, loader=yaml.SafeLoader):
    last_token = yaml.ValueToken(None, None)
    for token in yaml.scan(text, loader):
        start = token.start_mark.index
        end = token.end_mark.index
        if isinstance(token, yaml.TagToken):
            yield start, end, token
        elif isinstance(token, yaml.ScalarToken):
            yield start, end, last_token
        elif isinstance(token, (yaml.KeyToken, yaml.ValueToken)):
            last_token = token

if __name__ == ""__main__"":
    print(colorize("""".join(sys.stdin.readlines())))

>>> import yaml
>>> for event in yaml.parse(""[42, {pi: 3.14, e: 2.72}]"", yaml.SafeLoader):
...     print(event)
...
StreamStartEvent()
DocumentStartEvent()
SequenceStartEvent(anchor=None, tag=None, implicit=True)
ScalarEvent(anchor=None, tag=None, implicit=(True, False), value='42')
MappingStartEvent(anchor=None, tag=None, implicit=True)
ScalarEvent(anchor=None, tag=None, implicit=(True, False), value='pi')
ScalarEvent(anchor=None, tag=None, implicit=(True, False), value='3.14')
ScalarEvent(anchor=None, tag=None, implicit=(True, False), value='e')
ScalarEvent(anchor=None, tag=None, implicit=(True, False), value='2.72')
MappingEndEvent()
SequenceEndEvent()
DocumentEndEvent()
StreamEndEvent()

<ul>
  <li>42</li>
  <li>
    <dl>
      <dt>pi</dt>
      <dd>3.14</dd>
      <dt>e</dt>
      <dd>2.72</dd>
    </dl>
  </li>
</ul>

<li>
</li>
<dl>
<dt>
<dd>
HTMLBuilder
yaml2html.py
# yaml2html.py

import yaml

# ...

def yaml2html(stream, loader=yaml.SafeLoader):
    builder = HTMLBuilder()
    for event in yaml.parse(stream, loader):
        builder.process(event)
        if isinstance(event, yaml.DocumentEndEvent):
            yield builder.html
            builder = HTMLBuilder()

>>> from yaml2html import yaml2html
>>> for document in yaml2html(""""""
... ---
... title: ""Document #1""
... ---
... title: ""Document #2""
... ---
... title: ""Document #3""
... """"""):
...     print(document)
...
<dl><dt>title</dt><dd>Document #1</dd></dl>
<dl><dt>title</dt><dd>Document #2</dd></dl>
<dl><dt>title</dt><dd>Document #3</dd></dl>

HTMLBuilder
# yaml2html.py

import yaml

class HTMLBuilder:
    def __init__(self):
        self._context = []
        self._html = []

    @property
    def html(self):
        return """".join(self._html)

# ...

SequenceStartEvent
SequenceEndEvent
 1# yaml2html.py
 2
 3import yaml
 4
 5from yaml import (
 6    ScalarEvent,
 7    SequenceStartEvent,
 8    SequenceEndEvent,
 9    MappingStartEvent,
10    MappingEndEvent,
11)
12
13OPEN_TAG_EVENTS = (ScalarEvent, SequenceStartEvent, MappingStartEvent)
14CLOSE_TAG_EVENTS = (ScalarEvent, SequenceEndEvent, MappingEndEvent)
15
16class HTMLBuilder:
17    # ...
18
19    def process(self, event):
20
21        if isinstance(event, OPEN_TAG_EVENTS):
22            self._handle_tag()
23
24        if isinstance(event, ScalarEvent):
25            self._html.append(event.value)
26        elif isinstance(event, SequenceStartEvent):
27            self._html.append(""<ul>"")
28            self._context.append(list)
29        elif isinstance(event, SequenceEndEvent):
30            self._html.append(""</ul>"")
31            self._context.pop()
32        elif isinstance(event, MappingStartEvent):
33            self._html.append(""<dl>"")
34            self._context.append(0)
35        elif isinstance(event, MappingEndEvent):
36            self._html.append(""</dl>"")
37            self._context.pop()
38
39        if isinstance(event, CLOSE_TAG_EVENTS):
40            self._handle_tag(close=True)
41# ...

._handle_tag()
# yaml2html.py

import yaml

# ...

class HTMLBuilder:
    # ...

    def _handle_tag(self, close=False):
        if len(self._context) > 0:
            if self._context[-1] is list:
                self._html.append(""</li>"" if close else ""<li>"")
            else:
                if self._context[-1] % 2 == 0:
                    self._html.append(""</dt>"" if close else ""<dt>"")
                else:
                    self._html.append(""</dd>"" if close else ""<dd>"")
                if close:
                    self._context[-1] += 1
# ...

if __name__
# yaml2html.py

import sys

# ...

if __name__ == ""__main__"":
    print("""".join(yaml2html("""".join(sys.stdin.readlines()))))

$ echo '[42, {pi: 3.14, e: 2.72}]' | python yaml2html.py | html2text
    * 42
    *   pi
            3.14
        e
            2.72

echo
|
yaml2html.py
# yaml2html.py

import sys
import yaml

from yaml import (
    ScalarEvent,
    SequenceStartEvent,
    SequenceEndEvent,
    MappingStartEvent,
    MappingEndEvent,
)

OPEN_TAG_EVENTS = (ScalarEvent, SequenceStartEvent, MappingStartEvent)
CLOSE_TAG_EVENTS = (ScalarEvent, SequenceEndEvent, MappingEndEvent)

class HTMLBuilder:
    def __init__(self):
        self._context = []
        self._html = []

    @property
    def html(self):
        return """".join(self._html)

    def process(self, event):

        if isinstance(event, OPEN_TAG_EVENTS):
            self._handle_tag()

        if isinstance(event, ScalarEvent):
            self._html.append(event.value)
        elif isinstance(event, SequenceStartEvent):
            self._html.append(""<ul>"")
            self._context.append(list)
        elif isinstance(event, SequenceEndEvent):
            self._html.append(""</ul>"")
            self._context.pop()
        elif isinstance(event, MappingStartEvent):
            self._html.append(""<dl>"")
            self._context.append(0)
        elif isinstance(event, MappingEndEvent):
            self._html.append(""</dl>"")
            self._context.pop()

        if isinstance(event, CLOSE_TAG_EVENTS):
            self._handle_tag(close=True)

    def _handle_tag(self, close=False):
        if len(self._context) > 0:
            if self._context[-1] is list:
                self._html.append(""</li>"" if close else ""<li>"")
            else:
                if self._context[-1] % 2 == 0:
                    self._html.append(""</dt>"" if close else ""<dt>"")
                else:
                    self._html.append(""</dd>"" if close else ""<dd>"")
                if close:
                    self._context[-1] += 1

def yaml2html(stream, loader=yaml.SafeLoader):
    builder = HTMLBuilder()
    for event in yaml.parse(stream, loader):
        builder.process(event)
        if isinstance(event, yaml.DocumentEndEvent):
            yield builder.html
            builder = HTMLBuilder()

if __name__ == ""__main__"":
    print("""".join(yaml2html("""".join(sys.stdin.readlines()))))

yaml.compose()
>>> import yaml
>>> root = yaml.compose(""[42, {pi: 3.14, e: 2.72}]"", yaml.SafeLoader)
>>> root
SequenceNode(
    tag='tag:yaml.org,2002:seq',
    value=[
        ScalarNode(tag='tag:yaml.org,2002:int', value='42'),
        MappingNode(
            tag='tag:yaml.org,2002:map',
            value=[
                (
                    ScalarNode(tag='tag:yaml.org,2002:str', value='pi'),
                    ScalarNode(tag='tag:yaml.org,2002:float', value='3.14')
                ),
                (
                    ScalarNode(tag='tag:yaml.org,2002:str', value='e'),
                    ScalarNode(tag='tag:yaml.org,2002:float', value='2.72')
                )
            ]
        )
    ]
)

.value
>>> key, value = root.value[1].value[0]

>>> key
ScalarNode(tag='tag:yaml.org,2002:str', value='pi')

>>> value
ScalarNode(tag='tag:yaml.org,2002:float', value='3.14')

ScalarNode
SequenceNode
MappingNode
# tree.py

import yaml

def visit(node):
    if isinstance(node, yaml.ScalarNode):
        return node.value
    elif isinstance(node, yaml.SequenceNode):
        return [visit(child) for child in node.value]
    elif isinstance(node, yaml.MappingNode):
        return {visit(key): visit(value) for key, value in node.value}

tree.py
>>> from tree import visit
>>> visit(root)
['42', {'pi': '3.14', 'e': '2.72'}]

.tag
""tag:yaml.org,2002:float""
:
cast()
# tree.py

import base64
import datetime
import yaml

def visit(node):
    if isinstance(node, yaml.ScalarNode):
        return cast(node.value, node.tag)
    elif isinstance(node, yaml.SequenceNode):
        return [visit(child) for child in node.value]
    elif isinstance(node, yaml.MappingNode):
        return {visit(key): visit(value) for key, value in node.value}

def cast(value, tag):
    match tag.split("":"")[-1]:
        case ""null"":
            return None
        case ""bool"":
            return bool(value)
        case ""int"":
            return int(value)
        case ""float"":
            return float(value)
        case ""timestamp"":
            return datetime.datetime.fromisoformat(value)
        case ""binary"":
            return base64.decodebytes(value.encode(""utf-8""))
        case _:
            return str(value)

match
case
if
>>> import importlib, tree
>>> importlib.reload(tree)
<module 'tree' from '/home/realpython/tree.py'>

>>> visit(root)
[42, {'pi': 3.14, 'e': 2.72}]

>>> visit(yaml.compose(""when: 2022-01-16 23:59:59""))
{'when': datetime.datetime(2022, 1, 16, 23, 59, 59)}

visit()
# tree.py

import base64
import datetime
import yaml

def visit(node):
    if isinstance(node, yaml.ScalarNode):
        return cast(node.value, node.tag)
    elif isinstance(node, yaml.SequenceNode):
        return html_list(node)
    elif isinstance(node, yaml.MappingNode):
        return html_map(node)

# ...

def html_list(node):
    items = """".join(f""<li>{visit(child)}</li>"" for child in node.value)
    return f'<ul class=""sequence"">{items}</ul>'

def html_map(node):
    pairs = """".join(
        f'<li><span class=""key"">{visit(key)}:</span> {visit(value)}</li>'
        if isinstance(value, yaml.ScalarNode) else (
            ""<li>""
            ""<details>""
            f'<summary class=""key"">{visit(key)}</summary> {visit(value)}'
            ""</details>""
            ""</li>""
        )
        for key, value in node.value
    )
    return f""<ul>{pairs}</ul>""

html_list()
SequenceNode
html_map()
MappingNode
ScalarNode
<span>
<details>
<img>
<span>
<div>
# tree.py

import yaml

# ...

def cast(value, tag):
    match tag.split("":"")[-1]:
        case ""binary"":
            return f'<img src=""data:image/png;base64, {value}"" />'
        case _:
            if ""\n"" in value:
                return f'<div class=""multiline"">{value}</div>'
            else:
                return f""<span>{value}</span>""

src
<img>
base64
datetime
html_tree()
# tree.py

import sys
import yaml

def html_tree(stream, loader=yaml.SafeLoader):
    body = visit(yaml.compose(stream, loader))
    return (
        ""<!DOCTYPE html>""
        ""<html>""
        ""<head>""
        ""  <meta charset=\""utf-8\"">""
        ""  <title>YAML Tree Preview</title>""
        ""  <link href=\""https://fonts.googleapis.com/css2""
        ""?family=Roboto+Condensed&display=swap\"" rel=\""stylesheet\"">""
        ""  <style>""
        ""    * { font-family: 'Roboto Condensed', sans-serif; }""
        ""    ul { list-style: none; }""
        ""    ul.sequence { list-style: '- '; }""
        ""    .key { font-weight: bold; }""
        ""    .multiline { white-space: pre; }""
        ""  </style>""
        ""</head>""
        f""<body>{body}</body></html>""
    )

# ...

if __name__ == ""__main__"":
    print(html_tree("""".join(sys.stdin.readlines())))

C:\> type data.yaml | python tree.py > index.html
C:\> start index.html

$ cat data.yaml | python tree.py > index.html
$ xdg-open index.html

$ cat data.yaml | python tree.py > index.html
$ open index.html

# tree.py

import sys
import yaml

def html_tree(stream, loader=yaml.SafeLoader):
    body = visit(yaml.compose(stream, loader))
    return (
        ""<!DOCTYPE html>""
        ""<html>""
        ""<head>""
        ""  <meta charset=\""utf-8\"">""
        ""  <title>YAML Tree Preview</title>""
        ""  <link href=\""https://fonts.googleapis.com/css2""
        ""?family=Roboto+Condensed&display=swap\"" rel=\""stylesheet\"">""
        ""  <style>""
        ""    * { font-family: 'Roboto Condensed', sans-serif; }""
        ""    ul { list-style: none; }""
        ""    ul.sequence { list-style: '- '; }""
        ""    .key { font-weight: bold; }""
        ""    .multiline { white-space: pre; }""
        ""  </style>""
        ""</head>""
        f""<body>{body}</body></html>""
    )

def visit(node):
    if isinstance(node, yaml.ScalarNode):
        return cast(node.value, node.tag)
    elif isinstance(node, yaml.SequenceNode):
        return html_list(node)
    elif isinstance(node, yaml.MappingNode):
        return html_map(node)

def cast(value, tag):
    match tag.split("":"")[-1]:
        case ""binary"":
            return f'<img src=""data:image/png;base64, {value}"" />'
        case _:
            if ""\n"" in value:
                return f'<div class=""multiline"">{value}</div>'
            else:
                return f""<span>{value}</span>""

def html_list(node):
    items = """".join(f""<li>{visit(child)}</li>"" for child in node.value)
    return f'<ul class=""sequence"">{items}</ul>'

def html_map(node):
    pairs = """".join(
        f'<li><span class=""key"">{visit(key)}:</span> {visit(value)}</li>'
        if isinstance(value, yaml.ScalarNode) else (
            ""<li>""
            ""<details>""
            f'<summary class=""key"">{visit(key)}</summary> {visit(value)}'
            ""</details>""
            ""</li>""
        )
        for key, value in node.value
    )
    return f""<ul>{pairs}</ul>""

if __name__ == ""__main__"":
    print(html_tree("""".join(sys.stdin.readlines())))

yaml.emit()
yaml.serialize()
","['datetime', 'date', 'main', 'dumps', 'str', 'safe_load', 'load', 'safe_dump', 'unsafe_load', 'full_load', '__new__', '__init__', 'setattr', '__setstate__', 'decode', 'encode', 'open', 'write', 'StringIO', 'BytesIO', 'safe_load_all', 'dump', 'getvalue', 'dump_all', 'safe_dump_all', 'complex', 'Person', 'scan', 'parse', 'compose', 'compose_all', 'emit', 'serialize', 'serialize_all', 'StreamStartToken', 'ScalarToken', 'StreamEndToken', 'tokenize', 'ValueToken', 'isinstance', 'KeyToken', 'TagToken', 'colorize', 'reversed', 'list', 'get', 'type', 'color', 'join', 'readlines', 'StreamStartEvent', 'DocumentStartEvent', 'SequenceStartEvent', 'ScalarEvent', 'MappingStartEvent', 'MappingEndEvent', 'SequenceEndEvent', 'DocumentEndEvent', 'StreamEndEvent', 'yaml2html', 'HTMLBuilder', 'process', 'html', '_handle_tag', 'append', 'pop', 'len', 'SequenceNode', 'ScalarNode', 'MappingNode', 'visit', 'cast', 'split', 'bool', 'int', 'float', 'fromisoformat', 'decodebytes', 'reload', 'html_list', 'html_map', 'html_tree']","['datetime', 'json', 'yaml', 'load', 'CSafeLoader', 'SafeLoader', 'BaseLoader', 'dataclass', 'codecs', 'io', 'tokenize', 'sys', 'yaml2html', 'visit', 'base64', 'importlib']"
33,"How do you use the Pillow library in Python to work with images?
","from
PIL 
import
Image
# Location of the image
img 
=
Image.
open
(
""geek.jpg""
)
img.show()
from
PIL 
import
Image
# Location of the image
img 
=
Image.
open
(
""geek.jpg""
)
# size of the image
print
(img.size)
# format of the image
print
(img.
format
)
from
PIL 
import
Image
# Location of the image
img 
=
Image.
open
(
""geek.jpg""
)
# mode of the image
print
(img.mode)
# Importing Image module from
# PIL package
from
PIL 
import
Image
import
PIL
# creating a image object (main image)
im1 
=
Image.
open
(r
""geek.jpg""
)
# rotating a image 90 deg counter clockwise
im1 
=
im1.rotate(
90
, PIL.Image.NEAREST, expand 
=
1
)
# to show specified image
im1.show()
# importing PIL Module
from
PIL 
import
Image
# open the original image
original_img 
=
Image.
open
(
""geek.jpg""
)
# Flip the original image vertically
vertical_img 
=
original_img.transpose(method
=
Image.FLIP_TOP_BOTTOM)
vertical_img.save(
""vertical.png""
)
vertical_img.show()
# close all our files object
original_img.close()
vertical_img.close()
# Importing Image class from PIL module
from
PIL 
import
Image
# Opens a image in RGB mode
im 
=
Image.
open
(r
""geek.jpg""
)
# Size of the image in pixels
# (size of original image)
# (This is not mandatory)
width, height 
=
im.size
# Setting the points for cropped image
left 
=
4
top 
=
height 
/
5
right 
=
154
bottom 
=
3
*
height 
/
5
# Cropped image of above dimension
# (It will not change original image)
im1 
=
im.crop((left, top, right, bottom))
newsize 
=
(
300
, 
300
)
im1 
=
im1.resize(newsize)
# Shows the image in image viewer
im1.show()
from
PIL 
import
Image
size 
=
(
40
, 
40
)
img 
=
Image.
open
(r
""geek.jpg""
)
print
(
""Original size of the image""
)
print
(img.size)
# resizing the image
r_img 
=
img.resize(size, resample 
=
Image.BILINEAR)
# resized_test.png => Destination_path
r_img.save(
""resized_test.jpg""
)
# Opening the new image
img 
=
Image.
open
(r
""resized_test.jpg""
)
print
(
""\nNew size of the image""
)
print
(img.size)
# importing Image class from PIL package
from
PIL 
import
Image
# creating a object
image 
=
Image.
open
(r
""geek.jpg""
)
image.load()
# Splitting the image into individual
# bands
r, g, b, 
=
image.split()
# merge function used
im1 
=
Image.merge(
'RGB'
, (g, b, r))
im1.show()
from
PIL 
import
Image
img_01 
=
Image.
open
(
""digit-number-img-0.jpg""
)
img_02 
=
Image.
open
(
""digit-number-img-1.jpg""
)
img_03 
=
Image.
open
(
""digit-number-img-2.jpg""
)
img_04 
=
Image.
open
(
""digit-number-img-3.jpg""
)
img_01_size 
=
img_01.size
img_02_size 
=
img_02.size
img_03_size 
=
img_02.size
img_02_size 
=
img_02.size
print
(
'img 1 size: '
, img_01_size)
print
(
'img 2 size: '
, img_02_size)
print
(
'img 3 size: '
, img_03_size)
print
(
'img 4 size: '
, img_03_size)
new_im 
=
Image.new(
'RGB'
, (
2
*
img_01_size[
0
],
2
*
img_01_size[
1
]), (
250
,
250
,
250
))
new_im.paste(img_01, (
0
,
0
))
new_im.paste(img_02, (img_01_size[
0
],
0
))
new_im.paste(img_03, (
0
,img_01_size[
1
]))
new_im.paste(img_04, (img_01_size[
0
],img_01_size[
1
]))
new_im.save(
""merged_images.png""
, 
""PNG""
)
new_im.show()
# importing Image class from PIL package
from
PIL 
import
Image
# creating a object
image 
=
Image.
open
(r
""image.jpg""
)
MAX_SIZE 
=
(
100
, 
100
)
# Creating the thumbnail
image.thumbnail(MAX_SIZE)
image.show()
# Importing Image class from PIL module
from
PIL 
import
Image
# Opens a image in RGB mode
im 
=
Image.
open
(r
""geek.jpg""
)
# Size of the image in pixels
# (size of original image)
# (This is not mandatory)
width, height 
=
im.size
# Setting the points for cropped image
left 
=
5
top 
=
height 
/
4
right 
=
164
bottom 
=
3
*
height 
/
4
# Cropped image of above dimension
# (It will not change original image)
im1 
=
im.crop((left, top, right, bottom))
# Shows the image in image viewer
im1.show()
# Importing Image class from PIL module
from
PIL 
import
Image
# Opens a image in RGB mode
im 
=
Image.
open
(r
""geek.jpg""
)
# Blurring the image
im1 
=
im.
filter
(ImageFilter.BLUR)
# Shows the image in image viewer
im1.show()
# Importing Image class from PIL module
from
PIL 
import
Image
# Opens a image in RGB mode
im 
=
Image.
open
(r
""geek.jpg""
)
# Blurring the image
im1 
=
im.
filter
(ImageFilter.GaussianBlur(
4
))
# Shows the image in image viewer
im1.show()
# Importing Image class from PIL module
from
PIL 
import
Image
# Opens a image in RGB mode
im 
=
Image.
open
(r
""geek.jpg""
)
# Blurring the image
im1 
=
im.
filter
(ImageFilter.BoxBlur(
4
))
# Shows the image in image viewer
im1.show()
# import all the libraries
from
PIL 
import
Image
from
PIL 
import
ImageFont
from
PIL 
import
ImageDraw
# image opening
image 
=
Image.
open
(
""image.jpg""
)
# creating a copy of original image
watermark_image 
=
image.copy()
# Image is converted into editable form using
# Draw function and assigned to draw
draw 
=
ImageDraw.Draw(watermark_image)
# (""font type"",font size)
font 
=
ImageFont.truetype(
""DroidSans.ttf""
, 
50
)
# Decide the text location, color and font
# (255,255,255)-White color text
draw.text((
0
, 
0
), 
""GeeksforGeeks""
, (
255
, 
255
, 
255
), font
=
font)
watermark_image.show()
# Importing Image and ImageFont, ImageDraw
# module from PIL package
from
PIL 
import
Image, ImageFont, ImageDraw
# creating a image object
image 
=
Image.
open
(r
'geek.jpg'
)
draw 
=
ImageDraw.Draw(image)
# specified font size
font 
=
ImageFont.truetype(r
'DroidSans.ttf'
, 
15
)
text 
=
u
""""""\
Geeks
FOR \n Geeks""""""
# drawing text size
draw.text((
6
, 
8
), text, fill 
=
""red""
, font 
=
font, align 
=
""right""
)
image.show()
# importing image object from PIL
import
math
from
PIL 
import
Image, ImageDraw
w, h 
=
220
, 
190
shape 
=
[(
40
, 
40
), (w 
-
10
, h 
-
10
)]
# creating new Image object
img 
=
Image.new(
""RGB""
, (w, h))
# create line image
img1 
=
ImageDraw.Draw(img)
img1.line(shape, fill
=
""none""
, width
=
0
)
img.show()
# importing image object from PIL
import
math
from
PIL 
import
Image, ImageDraw
w, h 
=
220
, 
190
shape 
=
[(
40
, 
40
), (w 
-
10
, h 
-
10
)]
# creating new Image object
img 
=
Image.new(
""RGB""
, (w, h))
# create rectangle image
img1 
=
ImageDraw.Draw(img)
img1.rectangle(shape, fill
=
""# ffff33""
, outline
=
""red""
)
img.show()
import
math
from
PIL 
import
Image, ImageDraw
from
PIL 
import
ImagePath
side 
=
8
xy 
=
[
    
((math.cos(th) 
+
1
) 
*
90
,
     
(math.sin(th) 
+
1
) 
*
60
)
    
for
th 
in
[i 
*
(
2
*
math.pi) 
/
side 
for
i 
in
range
(side)]
]
image 
=
ImagePath.Path(xy).getbbox()
size 
=
list
(
map
(
int
, 
map
(math.ceil, image[
2
:])))
img 
=
Image.new(
""RGB""
, size, 
""# f9f9f9""
)
img1 
=
ImageDraw.Draw(img)
img1.polygon(xy, fill
=
""# eeeeff""
, outline
=
""blue""
)
img.show()
# This will import Image and ImageEnhance modules
from
PIL 
import
Image, ImageEnhance
# Opening Image
im 
=
Image.
open
(r
""geek.jpg""
)
# Creating object of Color class
im3 
=
ImageEnhance.Color(im)
# showing resultant image
im3.enhance(
5.0
).show()
# This will import Image and ImageEnhance modules
from
PIL 
import
Image, ImageEnhance
# Opening Image
im 
=
Image.
open
(r
""geek.jpg""
)
# Creating object of Contrast class
im3 
=
ImageEnhance.Contrast(im)
# showing resultant image
im3.enhance(
5.0
).show()
# This will import Image and ImageEnhance modules
from
PIL 
import
Image, ImageEnhance
# Opening Image
im 
=
Image.
open
(r
""geek.jpg""
)
# Creating object of Brightness class
im3 
=
ImageEnhance.Brightness(im)
# showing resultant image
im3.enhance(
1.5
).show()
# This will import Image and ImageChops modules
from
PIL 
import
Image, ImageEnhance
# Opening Image
im 
=
Image.
open
(r
""geek.jpg""
)
# Creating object of Sharpness class
im3 
=
ImageEnhance.Sharpness(im)
# showing resultant image
im3.enhance(
5.0
).show()
","['show', 'rotate', 'transpose', 'save', 'close', 'crop', 'resize', 'load', 'split', 'merge', 'new', 'paste', 'thumbnail', 'GaussianBlur', 'BoxBlur', 'copy', 'Draw', 'truetype', 'text', 'line', 'rectangle', 'cos', 'sin', 'Path', 'getbbox', 'polygon', 'Color', 'enhance', 'Contrast', 'Brightness', 'Sharpness']","['Image', 'PIL', 'all', 'ImageFont', 'ImageDraw', 'math', 'ImagePath']"
34,"What is the purpose of the hashlib module in Python and how do you use it?
","# importing sys for getting commandline arguments
import
sys
# importing hashlib for getting sha256() hash function
import
hashlib
def
hashfile(
file
):
    
# A arbitrary (but fixed) buffer size
    
# 65536 = 65536 bytes = 64 kilobytes
    
BUF_SIZE 
=
65536
    
# Initializing the sha256() method
    
sha256 
=
hashlib.sha256()
    
# Opening the file provided as the first
    
# commandline argument
    
with 
open
(
""test.txt""
, 
'rb'
) as f:
        
while
True
:
            
# reading data = BUF_SIZE from the
            
# file and saving it in a variable
            
data 
=
f.read(BUF_SIZE)
            
# True if eof = 1
            
if
not
data:
                
break
            
# Passing that data to that sh256 hash
            
# function (updating the function with that data)
            
sha256.update(data)
    
# sha256.hexdigest() hashes all the input data passed
    
# to the sha256() via sha256.update()
    
# Acts as a finalize method, after which
    
# all the input data gets hashed
    
# hexdigest() hashes the data, and returns
    
# the output in hexadecimal format
    
return
sha256.hexdigest()
# Calling hashfile() function to obtain hash of the file
# and saving the result in a variable
file_hash 
=
hashfile(sys.argv[
1
])
print
(f
""Hash:{file_hash}""
)
# importing hashlib for getting sha256() hash function
import
hashlib
# A string that has been stored as a byte stream
# (due to the prefix b)
string 
=
b
""My name is apple and I am a vegetable?""
# Initializing the sha256() method
sha256 
=
hashlib.sha256()
# Passing the byte stream as an argument
sha256.update(string)
# sha256.hexdigest() hashes all the input data
# passed to the sha256() via sha256.update()
# Acts as a finalize method, after which all
# the input data gets hashed
# hexdigest() hashes the data, and returns
# the output in hexadecimal format
string_hash 
=
sha256.hexdigest()
print
(f
""Hash:{string_hash}""
)
","['sha256', 'hashfile', 'read', 'update', 'hexdigest']","['sys', 'hashlib']"
35,"How do you use the Jinja2 templating engine in Python to generate HTML pages?
","from
flask 
import
Flask, render_template, redirect, url_for
 
app 
=
Flask(__name__)
 
 
@app
.route(
""/""
)
def
home():
    
return
render_template(
""index.html""
)
 
 
@app
.route(
""/default""
)
def
default():
    
return
render_template(
""layout.html""
)
 
 
@app
.route(
""/variable""
)
def
var():
    
user 
=
""Geeksforgeeks""
    
return
render_template(
""variable_example.html""
, name
=
user)
 
 
@app
.route(
""/if""
)
def
ifelse():
    
user 
=
""Practice GeeksforGeeks""
    
return
render_template(
""if_example.html""
, name
=
user)
 
 
@app
.route(
""/for""
)
def
for_loop():
    
list_of_courses 
=
[
'Java'
, 
'Python'
, 
'C++'
, 
'MATLAB'
]
    
return
render_template(
""for_example.html""
, courses
=
list_of_courses)
 
 
@app
.route(
""/choice/<pick>""
)
def
choice(pick):
    
if
pick 
=
=
'variable'
:
        
return
redirect(url_for(
'var'
))
    
if
pick 
=
=
'if'
:
        
return
redirect(url_for(
'ifelse'
))
    
if
pick 
=
=
'for'
:
        
return
redirect(url_for(
'for_loop'
))
 
 
if
__name__ 
=
=
""__main__""
:
    
app.run(debug
=
False
)
<
html
>
    
<
head
>
        
<
title
>Variable Example</
title
>
    
</
head
>
    
<
body
>
        
<
h3
>Hello {{name}}</
h3
>
    
</
body
>
</
html
>
<!DOCTYPE html>
<
html
>
    
<
head
>
        
<
title
>If example</
title
>
    
</
head
>
    
<
body
>
        
{% if(name == ""Geeksforgeeks"") %}
            
<
h3
> Welcome </
h3
>
        
{% else %}
            
<
h3
> Unknown name entered: {{name}} </
h3
>
        
{% endif %}
    
</
body
>
</
html
>
<!DOCTYPE html>
<
html
>
    
<
head
>
        
<
title
>For Example</
title
>
    
</
head
>
    
<
body
>
        
<
h2
> Geeksforgeeks Available Course </
h2
>
        
{% for course in  courses%}
          
<
h4
> {{course}} </
h4
>
        
{% endfor %}
    
</
body
>
</
html
>
<!DOCTYPE html>
<
html
>
    
<
head
>
        
<
title
>Jinja2 and Flask</
title
>
    
</
head
>
    
<
body
>
        
<
h1
>Welcome to Geeksforgeeks</
h1
>
        
<
h4
>A Computer Science portal for geeks.</
h4
>
        
{% block content %}
        
{% endblock %}
    
</
body
>
</
html
>
{% extends ""layout.html"" %}
        
{% block content %}
        
<
ul
>
            
<
li
><
a
href
=
""default""
> Check Layout(Inheritance) </
a
></
li
>
            
<
li
><
a
href
=
""/variable""
> Try Variable Example </
a
></
li
>
            
<
li
><
a
href
=
""/if""
> Try If-else Example </
a
></
li
>
            
<
li
><
a
href
=
""/for""
> Try For Example </
a
></
li
>
            
<
li
><
a
href
=
""/url""
> Try URL Example </
a
></
li
>
        
</
ul
>
{% endblock %}
@app
.route(
""/choice/<pick>""
)
def
choice(pick):
    
if
pick 
=
=
'variable'
:
        
return
redirect(url_for(
'var'
))
    
if
pick 
=
=
'if'
:
        
return
redirect(url_for(
'ifelse'
))
    
if
pick 
=
=
'for'
:
        
return
redirect(url_for(
'for_loop'
))
<!DOCTYPE html>
<
html
>
    
<
head
>
        
<
title
>Template with Jinja2 and Flask</
title
>
        
<
link
rel
=
""stylesheet""
type
=
""text/css""
href
=
""{{ url_for('static', filename='style.css') }}""
>
    
</
head
>
    
<
body
>
        
<
h1
>Welcome to Geeksforgeeks</
h1
>
        
<
h4
>A Computer Science portal for geeks.</
h4
>
        
{% block content %}
        
{% endblock %}
    
</
body
>
</
html
>
","['Flask', 'route', 'home', 'render_template', 'default', 'var', 'ifelse', 'for_loop', 'choice', 'redirect', 'url_for', 'run', 'if', 'Layout']",['Flask']
36,"How do you use the asyncio module in Python to write asynchronous web servers?
","async
await
asyncio
asyncio
asyncio
aiohttp
aiofiles
$ python3.7 -m venv ./py37async
$ source ./py37async/bin/activate  # Windows: .\py37async\Scripts\activate.bat
$ pip install --upgrade pip aiohttp aiofiles  # Optional: aiodns

for
multiprocessing
threading
concurrent.futures
asyncio
async
await
asyncio
asyncio
asyncio
async
await
asyncio
async
await
async
await
return
Hello World
#!/usr/bin/env python3
# countasync.py

import asyncio

async def count():
    print(""One"")
    await asyncio.sleep(1)
    print(""Two"")

async def main():
    await asyncio.gather(count(), count(), count())

if __name__ == ""__main__"":
    import time
    s = time.perf_counter()
    asyncio.run(main())
    elapsed = time.perf_counter() - s
    print(f""{__file__} executed in {elapsed:0.2f} seconds."")

def
time.sleep()
$ python3 countasync.py
One
One
One
Two
Two
Two
countasync.py executed in 1.01 seconds.

count()
await asyncio.sleep(1)
#!/usr/bin/env python3
# countsync.py

import time

def count():
    print(""One"")
    time.sleep(1)
    print(""Two"")

def main():
    for _ in range(3):
        count()

if __name__ == ""__main__"":
    s = time.perf_counter()
    main()
    elapsed = time.perf_counter() - s
    print(f""{__file__} executed in {elapsed:0.2f} seconds."")

$ python3 countsync.py
One
Two
One
Two
One
Two
countsync.py executed in 3.01 seconds.

time.sleep()
asyncio.sleep()
sleep()
time.sleep()
asyncio.sleep()
asyncio.sleep()
time.sleep()
async
await
async
await
async def
async with
async for
await
await f()
g()
await
g()
f()
async def g():
    # Pause here and come back to g() when f() is ready
    r = await f()
    return r

async
await
async
await
async def
await
return
yield
async def noop(): pass
await
return
await
yield
async def
async for
await
return
async def
yield from
SyntaxError
SyntaxError
yield
def
SyntaxError
await
async def
await
async def f(x):
    y = await z(x)  # OK - `await` and `return` allowed in coroutines
    return y

async def g(x):
    yield x  # OK - this is an async generator

async def m(x):
    yield from gen(x)  # No - SyntaxError

def m(x):
    y = await z(x)  # Still no - SyntaxError (no `async def` here)
    return y

await f()
f()
.__await__()
def
@asyncio.coroutine
async
await
import asyncio

@asyncio.coroutine
def py34_coro():
    """"""Generator-based coroutine, older syntax""""""
    yield from stuff()

async def py35_coro():
    """"""Native coroutine, modern syntax""""""
    await stuff()

async
await
async
await
await
async
await
makerandom()
#!/usr/bin/env python3
# rand.py

import asyncio
import random

# ANSI colors
c = (
    ""\033[0m"",   # End of color
    ""\033[36m"",  # Cyan
    ""\033[91m"",  # Red
    ""\033[35m"",  # Magenta
)

async def makerandom(idx: int, threshold: int = 6) -> int:
    print(c[idx + 1] + f""Initiated makerandom({idx})."")
    i = random.randint(0, 10)
    while i <= threshold:
        print(c[idx + 1] + f""makerandom({idx}) == {i} too low; retrying."")
        await asyncio.sleep(idx + 1)
        i = random.randint(0, 10)
    print(c[idx + 1] + f""---> Finished: makerandom({idx}) == {i}"" + c[0])
    return i

async def main():
    res = await asyncio.gather(*(makerandom(i, 10 - i - 1) for i in range(3)))
    return res

if __name__ == ""__main__"":
    random.seed(444)
    r1, r2, r3 = asyncio.run(main())
    print()
    print(f""r1: {r1}, r2: {r2}, r3: {r3}"")

makerandom()
main()
range(3)
main()
asyncio
asyncio.sleep()
asyncio.sleep()
await
#!/usr/bin/env python3
# chained.py

import asyncio
import random
import time

async def part1(n: int) -> str:
    i = random.randint(0, 10)
    print(f""part1({n}) sleeping for {i} seconds."")
    await asyncio.sleep(i)
    result = f""result{n}-1""
    print(f""Returning part1({n}) == {result}."")
    return result

async def part2(n: int, arg: str) -> str:
    i = random.randint(0, 10)
    print(f""part2{n, arg} sleeping for {i} seconds."")
    await asyncio.sleep(i)
    result = f""result{n}-2 derived from {arg}""
    print(f""Returning part2{n, arg} == {result}."")
    return result

async def chain(n: int) -> None:
    start = time.perf_counter()
    p1 = await part1(n)
    p2 = await part2(n, p1)
    end = time.perf_counter() - start
    print(f""-->Chained result{n} => {p2} (took {end:0.2f} seconds)."")

async def main(*args):
    await asyncio.gather(*(chain(n) for n in args))

if __name__ == ""__main__"":
    import sys
    random.seed(444)
    args = [1, 2, 3] if len(sys.argv) == 1 else map(int, sys.argv[1:])
    start = time.perf_counter()
    asyncio.run(main(*args))
    end = time.perf_counter() - start
    print(f""Program finished in {end:0.2f} seconds."")

part1()
part2()
$ python3 chained.py 9 6 3
part1(9) sleeping for 4 seconds.
part1(6) sleeping for 4 seconds.
part1(3) sleeping for 0 seconds.
Returning part1(3) == result3-1.
part2(3, 'result3-1') sleeping for 4 seconds.
Returning part1(9) == result9-1.
part2(9, 'result9-1') sleeping for 7 seconds.
Returning part1(6) == result6-1.
part2(6, 'result6-1') sleeping for 4 seconds.
Returning part2(3, 'result3-1') == result3-2 derived from result3-1.
-->Chained result3 => result3-2 derived from result3-1 (took 4.00 seconds).
Returning part2(6, 'result6-1') == result6-2 derived from result6-1.
-->Chained result6 => result6-2 derived from result6-1 (took 8.01 seconds).
Returning part2(9, 'result9-1') == result9-2 derived from result9-1.
-->Chained result9 => result9-2 derived from result9-1 (took 11.01 seconds).
Program finished in 11.01 seconds.

main()
asyncio
queue
chained.py
queue.Queue()
asyncq.py
await q.get()
main()
await q.join()
#!/usr/bin/env python3
# asyncq.py

import asyncio
import itertools as it
import os
import random
import time

async def makeitem(size: int = 5) -> str:
    return os.urandom(size).hex()

async def randsleep(caller=None) -> None:
    i = random.randint(0, 10)
    if caller:
        print(f""{caller} sleeping for {i} seconds."")
    await asyncio.sleep(i)

async def produce(name: int, q: asyncio.Queue) -> None:
    n = random.randint(0, 10)
    for _ in it.repeat(None, n):  # Synchronous loop for each single producer
        await randsleep(caller=f""Producer {name}"")
        i = await makeitem()
        t = time.perf_counter()
        await q.put((i, t))
        print(f""Producer {name} added <{i}> to queue."")

async def consume(name: int, q: asyncio.Queue) -> None:
    while True:
        await randsleep(caller=f""Consumer {name}"")
        i, t = await q.get()
        now = time.perf_counter()
        print(f""Consumer {name} got element <{i}>""
              f"" in {now-t:0.5f} seconds."")
        q.task_done()

async def main(nprod: int, ncon: int):
    q = asyncio.Queue()
    producers = [asyncio.create_task(produce(n, q)) for n in range(nprod)]
    consumers = [asyncio.create_task(consume(n, q)) for n in range(ncon)]
    await asyncio.gather(*producers)
    await q.join()  # Implicitly awaits consumers, too
    for c in consumers:
        c.cancel()

if __name__ == ""__main__"":
    import argparse
    random.seed(444)
    parser = argparse.ArgumentParser()
    parser.add_argument(""-p"", ""--nprod"", type=int, default=5)
    parser.add_argument(""-c"", ""--ncon"", type=int, default=10)
    ns = parser.parse_args()
    start = time.perf_counter()
    asyncio.run(main(**ns.__dict__))
    elapsed = time.perf_counter() - start
    print(f""Program completed in {elapsed:0.5f} seconds."")

(i, t)
i
t
asyncio.sleep()
$ python3 asyncq.py -p 2 -c 5
Producer 0 sleeping for 3 seconds.
Producer 1 sleeping for 3 seconds.
Consumer 0 sleeping for 4 seconds.
Consumer 1 sleeping for 3 seconds.
Consumer 2 sleeping for 3 seconds.
Consumer 3 sleeping for 5 seconds.
Consumer 4 sleeping for 4 seconds.
Producer 0 added <377b1e8f82> to queue.
Producer 0 sleeping for 5 seconds.
Producer 1 added <413b8802f8> to queue.
Consumer 1 got element <377b1e8f82> in 0.00013 seconds.
Consumer 1 sleeping for 3 seconds.
Consumer 2 got element <413b8802f8> in 0.00009 seconds.
Consumer 2 sleeping for 4 seconds.
Producer 0 added <06c055b3ab> to queue.
Producer 0 sleeping for 1 seconds.
Consumer 0 got element <06c055b3ab> in 0.00021 seconds.
Consumer 0 sleeping for 4 seconds.
Producer 0 added <17a8613276> to queue.
Consumer 4 got element <17a8613276> in 0.00022 seconds.
Consumer 4 sleeping for 5 seconds.
Program completed in 9.00954 seconds.

python3 asyncq.py -p 5 -c 100
asyncio
async
await
import asyncio

@asyncio.coroutine
def py34_coro():
    """"""Generator-based coroutine""""""
    # No need to build these yourself, but be aware of what they are
    s = yield from stuff()
    return s

async def py35_coro():
    """"""Native coroutine, modern syntax""""""
    s = await stuff()
    return s

async def stuff():
    return 0x10, 0x20, 0x30

py34_coro()
py35_coro()
await
asyncio.run()
asyncio
>>> py35_coro()
<coroutine object py35_coro at 0x10126dcc8>

>>> def gen():
...     yield 0x10, 0x20, 0x30
...
>>> g = gen()
>>> g  # Nothing much happens - need to iterate with `.__next__()`
<generator object gen at 0x1012705e8>
>>> next(g)
(16, 32, 48)

async def
@asyncio.coroutine
await
yield from
yield
yield from x()
for i in x(): yield i
break
yield
>>> from itertools import cycle
>>> def endless():
...     """"""Yields 9, 8, 7, 6, 9, 8, 7, 6, ... forever""""""
...     yield from cycle((9, 8, 7, 6))

>>> e = endless()
>>> total = 0
>>> for i in e:
...     if total < 30:
...         print(i, end="" "")
...         total += i
...     else:
...         print()
...         # Pause execution. We can resume later.
...         break
9 8 7 6 9 8 7 6 9 8 7 6 9 8

>>> # Resume
>>> next(e), next(e), next(e)
(6, 9, 8)

await
yield
yield from
await
return
yield
next()
.send()
await
asyncio
.send()
yield from
yield from
await
await
yield from
await
async for
async
await
async for
await
return
yield
yield
await
yield
>>> async def mygen(u: int = 10):
...     """"""Yield powers of 2.""""""
...     i = 0
...     while i < u:
...         yield 2 ** i
...         i += 1
...         await asyncio.sleep(0.1)

async for
>>> async def main():
...     # This does *not* introduce concurrent execution
...     # It is meant to show syntax only
...     g = [i async for i in mygen()]
...     f = [j async for j in mygen() if not (j // 3 % 5)]
...     return g, f
...
>>> g, f = asyncio.run(main())
>>> g
[1, 2, 4, 8, 16, 32, 64, 128, 256, 512]
>>> f
[1, 2, 16, 32, 256, 512]

async for
async with
for
with
await
asyncio.run()
while True
asyncio.run(main())  # Python 3.7+

asyncio.run()
asyncio
get_event_loop()
loop = asyncio.get_event_loop()
try:
    loop.run_until_complete(main())
finally:
    loop.close()

loop.get_event_loop()
asyncio.run()
loop
loop.is_running()
loop.is_closed()
>>> import asyncio

>>> async def main():
...     print(""Hello ..."")
...     await asyncio.sleep(1)
...     print(""World!"")

>>> routine = main()
>>> routine
<coroutine object main at 0x1027a6150>

asyncio.run()
main()
>>> asyncio.run(routine)
Hello ...
World!

await
main()
asyncio.run()
await
uvloop
asyncio
selectors
areq.py
aiohttp
requests
requests
urllib3
http
socket
await requests.get(url)
.get()
aiohttp
session.request()
response.text()
requests
urls.txt
href
foundurls.txt
aiohttp
aiofiles
urls.txt
$ cat urls.txt
https://regex101.com/
https://docs.python.org/3/this-url-will-404.html
https://www.nytimes.com/guides/
https://www.mediamatters.org/
https://1.1.1.1/
https://www.politico.com/tipsheets/morning-money
https://www.bloomberg.com/markets/economics
https://www.ietf.org/rfc/rfc2616.txt

#!/usr/bin/env python3
# areq.py

""""""Asynchronously get links embedded in multiple pages' HMTL.""""""

import asyncio
import logging
import re
import sys
from typing import IO
import urllib.error
import urllib.parse

import aiofiles
import aiohttp
from aiohttp import ClientSession

logging.basicConfig(
    format=""%(asctime)s %(levelname)s:%(name)s: %(message)s"",
    level=logging.DEBUG,
    datefmt=""%H:%M:%S"",
    stream=sys.stderr,
)
logger = logging.getLogger(""areq"")
logging.getLogger(""chardet.charsetprober"").disabled = True

HREF_RE = re.compile(r'href=""(.*?)""')

async def fetch_html(url: str, session: ClientSession, **kwargs) -> str:
    """"""GET request wrapper to fetch page HTML.

    kwargs are passed to `session.request()`.
    """"""

    resp = await session.request(method=""GET"", url=url, **kwargs)
    resp.raise_for_status()
    logger.info(""Got response [%s] for URL: %s"", resp.status, url)
    html = await resp.text()
    return html

async def parse(url: str, session: ClientSession, **kwargs) -> set:
    """"""Find HREFs in the HTML of `url`.""""""
    found = set()
    try:
        html = await fetch_html(url=url, session=session, **kwargs)
    except (
        aiohttp.ClientError,
        aiohttp.http_exceptions.HttpProcessingError,
    ) as e:
        logger.error(
            ""aiohttp exception for %s [%s]: %s"",
            url,
            getattr(e, ""status"", None),
            getattr(e, ""message"", None),
        )
        return found
    except Exception as e:
        logger.exception(
            ""Non-aiohttp exception occured:  %s"", getattr(e, ""__dict__"", {})
        )
        return found
    else:
        for link in HREF_RE.findall(html):
            try:
                abslink = urllib.parse.urljoin(url, link)
            except (urllib.error.URLError, ValueError):
                logger.exception(""Error parsing URL: %s"", link)
                pass
            else:
                found.add(abslink)
        logger.info(""Found %d links for %s"", len(found), url)
        return found

async def write_one(file: IO, url: str, **kwargs) -> None:
    """"""Write the found HREFs from `url` to `file`.""""""
    res = await parse(url=url, **kwargs)
    if not res:
        return None
    async with aiofiles.open(file, ""a"") as f:
        for p in res:
            await f.write(f""{url}\t{p}\n"")
        logger.info(""Wrote results for source URL: %s"", url)

async def bulk_crawl_and_write(file: IO, urls: set, **kwargs) -> None:
    """"""Crawl & write concurrently to `file` for multiple `urls`.""""""
    async with ClientSession() as session:
        tasks = []
        for url in urls:
            tasks.append(
                write_one(file=file, url=url, session=session, **kwargs)
            )
        await asyncio.gather(*tasks)

if __name__ == ""__main__"":
    import pathlib
    import sys

    assert sys.version_info >= (3, 7), ""Script requires Python 3.7+.""
    here = pathlib.Path(__file__).parent

    with open(here.joinpath(""urls.txt"")) as infile:
        urls = set(map(str.strip, infile))

    outpath = here.joinpath(""foundurls.txt"")
    with open(outpath, ""w"") as outfile:
        outfile.write(""source_url\tparsed_url\n"")

    asyncio.run(bulk_crawl_and_write(file=outpath, urls=urls))

HREF_RE
href
>>> HREF_RE.search('Go to <a href=""https://realpython.com/"">Real Python</a>')
<re.Match object; span=(15, 45), match='href=""https://realpython.com/""'>

fetch_html()
resp = await session.request(method=""GET"", url=url, **kwargs)
resp.raise_for_status()

fetch_html()
str
html = await resp.text()

await
session.request()
resp.text()
fetch_html()
parse()
fetch_html()
href
parse()
yield
await
return
loop.run_in_executor()
write()
parse()
set
aiofiles
bulk_crawl_and_write()
urls.txt
ClientSession
asyncio.connector.TCPConnector
ClientSession
async with
.__aenter__()
.__aexit__()
.__exit__()
.__enter__()
async with
async def
areq.py
$ python3 areq.py
21:33:22 DEBUG:asyncio: Using selector: KqueueSelector
21:33:22 INFO:areq: Got response [200] for URL: https://www.mediamatters.org/
21:33:22 INFO:areq: Found 115 links for https://www.mediamatters.org/
21:33:22 INFO:areq: Got response [200] for URL: https://www.nytimes.com/guides/
21:33:22 INFO:areq: Got response [200] for URL: https://www.politico.com/tipsheets/morning-money
21:33:22 INFO:areq: Got response [200] for URL: https://www.ietf.org/rfc/rfc2616.txt
21:33:22 ERROR:areq: aiohttp exception for https://docs.python.org/3/this-url-will-404.html [404]: Not Found
21:33:22 INFO:areq: Found 120 links for https://www.nytimes.com/guides/
21:33:22 INFO:areq: Found 143 links for https://www.politico.com/tipsheets/morning-money
21:33:22 INFO:areq: Wrote results for source URL: https://www.mediamatters.org/
21:33:22 INFO:areq: Found 0 links for https://www.ietf.org/rfc/rfc2616.txt
21:33:22 INFO:areq: Got response [200] for URL: https://1.1.1.1/
21:33:22 INFO:areq: Wrote results for source URL: https://www.nytimes.com/guides/
21:33:22 INFO:areq: Wrote results for source URL: https://www.politico.com/tipsheets/morning-money
21:33:22 INFO:areq: Got response [200] for URL: https://www.bloomberg.com/markets/economics
21:33:22 INFO:areq: Found 3 links for https://www.bloomberg.com/markets/economics
21:33:22 INFO:areq: Wrote results for source URL: https://www.bloomberg.com/markets/economics
21:33:23 INFO:areq: Found 36 links for https://1.1.1.1/
21:33:23 INFO:areq: Got response [200] for URL: https://regex101.com/
21:33:23 INFO:areq: Found 23 links for https://regex101.com/
21:33:23 INFO:areq: Wrote results for source URL: https://regex101.com/
21:33:23 INFO:areq: Wrote results for source URL: https://1.1.1.1/

$ wc -l foundurls.txt
     626 foundurls.txt

$ head -n 3 foundurls.txt
source_url  parsed_url
https://www.bloomberg.com/markets/economics https://www.bloomberg.com/feedback
https://www.bloomberg.com/markets/economics https://www.bloomberg.com/notices/tos

aio-redis
networkx
asyncio
TimeoutError
scikit-learn
keras
async
await
async
await
async
await
async
await
asyncio
asyncio
asyncio
urllib2
asyncio
asyncio
async
await
asyncio
asyncio
curio
trio
asyncio
curio
trio
asyncio
async
await
asyncio
asyncio.run()
asyncio.create_task()
asyncio.gather()
create_task()
asyncio.run()
>>> import asyncio

>>> async def coro(seq) -> list:
...     """"""'IO' wait time is proportional to the max element.""""""
...     await asyncio.sleep(max(seq))
...     return list(reversed(seq))
...
>>> async def main():
...     # This is a bit redundant in the case of one task
...     # We could use `await coro([3, 2, 1])` on its own
...     t = asyncio.create_task(coro([3, 2, 1]))  # Python 3.7+
...     await t
...     print(f't: type {type(t)}')
...     print(f't done: {t.done()}')
...
>>> t = asyncio.run(main())
t: type <class '_asyncio.Task'>
t done: True

await t
main()
main()
asyncio.run(main())
loop.run_until_complete(main())
await t
main()
main()
await t
asyncio.Task.all_tasks()
asyncio.create_task()
asyncio.ensure_future()
create_task()
asyncio.gather()
gather()
await asyncio.gather()
queue.join()
gather()
>>> import time
>>> async def main():
...     t = asyncio.create_task(coro([3, 2, 1]))
...     t2 = asyncio.create_task(coro([10, 5, 0]))  # Python 3.7+
...     print('Start:', time.strftime('%X'))
...     a = await asyncio.gather(t, t2)
...     print('End:', time.strftime('%X'))  # Should be 10 seconds
...     print(f'Both tasks done: {all((t.done(), t2.done()))}')
...     return a
...
>>> a = asyncio.run(main())
Start: 16:20:11
End: 16:20:21
Both tasks done: True
>>> a
[[1, 2, 3], [0, 5, 10]]

gather()
asyncio.as_completed()
coro([3, 2, 1])
coro([10, 5, 0])
gather()
>>> async def main():
...     t = asyncio.create_task(coro([3, 2, 1]))
...     t2 = asyncio.create_task(coro([10, 5, 0]))
...     print('Start:', time.strftime('%X'))
...     for res in asyncio.as_completed((t, t2)):
...         compl = await res
...         print(f'res: {compl} completed at {time.strftime(""%X"")}')
...     print('End:', time.strftime('%X'))
...     print(f'Both tasks done: {all((t.done(), t2.done()))}')
...
>>> a = asyncio.run(main())
Start: 09:49:07
res: [1, 2, 3] completed at 09:49:10
res: [0, 5, 10] completed at 09:49:17
End: 09:49:17
Both tasks done: True

asyncio.ensure_future()
create_task()
await
await
yield
yield from
await
await
async
await
async
await
asyncio
asyncio
yield from
asyncio
async
await
async
await
asyncio
async
await
asyncio.coroutine()
asyncio.run()
asyncio
asyncio.run()
asyncio
asyncio
yield from
async
await
asyncio
asyncio.semaphore
async
await
await
yield from
async
await
aiohttp
aioredis
aiopg
aiomcache
aiokafka
aiozmq
aiojobs
async_lru
uvloop
asyncpg
trio
asyncio
aiofiles
asks
asyncio-redis
aioprocessing
multiprocessing
asyncio
umongo
unsync
asyncio
aiostream
itertools
","['count', 'sleep', 'main', 'gather', 'perf_counter', 'run', 'range', 'f', 'g', 'noop', 'z', 'm', 'gen', '__await__', 'py34_coro', 'stuff', 'py35_coro', 'makerandom', 'randint', 'seed', 'part1', 'part2', 'chain', 'len', 'map', 'Queue', 'get', 'join', 'makeitem', 'urandom', 'hex', 'randsleep', 'produce', 'repeat', 'put', 'consume', 'task_done', 'create_task', 'cancel', 'ArgumentParser', 'add_argument', 'parse_args', '__next__', 'next', 'x', 'endless', 'cycle', 'send', 'mygen', 'get_event_loop', 'run_until_complete', 'close', 'is_running', 'is_closed', 'request', 'text', 'basicConfig', 'getLogger', 'compile', 'fetch_html', 'raise_for_status', 'info', 'parse', 'set', 'error', 'getattr', 'exception', 'findall', 'urljoin', 'add', 'write_one', 'open', 'write', 'bulk_crawl_and_write', 'ClientSession', 'append', 'Path', 'joinpath', 'search', 'run_in_executor', '__aenter__', '__aexit__', '__exit__', '__enter__', 'coro', 'max', 'list', 'reversed', 'type', 'done', 'all_tasks', 'ensure_future', 'strftime', 'all', 'as_completed', 'coroutine']","['asyncio', 'time', 'random', 'sys', 'itertools', 'os', 'argparse', 'cycle', 'logging', 're', 'IO', 'urllib', 'aiofiles', 'aiohttp', 'ClientSession', 'pathlib']"
37,"How do you use the click module in Python to build command-line interfaces?
","# importing click
import
click
 
@click
.command()
def
main():
    
click.echo(
""This cli is built with click. ""
)
 
if
__name__
=
=
""__main__""
:
    
main()
@click
.command()
@click
.argument(
'name'
)
def
greeting(name):
    
click.echo(
""Hello, {}""
.
format
(name))
 
if
__name__
=
=
""__main__""
:
    
greeting()
python greet.py Gifoyle
import
click
 
@click
.command()
@click
.option(
'--string'
, default 
=
'World'
,
        
help
=
'This is a greeting'
)
def
hello(string):
    
click.echo(
""Hello, {}""
.
format
(string))
 
if
__name__
=
=
""__main__""
:
hello()    
python hello.py
python hello.py --string Dinesh
--help
import
click
 
@click
.command()
@click
.argument(‘greeting’)
def
cli(greeting):
    
'''
    
This is the default CLI method.
     
    
Arguments:
            
greeting: {string}
    
'''
 
    
click.echo(greeting)
    
click.echo (
""This is a simple cli.""
)
 
if
__name__
=
=
""__main""
:
    
cli()
python cli.py --help
 python cli.py
python cli.py hello
","['command', 'main', 'echo', 'argument', 'greeting', 'option', 'hello', 'cli']",['click']
38,"How do you use the Pygame library in Python to build simple games?
","pygame
pygame
pygame
pygame
pygame
pygame
pygame
pip
$ pip install pygame

$ python3 -m pygame.examples.aliens

pygame
pygame
 1# Simple pygame program
 2
 3# Import and initialize the pygame library
 4import pygame
 5pygame.init()
 6
 7# Set up the drawing window
 8screen = pygame.display.set_mode([500, 500])
 9
10# Run until the user asks to quit
11running = True
12while running:
13
14    # Did the user click the window close button?
15    for event in pygame.event.get():
16        if event.type == pygame.QUIT:
17            running = False
18
19    # Fill the background with white
20    screen.fill((255, 255, 255))
21
22    # Draw a solid blue circle in the center
23    pygame.draw.circle(screen, (0, 0, 255), (250, 250), 75)
24
25    # Flip the display
26    pygame.display.flip()
27
28# Done! Time to quit.
29pygame.quit()

pygame
pygame
pygame.QUIT
screen.fill()
(255, 255, 255)
screen
(0, 0, 255)
(250, 250)
75
pygame
pygame
pygame
pygame
display
joystick
pygame
pygame.init()
init()
pygame
pygame
Surface
Surface
pygame
Surface
pygame
display
.set_mode()
Surface
Surface
pygame.draw.circle()
Surface
pygame.display.flip()
pygame
Surface
image
Surface
Surface
pygame
Rect
Rect
pygame
pygame
 1# Import the pygame module
 2import pygame
 3
 4# Import pygame.locals for easier access to key coordinates
 5# Updated to conform to flake8 and black standards
 6from pygame.locals import (
 7    K_UP,
 8    K_DOWN,
 9    K_LEFT,
10    K_RIGHT,
11    K_ESCAPE,
12    KEYDOWN,
13    QUIT,
14)
15
16# Initialize pygame
17pygame.init()

pygame
pygame.<CONSTANT>
pygame.locals
<CONSTANT>
 1# Import the pygame module
 2import pygame
 3
 4# Import pygame.locals for easier access to key coordinates
 5# Updated to conform to flake8 and black standards
 6from pygame.locals import (
 7    K_UP,
 8    K_DOWN,
 9    K_LEFT,
10    K_RIGHT,
11    K_ESCAPE,
12    KEYDOWN,
13    QUIT,
14)
15
16# Initialize pygame
17pygame.init()
18
19# Define constants for the screen width and height
20SCREEN_WIDTH = 800
21SCREEN_HEIGHT = 600
22
23# Create the screen object
24# The size is determined by the constant SCREEN_WIDTH and SCREEN_HEIGHT
25screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))

pygame.display.set_mode()
SCREEN_WIDTH
SCREEN_HEIGHT
Surface
pygame
pygame
pygame
KEYDOWN
QUIT
KEYDOWN
key
pygame.event.get()
27# Variable to keep the main loop running
28running = True
29
30# Main loop
31while running:
32    # Look at every event in the queue
33    for event in pygame.event.get():
34        # Did the user hit a key?
35        if event.type == KEYDOWN:
36            # Was it the Escape key? If so, stop the loop.
37            if event.key == K_ESCAPE:
38                running = False
39
40        # Did the user click the window close button? If so, stop the loop.
41        elif event.type == QUIT:
42            running = False

running = False
event.type
KEYDOWN
event.key
K_ESCAPE
running = False
QUIT
QUIT
screen.fill()
pygame.draw.circle()
Surface
Surface
screen
Surface
Surface
44# Fill the screen with white
45screen.fill((255, 255, 255))
46
47# Create a surface and pass in a tuple containing its length and width
48surf = pygame.Surface((50, 50))
49
50# Give the surface a color to separate it from the background
51surf.fill((0, 0, 0))
52rect = surf.get_rect()

Surface
Surface
surf
screen
Rect
.get_rect()
rect
.blit()
.flip()
Surface
Surface
Surface
blit
.blit()
Surface
.blit()
Surface
Surface
surf
54# This line says ""Draw surf onto the screen at the center""
55screen.blit(surf, (SCREEN_WIDTH/2, SCREEN_HEIGHT/2))
56pygame.display.flip()

.blit()
Surface
Surface
(SCREEN_WIDTH/2, SCREEN_HEIGHT/2)
surf
.blit()
surf
surf
surf
screen.blit()
54# Put the center of surf at the center of the display
55surf_center = (
56    (SCREEN_WIDTH-surf.get_width())/2,
57    (SCREEN_HEIGHT-surf.get_height())/2
58)
59
60# Draw surf at the new coordinates
61screen.blit(surf, surf_center)
62pygame.display.flip()

pygame.display.flip()
blit()
.flip()
Surface
pygame
Sprite
Sprite
Sprite
20# Define a Player object by extending pygame.sprite.Sprite
21# The surface drawn on the screen is now an attribute of 'player'
22class Player(pygame.sprite.Sprite):
23    def __init__(self):
24        super(Player, self).__init__()
25        self.surf = pygame.Surface((75, 25))
26        self.surf.fill((255, 255, 255))
27        self.rect = self.surf.get_rect()

Player
pygame.sprite.Sprite
.__init__()
.super()
.__init__()
Sprite
.surf
.rect
 1# Import the pygame module
 2import pygame
 3
 4# Import pygame.locals for easier access to key coordinates
 5# Updated to conform to flake8 and black standards
 6from pygame.locals import (
 7    K_UP,
 8    K_DOWN,
 9    K_LEFT,
10    K_RIGHT,
11    K_ESCAPE,
12    KEYDOWN,
13    QUIT,
14)
15
16# Define constants for the screen width and height
17SCREEN_WIDTH = 800
18SCREEN_HEIGHT = 600
19
20# Define a player object by extending pygame.sprite.Sprite
21# The surface drawn on the screen is now an attribute of 'player'
22class Player(pygame.sprite.Sprite):
23    def __init__(self):
24        super(Player, self).__init__()
25        self.surf = pygame.Surface((75, 25))
26        self.surf.fill((255, 255, 255))
27        self.rect = self.surf.get_rect()
28
29# Initialize pygame
30pygame.init()
31
32# Create the screen object
33# The size is determined by the constant SCREEN_WIDTH and SCREEN_HEIGHT
34screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
35
36# Instantiate player. Right now, this is just a rectangle.
37player = Player()
38
39# Variable to keep the main loop running
40running = True
41
42# Main loop
43while running:
44    # for loop through the event queue
45    for event in pygame.event.get():
46        # Check for KEYDOWN event
47        if event.type == KEYDOWN:
48            # If the Esc key is pressed, then exit the main loop
49            if event.key == K_ESCAPE:
50                running = False
51        # Check for QUIT event. If QUIT, then set running to false.
52        elif event.type == QUIT:
53            running = False
54
55    # Fill the screen with black
56    screen.fill((0, 0, 0))
57
58    # Draw the player on the screen
59    screen.blit(player.surf, (SCREEN_WIDTH/2, SCREEN_HEIGHT/2))
60
61    # Update the display
62    pygame.display.flip()

screen.blit(player.surf, player.rect)
55# Fill the screen with black
56screen.fill((0, 0, 0))
57
58# Draw the player on the screen
59screen.blit(player.surf, player.rect)
60
61# Update the display
62pygame.display.flip()

Rect
.blit()
pygame
pygame.event.get()
KEYDOWN
pygame
pygame.event.get_pressed()
KEYDOWN
54# Get the set of keys pressed and check for user input
55pressed_keys = pygame.key.get_pressed()

Player
29# Move the sprite based on user keypresses
30def update(self, pressed_keys):
31    if pressed_keys[K_UP]:
32        self.rect.move_ip(0, -5)
33    if pressed_keys[K_DOWN]:
34        self.rect.move_ip(0, 5)
35    if pressed_keys[K_LEFT]:
36        self.rect.move_ip(-5, 0)
37    if pressed_keys[K_RIGHT]:
38        self.rect.move_ip(5, 0)

K_UP
K_DOWN
K_LEFT
K_RIGHT
True
.rect
.move_ip()
Rect
.update()
.get_pressed()
52# Main loop
53while running:
54    # for loop through the event queue
55    for event in pygame.event.get():
56        # Check for KEYDOWN event
57        if event.type == KEYDOWN:
58            # If the Esc key is pressed, then exit the main loop
59            if event.key == K_ESCAPE:
60                running = False
61        # Check for QUIT event. If QUIT, then set running to false.
62        elif event.type == QUIT:
63            running = False
64
65    # Get all the keys currently pressed
66    pressed_keys = pygame.key.get_pressed()
67
68    # Update the player sprite based on user keypresses
69    player.update(pressed_keys)
70
71    # Fill the screen with black
72    screen.fill((0, 0, 0))

rect
rect
25# Move the sprite based on user keypresses
26def update(self, pressed_keys):
27    if pressed_keys[K_UP]:
28        self.rect.move_ip(0, -5)
29    if pressed_keys[K_DOWN]:
30        self.rect.move_ip(0, 5)
31    if pressed_keys[K_LEFT]:
32        self.rect.move_ip(-5, 0)
33    if pressed_keys[K_RIGHT]:
34        self.rect.move_ip(5, 0)
35
36    # Keep player on the screen
37    if self.rect.left < 0:
38        self.rect.left = 0
39    if self.rect.right > SCREEN_WIDTH:
40        self.rect.right = SCREEN_WIDTH
41    if self.rect.top <= 0:
42        self.rect.top = 0
43    if self.rect.bottom >= SCREEN_HEIGHT:
44        self.rect.bottom = SCREEN_HEIGHT

.move()
.top
.bottom
.left
.right
random
 4# Import random for random numbers
 5import random

Enemy
Player
55# Define the enemy object by extending pygame.sprite.Sprite
56# The surface you draw on the screen is now an attribute of 'enemy'
57class Enemy(pygame.sprite.Sprite):
58    def __init__(self):
59        super(Enemy, self).__init__()
60        self.surf = pygame.Surface((20, 10))
61        self.surf.fill((255, 255, 255))
62        self.rect = self.surf.get_rect(
63            center=(
64                random.randint(SCREEN_WIDTH + 20, SCREEN_WIDTH + 100),
65                random.randint(0, SCREEN_HEIGHT),
66            )
67        )
68        self.speed = random.randint(5, 20)
69
70    # Move the sprite based on speed
71    # Remove the sprite when it passes the left edge of the screen
72    def update(self):
73        self.rect.move_ip(-self.speed, 0)
74        if self.rect.right < 0:
75            self.kill()

Enemy
Player
rect
.speed
.update()
.update()
.speed
Enemy
.rect
.kill()
.kill()
pygame
Sprite Group
Sprite
Sprite
Group
Enemy
Player
Group
Group
Sprite
Group
Enemy
82# Create the 'player'
83player = Player()
84
85# Create groups to hold enemy sprites and all sprites
86# - enemies is used for collision detection and position updates
87# - all_sprites is used for rendering
88enemies = pygame.sprite.Group()
89all_sprites = pygame.sprite.Group()
90all_sprites.add(player)
91
92# Variable to keep the main loop running
93running = True

.kill()
Sprite
Group
Sprite
all_sprites
.blit()
Player
all_sprites
117# Fill the screen with black
118screen.fill((0, 0, 0))
119
120# Draw all sprites
121for entity in all_sprites:
122    screen.blit(entity.surf, entity.rect)
123
124# Flip everything to the display
125pygame.display.flip()

all_sprites
Enemy
all_sprites
enemies
pygame
78# Create the screen object
79# The size is determined by the constant SCREEN_WIDTH and SCREEN_HEIGHT
80screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
81
82# Create a custom event for adding a new enemy
83ADDENEMY = pygame.USEREVENT + 1
84pygame.time.set_timer(ADDENEMY, 250)
85
86# Instantiate player. Right now, this is just a rectangle.
87player = Player()

pygame
pygame
USEREVENT
ADDENEMY = pygame.USEREVENT + 1
time
ADDENEMY
.set_timer()
100# Main loop
101while running:
102    # Look at every event in the queue
103    for event in pygame.event.get():
104        # Did the user hit a key?
105        if event.type == KEYDOWN:
106            # Was it the Escape key? If so, stop the loop.
107            if event.key == K_ESCAPE:
108                running = False
109
110        # Did the user click the window close button? If so, stop the loop.
111        elif event.type == QUIT:
112            running = False
113
114        # Add a new enemy?
115        elif event.type == ADDENEMY:
116            # Create the new enemy and add it to sprite groups
117            new_enemy = Enemy()
118            enemies.add(new_enemy)
119            all_sprites.add(new_enemy)
120
121    # Get the set of keys pressed and check for user input
122    pressed_keys = pygame.key.get_pressed()
123    player.update(pressed_keys)
124
125    # Update enemy position
126    enemies.update()

ADDENEMY
Enemy
enemies
all_sprites
Enemy
all_sprites
enemies.update()
enemies
enemies
pygame
pygame
.spritecollideany()
Sprite
Group
Group
.rect
.rect
Sprite
True
False
player
Group
enemies
130# Draw all sprites
131for entity in all_sprites:
132    screen.blit(entity.surf, entity.rect)
133
134# Check if any enemies have collided with the player
135if pygame.sprite.spritecollideany(player, enemies):
136    # If so, then remove the player and stop the loop
137    player.kill()
138    running = False

player
enemies
player.kill()
all_sprites
player
running = False
Surface
image
 7# Import pygame.locals for easier access to key coordinates
 8# Updated to conform to flake8 and black standards
 9# from pygame.locals import *
10from pygame.locals import (
11    RLEACCEL,
12    K_UP,
13    K_DOWN,
14    K_LEFT,
15    K_RIGHT,
16    K_ESCAPE,
17    KEYDOWN,
18    QUIT,
19)
20
21# Define constants for the screen width and height
22SCREEN_WIDTH = 800
23SCREEN_HEIGHT = 600
24
25
26# Define the Player object by extending pygame.sprite.Sprite
27# Instead of a surface, use an image for a better-looking sprite
28class Player(pygame.sprite.Sprite):
29    def __init__(self):
30        super(Player, self).__init__()
31        self.surf = pygame.image.load(""jet.png"").convert()
32        self.surf.set_colorkey((255, 255, 255), RLEACCEL)
33        self.rect = self.surf.get_rect()

pygame.image.load()
Surface
.convert()
Surface
.blit()
.set_colorkey()
pygame
pygame
pygame.locals
Surface
Enemy
59# Define the enemy object by extending pygame.sprite.Sprite
60# Instead of a surface, use an image for a better-looking sprite
61class Enemy(pygame.sprite.Sprite):
62    def __init__(self):
63        super(Enemy, self).__init__()
64        self.surf = pygame.image.load(""missile.png"").convert()
65        self.surf.set_colorkey((255, 255, 255), RLEACCEL)
66        # The starting position is randomly generated, as is the speed
67        self.rect = self.surf.get_rect(
68            center=(
69                random.randint(SCREEN_WIDTH + 20, SCREEN_WIDTH + 100),
70                random.randint(0, SCREEN_HEIGHT),
71            )
72        )
73        self.speed = random.randint(5, 20)

Player
Enemy
Cloud
.update()
cloud
cloud
cloud
Group
clouds
clouds
Cloud
 83# Define the cloud object by extending pygame.sprite.Sprite
 84# Use an image for a better-looking sprite
 85class Cloud(pygame.sprite.Sprite):
 86    def __init__(self):
 87        super(Cloud, self).__init__()
 88        self.surf = pygame.image.load(""cloud.png"").convert()
 89        self.surf.set_colorkey((0, 0, 0), RLEACCEL)
 90        # The starting position is randomly generated
 91        self.rect = self.surf.get_rect(
 92            center=(
 93                random.randint(SCREEN_WIDTH + 20, SCREEN_WIDTH + 100),
 94                random.randint(0, SCREEN_HEIGHT),
 95            )
 96        )
 97
 98    # Move the cloud based on a constant speed
 99    # Remove the cloud when it passes the left edge of the screen
100    def update(self):
101        self.rect.move_ip(-5, 0)
102        if self.rect.right < 0:
103            self.kill()

Enemy
116# Create custom events for adding a new enemy and a cloud
117ADDENEMY = pygame.USEREVENT + 1
118pygame.time.set_timer(ADDENEMY, 250)
119ADDCLOUD = pygame.USEREVENT + 2
120pygame.time.set_timer(ADDCLOUD, 1000)

cloud
Group
cloud
125# Create groups to hold enemy sprites, cloud sprites, and all sprites
126# - enemies is used for collision detection and position updates
127# - clouds is used for position updates
128# - all_sprites is used for rendering
129enemies = pygame.sprite.Group()
130clouds = pygame.sprite.Group()
131all_sprites = pygame.sprite.Group()
132all_sprites.add(player)

ADDCLOUD
137# Main loop
138while running:
139    # Look at every event in the queue
140    for event in pygame.event.get():
141        # Did the user hit a key?
142        if event.type == KEYDOWN:
143            # Was it the Escape key? If so, then stop the loop.
144            if event.key == K_ESCAPE:
145                running = False
146
147        # Did the user click the window close button? If so, stop the loop.
148        elif event.type == QUIT:
149            running = False
150
151        # Add a new enemy?
152        elif event.type == ADDENEMY:
153            # Create the new enemy and add it to sprite groups
154            new_enemy = Enemy()
155            enemies.add(new_enemy)
156            all_sprites.add(new_enemy)
157
158        # Add a new cloud?
159        elif event.type == ADDCLOUD:
160            # Create the new cloud and add it to sprite groups
161            new_cloud = Cloud()
162            clouds.add(new_cloud)
163            all_sprites.add(new_cloud)

clouds
167# Update the position of enemies and clouds
168enemies.update()
169clouds.update()
170
171# Fill the screen with sky blue
172screen.fill((135, 206, 250))

screen.fill()
Cloud
Enemy
all_sprites
clouds
enemies
all_sprites
clouds
enemies
enemies
time
Clock
Clock
Clock
106# Setup the clock for a decent framerate
107clock = pygame.time.Clock()

.tick()
pygame
188# Flip everything to the display
189pygame.display.flip()
190
191# Ensure program maintains a rate of 30 frames per second
192clock.tick(30)

.tick()
.tick()
.tick()
.tick()
pygame
mixer
mixer
music
Sound
Sound
pygame
pygame
mixer
pygame.init()
pygame.mixer.init()
106# Setup for sounds. Defaults are good.
107pygame.mixer.init()
108
109# Initialize pygame
110pygame.init()
111
112# Set up the clock for a decent framerate
113clock = pygame.time.Clock()

pygame.mixer.init()
pygame.mixer.init()
pygame.init()
135# Load and play background music
136# Sound source: http://ccmixter.org/files/Apoxode/59262
137# License: https://creativecommons.org/licenses/by/3.0/
138pygame.mixer.music.load(""Apoxode_-_Electric_1.mp3"")
139pygame.mixer.music.play(loops=-1)
140
141# Load all sound files
142# Sound sources: Jon Fincher
143move_up_sound = pygame.mixer.Sound(""Rising_putter.ogg"")
144move_down_sound = pygame.mixer.Sound(""Falling_putter.ogg"")
145collision_sound = pygame.mixer.Sound(""Collision.ogg"")

loops=-1
Enemy
move_up_sound
.play()
.update()
Player
26# Define the Player object by extending pygame.sprite.Sprite
27# Instead of a surface, use an image for a better-looking sprite
28class Player(pygame.sprite.Sprite):
29    def __init__(self):
30        super(Player, self).__init__()
31        self.surf = pygame.image.load(""jet.png"").convert()
32        self.surf.set_colorkey((255, 255, 255), RLEACCEL)
33        self.rect = self.surf.get_rect()
34
35    # Move the sprite based on keypresses
36    def update(self, pressed_keys):
37        if pressed_keys[K_UP]:
38            self.rect.move_ip(0, -5)
39            move_up_sound.play()
40        if pressed_keys[K_DOWN]:
41            self.rect.move_ip(0, 5)
42            move_down_sound.play()

201# Check if any enemies have collided with the player
202if pygame.sprite.spritecollideany(player, enemies):
203    # If so, then remove the player
204    player.kill()
205
206    # Stop any moving sounds and play the collision sound
207    move_up_sound.stop()
208    move_down_sound.stop()
209    collision_sound.play()
210
211    # Stop the loop
212    running = False

220# All done! Stop and quit the mixer.
221pygame.mixer.music.stop()
222pygame.mixer.quit()

pygame
pygame
display
mixer
music
time
image
event
key
pygame
Rect
Surface
Sound
Sprite
pygame
pygame
","['init', 'set_mode', 'get', 'fill', 'circle', 'flip', 'quit', 'Surface', 'get_rect', 'blit', 'get_width', 'get_height', 'Player', '__init__', 'super', 'get_pressed', 'update', 'move_ip', 'move', 'Enemy', 'randint', 'kill', 'Group', 'add', 'set_timer', 'spritecollideany', 'load', 'convert', 'set_colorkey', 'Cloud', 'Clock', 'tick', 'play', 'Sound', 'stop']","['pygame', 'random']"
39,"What is a generator in Python and how do you use it?
","def
return
yield
def generator_name(arg):
    # statements
    yield something
yield
def my_generator(n):

    # initialize counter
    value = 0

    # loop until counter is less than n
    while value < n:

        # produce the current value of the counter
        yield value

        # increment the counter
        value += 1

# iterate over the generator object produced by my_generator
for value in my_generator(3):

    # print each value produced by generator
    print(value)
my_generator()
n
n-1
yield
for
my_generator()
generator = my_range(3)
print(next(generator))  # 0
print(next(generator))  # 1
print(next(generator))  # 2
(expression for item in iterable)
expression
iterable
expression
iterable
# create the generator object
squares_generator = (i * i for i in range(5))

# iterate over the generator and print the values
for i in squares_generator:
    print(i)
for
class PowTwo:
    def __init__(self, max=0):
        self.n = 0
        self.max = max

    def __iter__(self):
        return self

    def __next__(self):
        if self.n > self.max:
            raise StopIteration

        result = 2 ** self.n
        self.n += 1
        return result
def PowTwoGen(max=0):
    n = 0
    while n < max:
        yield 2 ** n
        n += 1
def all_even():
    n = 0
    while True:
        yield n
        n += 2
def fibonacci_numbers(nums):
    x, y = 0, 1
    for _ in range(nums):
        x, y = y, x+y
        yield x

def square(nums):
    for num in nums:
        yield num**2

print(sum(square(fibonacci_numbers(10))))

# Output: 4895
","['generator_name', 'my_generator', 'my_range', 'next', 'range', '__init__', '__iter__', '__next__', 'PowTwoGen', 'all_even', 'fibonacci_numbers', 'square', 'sum']",[]
40,"How do you use the scikit-learn library in Python to perform machine learning tasks?
","# load the iris dataset as an example
from
sklearn.datasets 
import
load_iris
iris 
=
load_iris()
  
# store the feature matrix (X) and response vector (y)
X 
=
iris.data
y 
=
iris.target
  
# store the feature and target names
feature_names 
=
iris.feature_names
target_names 
=
iris.target_names
  
# printing features and target names of our dataset
print
(
""Feature names:""
, feature_names)
print
(
""Target names:""
, target_names)
  
# X and y are numpy arrays
print
(
""\nType of X is:""
, 
type
(X))
  
# printing first 5 input rows
print
(
""\nFirst 5 rows of X:\n""
, X[:
5
])
import
pandas as pd
  
# reading csv file
data 
=
pd.read_csv(
'weather.csv'
)
  
# shape of dataset
print
(
""Shape:""
, data.shape)
  
# column names
print
(
""\nFeatures:""
, data.columns)
  
# storing the feature matrix (X) and response vector (y)
X 
=
data[data.columns[:
-
1
]]
y 
=
data[data.columns[
-
1
]]
  
# printing first 5 rows of feature matrix
print
(
""\nFeature matrix:\n""
, X.head())
  
# printing first 5 values of response vector
print
(
""\nResponse vector:\n""
, y.head())
# load the iris dataset as an example
from
sklearn.datasets 
import
load_iris
iris 
=
load_iris()
# store the feature matrix (X) and response vector (y)
X 
=
iris.data
y 
=
iris.target
# splitting X and y into training and testing sets
from
sklearn.model_selection 
import
train_test_split
X_train, X_test, y_train, y_test 
=
train_test_split(X, y, test_size
=
0.4
, random_state
=
1
)
# printing the shapes of the new X objects
print
(X_train.shape)
print
(X_test.shape)
# printing the shapes of the new y objects
print
(y_train.shape)
print
(y_test.shape)
# load the iris dataset as an example
from
sklearn.datasets 
import
load_iris
iris 
=
load_iris()
# store the feature matrix (X) and response vector (y)
X 
=
iris.data
y 
=
iris.target
# splitting X and y into training and testing sets
from
sklearn.model_selection 
import
train_test_split
X_train, X_test, y_train, y_test 
=
train_test_split(X, y, test_size
=
0.4
, random_state
=
1
)
# training the model on training set
from
sklearn.neighbors 
import
KNeighborsClassifier
knn 
=
KNeighborsClassifier(n_neighbors
=
3
)
knn.fit(X_train, y_train)
# making predictions on the testing set
y_pred 
=
knn.predict(X_test)
# comparing actual response values (y_test) with predicted response values (y_pred)
from
sklearn 
import
metrics
print
(""kNN model accuracy:"", metrics.accuracy_score(y_test, y_pred))
# making prediction for out of sample data
sample 
=
[[
3
, 
5
, 
4
, 
2
], [
2
, 
3
, 
5
, 
4
]]
preds 
=
knn.predict(sample)
pred_species 
=
[iris.target_names[p] 
for
p 
in
preds]
print
(""Predictions:"", pred_species)
# saving the model
from
sklearn.externals 
import
joblib
joblib.dump(knn, 
'iris_knn.pkl'
)
","['load_iris', 'read_csv', 'head', 'train_test_split', 'KNeighborsClassifier', 'fit', 'predict', 'accuracy_score', 'dump']","['load_iris', 'pandas', 'train_test_split', 'KNeighborsClassifier', 'metrics', 'joblib']"
41,"How do you use the print() function in Python to display output to the console?
","print()
print('Python is powerful')

# Output: Python is powerful
print()
print()
print(object= separator= end= file= flush=)
print()
""\n""
""\t""
sys.stdout
False
print('Good Morning!')
print('It is rainy today')
print()
'\n'
# print with end whitespace
print('Good Morning!', end= ' ')

print('It is rainy today')
end= ' '
print()
print('New Year', 2023, 'See you soon!', sep= '. ')
print()
sep= "". ""
print()
.
print()
number = -10.6

name = ""Programiz""

# print literals     
print(5)

# print variables
print(number)
print(name)
print()
print('Programiz is ' + 'awesome.')
+
'Programiz is '
'awesome.'
print()
str.format()
x = 5
y = 10

print('The value of x is {} and y is {}'.format(x,y))
{}
input()
input(prompt)
prompt
# using input() to take user input
num = input('Enter a number: ')

print('You Entered:', num)

print('Data type of num:', type(num))
input()
type(num)
<class 'str'>
int()
float()
num = int(input('Enter a number: '))
","['format', 'input', 'type', 'int', 'float']",[]
42,"How do you use variables in Python to store and manipulate data?
",">>> print(5.3)
5.3

=
>>> n = 300

n
300
n
>>> print(n)
300

print()
>>> n
300

n
>>> n = 1000
>>> print(n)
1000
>>> n
1000

>>> a = b = c = 300
>>> print(a, b, c)
300 300 300

300
a
b
c
>>> var = 23.5
>>> print(var)
23.5

>>> var = ""Now I'm a string""
>>> print(var)
Now I'm a string

>>> print(300)
300

print(300)
300
type()
>>> type(300)
<class 'int'>

>>> n = 300

300
n
n
>>> print(n)
300
>>> type(n)
<class 'int'>

>>> m = n

m
n
>>> m = 400

400
m
>>> n = ""foo""

""foo""
n
300
300
id()
id()
>>> n = 300
>>> m = n
>>> id(n)
60127840
>>> id(m)
60127840

>>> m = 400
>>> id(m)
60127872

m = n
m
n
id(m)
id(n)
m
400
m
n
>>> m = 300
>>> n = 300
>>> id(m)
60062304
>>> id(n)
60062896

m = 300
300
m
n
300
id()
>>> m = 30
>>> n = 30
>>> id(m)
1405569120
>>> id(n)
1405569120

m
n
30
id(m)
id(n)
[-5, 256]
m
n
A-Z
a-z
0-9
_
>>> name = ""Bob""
>>> Age = 54
>>> has_W2 = True
>>> print(name, Age, has_W2)
Bob 54 True

>>> 1099_filed = False
SyntaxError: invalid token

>>> age = 1
>>> Age = 2
>>> aGe = 3
>>> AGE = 4
>>> a_g_e = 5
>>> _age = 6
>>> age_ = 7
>>> _AGE_ = 8

>>> print(age, Age, aGe, AGE, a_g_e, _age, age_, _AGE_)
1 2 3 4 5 6 7 8

age
Age
agE
>>> numberofcollegegraduates = 2500
>>> NUMBEROFCOLLEGEGRADUATES = 2500
>>> numberOfCollegeGraduates = 2500
>>> NumberOfCollegeGraduates = 2500
>>> number_of_college_graduates = 2500

>>> print(numberofcollegegraduates, NUMBEROFCOLLEGEGRADUATES,
... numberOfCollegeGraduates, NumberOfCollegeGraduates,
... number_of_college_graduates)
2500 2500 2500 2500 2500

n
ncg
numberOfCollegeGraduates
NumberOfCollegeGraduates
number_of_college_graduates
False
def
if
raise
None
del
import
return
True
elif
in
try
and
else
is
while
as
except
lambda
with
assert
finally
nonlocal
yield
break
for
not
class
from
or
continue
global
pass
help(""keywords"")
False
None
True
>>> for = 3
SyntaxError: invalid syntax

","['type', 'id', 'help']",['return']
43,"What is the difference between a string and a number in Python?
","fave_phrase = ""Hello world!""

#Hello world! is a string,enclosed in double quotation marks

fave_number = 7

#7 is an int
#""7"" would not be an int but a string, despite it being a number. 
#This is because of the quotation marks surrounding it

int()
int(""str"")
#string version of the number 7
print(""7"")

#check the data type with type() method
print(type(""7""))

#output

#7
#<class 'str'>

int()
#convert string to int data type
print(int(""7""))

#check the data type with type() method
print(type(int(""7"")))

#output

#7
#<class 'int'>

<class 'str'>
current_year = 2021

#ask user to input their year of birth
user_birth_year_input = input(""What year were you born? "")

#subtract the year the user filled in from the current year 
user_age = current_year - user_birth_year_input

print(user_age)

#output

#What year were you born? 1993
#Traceback (most recent call last):
#  File ""demo.py"", line 9, in <module>
#    user_age = current_year - user_birth_year_input
#TypeError: unsupported operand type(s) for -: 'int' and 'str'

type()
current_year = 2021

#ask user to input their year of birth
user_birth_year_input = input(""What year were you born? "")

print(type(user_birth_year_input))

#output

#What year were you born? 1993
#<class 'str'>

current_year = 2021

#ask user to input their year of birth
user_birth_year_input = input(""What year were you born? "")

#convert the raw user input to an int using the int() function and store in new variable
user_birth_year = int(user_birth_year_input)

#subtract the converted user input from the current year
user_age = current_year - user_birth_year

print(user_age)

#output

#What year were you born? 1993
#28

","['int', 'type', 'input']",[]
44,"How do you use if statements in Python to control program flow?
","# python program to illustrate If statement
 
i 
=
10
 
if
(i > 
15
):
    
print
(
""10 is less than 15""
)
print
(
""I am Not in if""
)
# python program to illustrate If else statement
#!/usr/bin/python
 
i 
=
20
if
(i < 
15
):
    
print
(
""i is smaller than 15""
)
    
print
(
""i'm in if Block""
)
else
:
    
print
(
""i is greater than 15""
)
    
print
(
""i'm in else Block""
)
print
(
""i'm not in if and not in else Block""
)
# Explicit function
def
digitSum(n):
    
dsum 
=
0
    
for
ele 
in
str
(n):
        
dsum 
+
=
int
(ele)
    
return
dsum
 
 
# Initializing list
List
=
[
367
, 
111
, 
562
, 
945
, 
6726
, 
873
]
 
# Using the function on odd elements of the list
newList 
=
[digitSum(i) 
for
i 
in
List
if
i & 
1
]
 
# Displaying new list
print
(newList)
# python program to illustrate nested If statement
#!/usr/bin/python
i 
=
10
if
(i 
=
=
10
):
   
    
#  First if statement
    
if
(i < 
15
):
        
print
(
""i is smaller than 15""
)
         
    
# Nested - if statement
    
# Will only be executed if statement above
    
# it is true
    
if
(i < 
12
):
        
print
(
""i is smaller than 12 too""
)
    
else
:
        
print
(
""i is greater than 15""
)
# Python program to illustrate if-elif-else ladder
#!/usr/bin/python
 
i 
=
20
if
(i 
=
=
10
):
    
print
(
""i is 10""
)
elif
(i 
=
=
15
):
    
print
(
""i is 15""
)
elif
(i 
=
=
20
):
    
print
(
""i is 20""
)
else
:
    
print
(
""i is not present""
)
# Python program to illustrate short hand if
i 
=
10
if
i < 
15
: 
print
(
""i is less than 15""
)
# Python program to illustrate short hand if-else
i 
=
10
print
(
True
) 
if
i < 
15
else
print
(
False
)
",['digitSum'],[]
45,"How do you use for loops in Python to iterate over a sequence of items?
","for
for
for val in sequence:
    # statement(s)
val
languages = ['Swift', 'Python', 'Go', 'JavaScript']

# access items of a list using for loop
for language in languages:
    print(language)
language
Swift
language
range()
values = range(4)
range()
for
# use of range() to define a range of values
values = range(4)

# iterate from i = 0 to i = 3
for i in values:
    print(i)
for
i
True
0
i
True
1
i
True
2
i
True
3
i
False
for
for
else
else
digits = [0, 1, 5]

for i in digits:
    print(i)
else:
    print(""No items left."")
for
else
No items left.
","['statement', 'range']",[]
46,"What is a function in Python and how do you define and call one?
","def
def functionName():
    # What to make the function do

def myfunction():
    print(""Hello World"")

myfunction()


python filename.py
def subtractNum():
    print(34 - 4)

subtractNum()
# Output: 30

def functionName(arg1, arg2):
    # What to do with function
    

functionName(valueForArg1, valueForArg2)

def addNum(num1, num2):
    print(num1 + num2)
addNum(2, 4)

# Output: 6

addNum
return
def multiplyNum(num1):
    return num1 * 8

result = multiplyNum(8)
print(result)

# Output: 64

multiplyNum
num1
num1
8
num1
result
","['functionName', 'myfunction', 'subtractNum', 'addNum', 'multiplyNum']",[]
47,"How do you use lists in Python to store and manipulate collections of data?
","[]
>>> a = ['foo', 'bar', 'baz', 'qux']

>>> print(a)
['foo', 'bar', 'baz', 'qux']
>>> a
['foo', 'bar', 'baz', 'qux']

>>> a = ['foo', 'bar', 'baz', 'qux']
>>> b = ['baz', 'qux', 'bar', 'foo']
>>> a == b
False
>>> a is b
False

>>> [1, 2, 3, 4] == [4, 1, 3, 2]
False

>>> a = [2, 4, 6, 8]
>>> a
[2, 4, 6, 8]

>>> a = [21.42, 'foobar', 3, 4, 'bark', False, 3.14159]
>>> a
[21.42, 'foobar', 3, 4, 'bark', False, 3.14159]

>>> int
<class 'int'>
>>> len
<built-in function len>
>>> def foo():
...     pass
...
>>> foo
<function foo at 0x035B9030>
>>> import math
>>> math
<module 'math' (built-in)>

>>> a = [int, len, foo, math]
>>> a
[<class 'int'>, <built-in function len>, <function foo at 0x02CA2618>,
<module 'math' (built-in)>]

>>> a = []
>>> a
[]

>>> a = [ 'foo' ]
>>> a
['foo']

>>> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
... 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
... 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
... 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
... 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
>>> a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
97, 98, 99, 100]

>>> a = ['bark', 'meow', 'woof', 'bark', 'cheep', 'bark']
>>> a
['bark', 'meow', 'woof', 'bark', 'cheep', 'bark']

>>> a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']

a
a
>>> a[0]
'foo'
>>> a[2]
'baz'
>>> a[5]
'corge'

>>> a[-1]
'corge'
>>> a[-2]
'quux'
>>> a[-5]
'bar'

a
a[m:n]
a
m
n
>>> a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']

>>> a[2:5]
['baz', 'qux', 'quux']

>>> a[-5:-2]
['bar', 'baz', 'qux']
>>> a[1:4]
['bar', 'baz', 'qux']
>>> a[-5:-2] == a[1:4]
True

>>> print(a[:4], a[0:4])
['foo', 'bar', 'baz', 'qux'] ['foo', 'bar', 'baz', 'qux']
>>> print(a[2:], a[2:len(a)])
['baz', 'qux', 'quux', 'corge'] ['baz', 'qux', 'quux', 'corge']

>>> a[:4] + a[4:]
['foo', 'bar', 'baz', 'qux', 'quux', 'corge']
>>> a[:4] + a[4:] == a
True

>>> a[0:6:2]
['foo', 'baz', 'quux']
>>> a[1:6:2]
['bar', 'qux', 'corge']
>>> a[6:0:-2]
['corge', 'qux', 'bar']

>>> a[::-1]
['corge', 'quux', 'qux', 'baz', 'bar', 'foo']

[:]
s
s[:]
>>> s = 'foobar'
>>> s[:]
'foobar'
>>> s[:] is s
True

a
a[:]
a
>>> a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']
>>> a[:]
['foo', 'bar', 'baz', 'qux', 'quux', 'corge']
>>> a[:] is a
False

in
not in
>>> a
['foo', 'bar', 'baz', 'qux', 'quux', 'corge']

>>> 'qux' in a
True
>>> 'thud' not in a
True

+
*
>>> a
['foo', 'bar', 'baz', 'qux', 'quux', 'corge']

>>> a + ['grault', 'garply']
['foo', 'bar', 'baz', 'qux', 'quux', 'corge', 'grault', 'garply']
>>> a * 2
['foo', 'bar', 'baz', 'qux', 'quux', 'corge', 'foo', 'bar', 'baz',
'qux', 'quux', 'corge']

len()
min()
max()
>>> a
['foo', 'bar', 'baz', 'qux', 'quux', 'corge']

>>> len(a)
6
>>> min(a)
'bar'
>>> max(a)
'qux'

>>> ['foo', 'bar', 'baz', 'qux', 'quux', 'corge'][2]
'baz'

>>> ['foo', 'bar', 'baz', 'qux', 'quux', 'corge'][::-1]
['corge', 'quux', 'qux', 'baz', 'bar', 'foo']

>>> 'quux' in ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']
True

>>> ['foo', 'bar', 'baz'] + ['qux', 'quux', 'corge']
['foo', 'bar', 'baz', 'qux', 'quux', 'corge']

>>> len(['foo', 'bar', 'baz', 'qux', 'quux', 'corge'][::-1])
6

>>> 'If Comrade Napoleon says it, it must be right.'[::-1]
'.thgir eb tsum ti ,ti syas noelopaN edarmoC fI'

>>> x = ['a', ['bb', ['ccc', 'ddd'], 'ee', 'ff'], 'g', ['hh', 'ii'], 'j']
>>> x
['a', ['bb', ['ccc', 'ddd'], 'ee', 'ff'], 'g', ['hh', 'ii'], 'j']

x
x[0]
x[2]
x[4]
>>> print(x[0], x[2], x[4])
a g j

x[1]
x[3]
>>> x[1]
['bb', ['ccc', 'ddd'], 'ee', 'ff']

>>> x[3]
['hh', 'ii']

>>> x[1]
['bb', ['ccc', 'ddd'], 'ee', 'ff']

>>> x[1][0]
'bb'
>>> x[1][1]
['ccc', 'ddd']
>>> x[1][2]
'ee'
>>> x[1][3]
'ff'

>>> x[3]
['hh', 'ii']
>>> print(x[3][0], x[3][1])
hh ii

x[1][1]
>>> x[1][1]
['ccc', 'ddd']
>>> print(x[1][1][0], x[1][1][1])
ccc ddd

>>> x[1][1][-1]
'ddd'
>>> x[1][1:3]
[['ccc', 'ddd'], 'ee']
>>> x[3][::-1]
['ii', 'hh']

x
len()
>>> x
['a', ['bb', ['ccc', 'ddd'], 'ee', 'ff'], 'g', ['hh', 'ii'], 'j']
>>> len(x)
5

>>> x[0]
'a'
>>> x[1]
['bb', ['ccc', 'ddd'], 'ee', 'ff']
>>> x[2]
'g'
>>> x[3]
['hh', 'ii']
>>> x[4]
'j'

x
x
in
>>> 'ddd' in x
False
>>> 'ddd' in x[1]
False
>>> 'ddd' in x[1][1]
True

'ddd'
x
x[1]
x[1][1]
>>> a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']
>>> a
['foo', 'bar', 'baz', 'qux', 'quux', 'corge']

>>> a[2] = 10
>>> a[-1] = 20
>>> a
['foo', 'bar', 10, 'qux', 'quux', 20]

>>> s = 'foobarbaz'
>>> s[2] = 'x'
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
TypeError: 'str' object does not support item assignment

del
>>> a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']

>>> del a[3]
>>> a
['foo', 'bar', 'baz', 'quux', 'corge']

a[m:n] = <iterable>

a
<iterable>
>>> a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']

>>> a[1:4]
['bar', 'baz', 'qux']
>>> a[1:4] = [1.1, 2.2, 3.3, 4.4, 5.5]
>>> a
['foo', 1.1, 2.2, 3.3, 4.4, 5.5, 'quux', 'corge']
>>> a[1:6]
[1.1, 2.2, 3.3, 4.4, 5.5]
>>> a[1:6] = ['Bark!']
>>> a
['foo', 'Bark!', 'quux', 'corge']

>>> a = [1, 2, 3]
>>> a[1:2] = [2.1, 2.2, 2.3]
>>> a
[1, 2.1, 2.2, 2.3, 3]

>>> a = [1, 2, 3]
>>> a[1] = [2.1, 2.2, 2.3]
>>> a
[1, [2.1, 2.2, 2.3], 3]

[n:n]
>>> a = [1, 2, 7, 8]
>>> a[2:2] = [3, 4, 5, 6]
>>> a
[1, 2, 3, 4, 5, 6, 7, 8]

del
>>> a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']
>>> a[1:5] = []
>>> a
['foo', 'corge']

>>> a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']
>>> del a[1:5]
>>> a
['foo', 'corge']

+
+=
>>> a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']

>>> a += ['grault', 'garply']
>>> a
['foo', 'bar', 'baz', 'qux', 'quux', 'corge', 'grault', 'garply']

>>> a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']

>>> a = [10, 20] + a
>>> a
[10, 20, 'foo', 'bar', 'baz', 'qux', 'quux', 'corge']

>>> a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']
>>> a += 20
Traceback (most recent call last):
  File ""<pyshell#58>"", line 1, in <module>
    a += 20
TypeError: 'int' object is not iterable

>>> a += [20]
>>> a
['foo', 'bar', 'baz', 'qux', 'quux', 'corge', 20]

>>> a = ['foo', 'bar', 'baz', 'qux', 'quux']
>>> a += 'corge'
>>> a
['foo', 'bar', 'baz', 'qux', 'quux', 'c', 'o', 'r', 'g', 'e']

a
'corge'
'corge'
>>> a = ['foo', 'bar', 'baz', 'qux', 'quux']
>>> a += ['corge']
>>> a
['foo', 'bar', 'baz', 'qux', 'quux', 'corge']

>>> s = 'foobar'
>>> t = s.upper()
>>> print(s, t)
foobar FOOBAR

a.append(<obj>)
a.append(<obj>)
<obj>
a
>>> a = ['a', 'b']
>>> a.append(123)
>>> a
['a', 'b', 123]

>>> a = ['a', 'b']
>>> x = a.append(123)
>>> print(x)
None
>>> a
['a', 'b', 123]

+
>>> a = ['a', 'b']
>>> a + [1, 2, 3]
['a', 'b', 1, 2, 3]

.append()
.append()
>>> a = ['a', 'b']
>>> a.append([1, 2, 3])
>>> a
['a', 'b', [1, 2, 3]]

.append()
>>> a = ['a', 'b']
>>> a.append('foo')
>>> a
['a', 'b', 'foo']

a.extend(<iterable>)
.extend()
<iterable>
>>> a = ['a', 'b']
>>> a.extend([1, 2, 3])
>>> a
['a', 'b', 1, 2, 3]

.extend()
+
+=
>>> a = ['a', 'b']
>>> a += [1, 2, 3]
>>> a
['a', 'b', 1, 2, 3]

a.insert(<index>, <obj>)
a.insert(<index>, <obj>)
<obj>
a
<index>
a[<index>]
<obj>
>>> a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']
>>> a.insert(3, 3.14159)
>>> a[3]
3.14159
>>> a
['foo', 'bar', 'baz', 3.14159, 'qux', 'quux', 'corge']

a.remove(<obj>)
a.remove(<obj>)
<obj>
a
<obj>
a
>>> a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']
>>> a.remove('baz')
>>> a
['foo', 'bar', 'qux', 'quux', 'corge']

>>> a.remove('Bark!')
Traceback (most recent call last):
  File ""<pyshell#13>"", line 1, in <module>
    a.remove('Bark!')
ValueError: list.remove(x): x not in list

a.pop(index=-1)
.remove()
a.pop()
>>> a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']

>>> a.pop()
'corge'
>>> a
['foo', 'bar', 'baz', 'qux', 'quux']

>>> a.pop()
'quux'
>>> a
['foo', 'bar', 'baz', 'qux']

<index>
<index>
>>> a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']

>>> a.pop(1)
'bar'
>>> a
['foo', 'baz', 'qux', 'quux', 'corge']

>>> a.pop(-3)
'qux'
>>> a
['foo', 'baz', 'quux', 'corge']

<index>
-1
a.pop(-1)
a.pop()
>>> a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']

>>> a[2:2] = [1, 2, 3]
>>> a += [3.14159]
>>> a
['foo', 'bar', 1, 2, 3, 'baz', 'qux', 'quux', 'corge', 3.14159]

>>> a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']
>>> a[2:3] = []
>>> del a[0]
>>> a
['bar', 'qux', 'quux', 'corge']

()
[]
>>> t = ('foo', 'bar', 'baz', 'qux', 'quux', 'corge')
>>> t
('foo', 'bar', 'baz', 'qux', 'quux', 'corge')

>>> t[0]
'foo'
>>> t[-1]
'corge'
>>> t[1::2]
('bar', 'qux', 'corge')

>>> t[::-1]
('corge', 'quux', 'qux', 'baz', 'bar', 'foo')

>>> t = ('foo', 'bar', 'baz', 'qux', 'quux', 'corge')
>>> t[2] = 'Bark!'
Traceback (most recent call last):
  File ""<pyshell#65>"", line 1, in <module>
    t[2] = 'Bark!'
TypeError: 'tuple' object does not support item assignment

>>>
>>> a = 'foo'
>>> b = 42
>>> a, 3.14159, b
('foo', 3.14159, 42)

>>> t = ()
>>> type(t)
<class 'tuple'>

>>> t = (1, 2)
>>> type(t)
<class 'tuple'>
>>> t = (1, 2, 3, 4, 5)
>>> type(t)
<class 'tuple'>

>>> t = (2)
>>> type(t)
<class 'int'>

(2)
2
int
,
>>> t = (2,)
>>> type(t)
<class 'tuple'>
>>> t[0]
2
>>> t[-1]
2

>>> print(t)
(2,)

>>> t = ('foo', 'bar', 'baz', 'qux')

>>> t
('foo', 'bar', 'baz', 'qux')
>>> t[0]
'foo'
>>> t[-1]
'qux'

>>> (s1, s2, s3, s4) = t
>>> s1
'foo'
>>> s2
'bar'
>>> s3
'baz'
>>> s4
'qux'

>>> (s1, s2, s3) = t
Traceback (most recent call last):
  File ""<pyshell#16>"", line 1, in <module>
    (s1, s2, s3) = t
ValueError: too many values to unpack (expected 3)

>>> (s1, s2, s3, s4, s5) = t
Traceback (most recent call last):
  File ""<pyshell#17>"", line 1, in <module>
    (s1, s2, s3, s4, s5) = t
ValueError: not enough values to unpack (expected 5, got 4)

>>> (s1, s2, s3, s4) = ('foo', 'bar', 'baz', 'qux')
>>> s1
'foo'
>>> s2
'bar'
>>> s3
'baz'
>>> s4
'qux'

>>> (s1, s2, s3, s4, s5) = ('foo', 'bar', 'baz', 'qux')
Traceback (most recent call last):
  File ""<pyshell#63>"", line 1, in <module>
    (s1, s2, s3, s4, s5) = ('foo', 'bar', 'baz', 'qux')
ValueError: not enough values to unpack (expected 5, got 4)

>>> t = 1, 2, 3
>>> t
(1, 2, 3)

>>> x1, x2, x3 = t
>>> x1, x2, x3
(1, 2, 3)

>>> x1, x2, x3 = 4, 5, 6
>>> x1, x2, x3
(4, 5, 6)

>>> t = 2,
>>> t
(2,)

>>> a = 'foo'
>>> b = 'bar'
>>> a, b
('foo', 'bar')

>>># We need to define a temp variable to accomplish the swap.
>>> temp = a
>>> a = b
>>> b = temp

>>> a, b
('bar', 'foo')

>>> a = 'foo'
>>> b = 'bar'
>>> a, b
('foo', 'bar')

>>># Magic time!
>>> a, b = b, a

>>> a, b
('bar', 'foo')

","['foo', 'len', 'min', 'max', 'upper', 'append', 'extend', 'insert', 'remove', 'pop', 'type']",['math']
48,"What is a dictionary in Python and how do you use it?
","capital_city = {""Nepal"": ""Kathmandu"", ""Italy"": ""Rome"", ""England"": ""London""}
print(capital_city)
""Nepal""
""Italy""
""England""
""Kathmandu""
""Rome""
""London""
# dictionary with keys and values of different data types
numbers = {1: ""One"", 2: ""Two"", 3: ""Three""}
print(numbers)
[]
capital_city = {""Nepal"": ""Kathmandu"", ""England"": ""London""}
print(""Initial Dictionary: "",capital_city)

capital_city[""Japan""] = ""Tokyo""

print(""Updated Dictionary: "",capital_city)
capital_city[""Japan""] = ""Tokyo""
Japan
Tokyo
[]
student_id = {111: ""Eric"", 112: ""Kyle"", 113: ""Butters""}
print(""Initial Dictionary: "", student_id)

student_id[112] = ""Stan""

print(""Updated Dictionary: "", student_id)
112
""Kyle""
student_id[112] = ""Stan""
112
""Stan""
student_id = {111: ""Eric"", 112: ""Kyle"", 113: ""Butters""}

print(student_id[111])  # prints Eric
print(student_id[113])  # prints Butters
student_id = {111: ""Eric"", 112: ""Kyle"", 113: ""Butters""}
print(student_id[211])  

# Output: KeyError: 211
del
student_id = {111: ""Eric"", 112: ""Kyle"", 113: ""Butters""}

print(""Initial Dictionary: "", student_id)

del student_id[111]

print(""Updated Dictionary "", student_id)
del student_id[111]
del
111
del
student_id = {111: ""Eric"", 112: ""Kyle"", 113: ""Butters""}

# delete student_id dictionary
del student_id

print(student_id)

# Output: NameError: name 'student_id' is not defined
True
True
False
key
in
keys
values
# Membership Test for Dictionary Keys
squares = {1: 1, 3: 9, 5: 25, 7: 49, 9: 81}

# Output: True
print(1 in squares) # prints True

print(2 not in squares) # prints True

# membership tests for key only not value
print(49 in squares) # prints false
for
# Iterating through a Dictionary
squares = {1: 1, 3: 9, 5: 25, 7: 49, 9: 81}
for i in squares:
    print(squares[i])
for
",[],[]
49,"How do you use modules in Python to organize and reuse code?
","import
pygame
import
random
STARTING_BLUE_BLOBS 
=
10
STARTING_RED_BLOBS 
=
3
WIDTH 
=
800
HEIGHT 
=
600
WHITE 
=
(
255
, 
255
, 
255
)
BLUE 
=
(
0
, 
0
, 
255
)
RED 
=
(
255
, 
0
, 
0
)
game_display 
=
pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption(
""Blob World""
)
clock 
=
pygame.time.Clock()
class
Blob:
    
def
__init__(
self
, color):
        
self
.x 
=
random.randrange(
0
, WIDTH)
        
self
.y 
=
random.randrange(
0
, HEIGHT)
        
self
.size 
=
random.randrange(
4
,
8
)
        
self
.color 
=
color
    
def
move(
self
):
        
self
.move_x 
=
random.randrange(
-
1
,
2
)
        
self
.move_y 
=
random.randrange(
-
1
,
2
)
        
self
.x 
+
=
self
.move_x
        
self
.y 
+
=
self
.move_y
        
if
self
.x < 
0
: 
self
.x 
=
0
        
elif
self
.x > WIDTH: 
self
.x 
=
WIDTH
        
        
if
self
.y < 
0
: 
self
.y 
=
0
        
elif
self
.y > HEIGHT: 
self
.y 
=
HEIGHT
def
draw_environment(blob_list):
    
game_display.fill(WHITE)
    
for
blob_dict 
in
blob_list:
        
for
blob_id 
in
blob_dict:
            
blob 
=
blob_dict[blob_id]
            
pygame.draw.circle(game_display, blob.color, [blob.x, blob.y], blob.size)
            
blob.move()
    
pygame.display.update()
    
def
main():
    
blue_blobs 
=
dict
(
enumerate
([Blob(BLUE) 
for
i 
in
range
(STARTING_BLUE_BLOBS)]))
    
red_blobs 
=
dict
(
enumerate
([Blob(RED) 
for
i 
in
range
(STARTING_RED_BLOBS)]))
    
while
True
:
        
for
event 
in
pygame.event.get():
            
if
event.
type
=
=
pygame.QUIT:
                
pygame.quit()
                
quit()
        
draw_environment([blue_blobs,red_blobs])
        
clock.tick(
60
)
if
__name__ 
=
=
'__main__'
:
    
main()
","['set_mode', 'set_caption', 'Clock', '__init__', 'randrange', 'move', 'draw_environment', 'fill', 'circle', 'update', 'main', 'Blob', 'get', 'quit', 'tick']","['pygame', 'random']"
50,"How do you use the try-except block in Python to handle exceptions and errors?
","try...except
try...except
try...except
try:
    # code that may cause exception
except:
    # code to run when exception occurs
try
try
except
except
except
try:
    numerator = 10
    denominator = 0

    result = numerator/denominator

    print(result)
except:
    print(""Error: Denominator cannot be 0."")

# Output: Error: Denominator cannot be 0. 
result = numerator/denominator
try
try
except
except
try
except
try
except
except
except
try:
    
    even_numbers = [2,4,6,8]
    print(even_numbers[5])

except ZeroDivisionError:
    print(""Denominator cannot be 0."")
    
except IndexError:
    print(""Index Out of Bound."")

# Output: Index Out of Bound
print(even_numbers[5])
IndexError
IndexError
try
ZeroDivisionError
IndexError
try
else
try
# program to print the reciprocal of even numbers

try:
    num = int(input(""Enter a number: ""))
    assert num % 2 == 0
except:
    print(""Not an even number!"")
else:
    reciprocal = 1/num
    print(reciprocal)
ZeroDivisionError
else
except
else
finally
finally
try
finally
try:
    numerator = 10
    denominator = 0

    result = numerator/denominator

    print(result)
except:
    print(""Error: Denominator cannot be 0."")
    
finally:
    print(""This is finally block."")
try
except
finally
","['int', 'input']",[]
